-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)
fun eval (c@[s, w], stmt) {
   case stmt of
     Assn(x, e)      -> [s <- [x, evalExpr(s, e)], w]
   | Seq(s1, s2)     -> eval(eval(c, s1), s2)
   | Skip            -> c
   | Read(x)         -> let [inp, w] = readWorld(w) in [s <- [x, inp], w]
   | Write(e)        -> [s, writeWorld(evalExpr(s, e), w)]
   | If(con, t, f)   -> if evalExpr(s, con) then eval(c, t) else eval(c, f) fi
   | While(con, b)   -> if evalExpr(s, con) then eval(c, Seq(b, stmt)) else c fi
   | DoWhile(b, con) -> eval(c, Seq(b, While(con, b)))
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}