-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn(x, expr) ->
          [state <- [x, evalExpr(state, expr)], world]
    | Seq(x, y) ->
          eval(eval(c, x), y)
    | Skip ->
          c
    | Read(x) ->
          case readWorld(world) of
            [value, newWorld] -> [state <- [x, value], newWorld]
          esac
    | Write(expr) ->
          [state, writeWorld(evalExpr(state, expr), world)]
    | If (expr, stmt1, stmt2) -> 
          if evalExpr(state, expr) != 0 then eval(c, stmt1) else eval(c, stmt2) fi
    | While (expr, stmt1) -> 
          if evalExpr(state, expr) != 0 then eval(c, Seq(stmt1, stmt)) else c fi
    | DoWhile (stmt1, expr) -> 
          eval(c, Seq(stmt1, While(expr, stmt1)))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
