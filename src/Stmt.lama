-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[s, w], stmt) {
   case stmt of
        Skip -> c
      | Assn (name, expr) -> [s <- [name, evalExpr(s, expr)], w]
      | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
      | Write (expr) -> [s, writeWorld(evalExpr(s, expr), w)]
      | Read (name) -> let [v, nw] = readWorld(w)
                         in [s <- [name, v], nw]
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}