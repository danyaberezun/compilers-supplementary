-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[st, w], stmt) {
   case stmt of
    Assn(s, e) -> [st <- [s, evalExpr(st, e)], w]
   | Seq(st1, st2) -> eval(eval([st, w], st1), st2)
   | Skip -> [st, w]
   | Read(s) -> 
      case readWorld(w) of
       [n, w1] -> [st <- [s, n], w1]
       esac
   | Write(e) -> [st, writeWorld(evalExpr(st, e), w)]
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}