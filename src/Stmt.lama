-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn(varName, expr) -> 
      case c of
        [st, world] -> 
          [st <- [varName, evalExpr (st, expr)], world]
      esac
  | Seq(firstStmt, secondStmt) -> 
      eval(eval(c, firstStmt), secondStmt)
  | Skip -> 
      c
  | Read(varName) -> 
      case c of  
        [st, world] -> 
          case readWorld (world) of
            [value, newWorld] -> 
              [st <- [varName, value], newWorld]
          esac
      esac
   | Write(expr) -> 
      case c of
        [st, world] -> 
          case writeWorld (evalExpr (st, expr), world) of
            newWorld -> 
              [st, newWorld]
          esac
      esac
   esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
