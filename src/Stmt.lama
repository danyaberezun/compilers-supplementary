-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
  case stmt of
    Skip                  -> c
  | Assn  (x, e)          -> [st <- [x, evalExpr (st, e)], w]
  | Seq (s1,  s2)  -> eval(eval(c, s1), s2)
  | Read (x)       -> let [value, new_world] = readWorld(w) in 
                                 [st <- [x, value], new_world]
  | Write (exp)          -> [st, writeWorld(evalExpr(st, exp), w)]
  | If(e, b1, b2)      -> if evalExpr(st, e) 
                             then eval(c, b1) 
                             else eval(c, b2) fi
  | While(s1, s2)    -> if evalExpr(st, s1) 
                             then eval(c, Seq(s2, stmt)) 
                             else c fi
  | DoWhile(s2, s1)  -> eval(c, Seq(s2, While(s1, s2)))
  esac
  
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
