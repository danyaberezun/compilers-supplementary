-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[state, w], stmt) {
   case stmt of
      Assn(x, e) -> [state <- [x, evalExpr(state, e)], w]
      | Seq(l, r) -> let c1 = eval(c, l) in eval(c1, r)
      | Skip -> c
      | Read(x) -> let [v, w1] = readWorld(w) in [state <- [x, v], w1]
      | Write(e) -> [state, writeWorld(evalExpr(state, e), w)]
   esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}