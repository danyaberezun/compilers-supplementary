-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun evalAssnStmt ([st, w], variable, expr) {
  [st <- [variable, evalExpr(st, expr)], w]
}

fun evalSeqStmt (c, stmt1, stmt2) {
  eval(eval(c, stmt1), stmt2)
}

fun evalSkipStmt (c) {
  c
}

fun evalReadStmt ([st, w], variable) {
  case w of
    w1@[n : i, o] ->
      case readWorld(w1) of
        [value, w2] -> [st <- [variable, value], w2]
      esac
  | _ -> failure("Error. Input is empty!")
  esac
}

fun evalWriteStmt ([st, w], expr) {
  [st, writeWorld(evalExpr(st, expr), w)]
}

fun evalIfStmt (c@[st, w], expr, stmt1, stmt2) {
  case evalExpr(st, expr) of
    0 -> eval(c, stmt2)
  | _ -> eval(c, stmt1)
  esac
}

fun evalWhileStmt (c@[st, w], fullWhile, expr, stmt) {
  case evalExpr(st, expr) of
    0 -> c
  | _ -> eval(eval(c, stmt), fullWhile)
  esac
}

fun evalDoWhileStmt (c, fullDoWhile, stmt, expr) {
  case eval(c, stmt) of
    c1@[st1, w1] ->
      case evalExpr(st1, expr) of
        0 -> c1
      | _ -> eval(c1, fullDoWhile)
      esac
  esac
}

fun eval (c@[st, w], stmt) {
  case stmt of
    Assn (x, e)          -> evalAssnStmt(c, x, e)
  | Seq (s1, s2)         -> evalSeqStmt(c, s1, s2)
  | Skip                 -> evalSkipStmt(c)
  | Read (x)             -> evalReadStmt(c, x)
  | Write (e)            -> evalWriteStmt(c, e)
  | If (e, s1, s2)       -> evalIfStmt(c, e, s1, s2)
  | w@While (e, s)       -> evalWhileStmt(c, w, e, s)
  | dw@DoWhile (s, e)    -> evalDoWhileStmt(c, dw, s, e)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
