-- Statement evaluator.



import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[st, w], stmt) {
  case stmt of
      Assn(name, expr) ->
          eval([st <- [name, evalExpr(st, expr)], w], Skip)
    | Seq(s1, s2) ->
      let c1 = eval(c, s1) in
          eval(c1, s2)
    | Skip -> c
    | Read(name) ->
      case readWorld(w) of
         [z, world1] -> 
          eval([st <- [name, z], world1], Skip)
      esac
    | Write (expr) -> 
          eval([st, writeWorld(evalExpr(st, expr), w)], Skip)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
