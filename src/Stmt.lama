-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (current_config, statement) {
  let [current_state, world_state] = current_config in
  case statement of
    Assn (variable_name, expr_val) -> [current_state <- [variable_name, evalExpr (current_state, expr_val)], world_state]
  | Seq (first_stmt, second_stmt) -> eval (eval (current_config, first_stmt), second_stmt)
  | Skip -> current_config
  | Read (variable_name) -> 
    case world_state.fst of -- Input list from world
      {} -> failure("Input error: trying to read from empty stream\n")
      | val_read:remaining_input -> 
        [(current_state <- [variable_name, val_read]), [remaining_input, world_state.snd]]
    esac
  | Write (expr_to_print) -> [current_state, writeWorld (evalExpr (current_state, expr_to_print), world_state)]
  | If (e, s1, s2) -> if evalExpr (current_state, e) != 0 then eval (current_config, s1) else eval(current_config, s2) fi
  | While (e, s) -> if evalExpr (current_state, e) != 0 then eval (eval (current_config, s), While (e, s)) else current_config fi
  | DoWhile (s, e) ->
    case eval (current_config, s) of
      new_config@[new_state, new_world] -> 
        if evalExpr (new_state, e) != 0 then 
          eval (new_config, DoWhile (s, e)) 
        else 
          new_config 
        fi
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (program_input, main_statement) {
  eval ([emptyState, createWorld (program_input)], main_statement).snd.getOutput
}
