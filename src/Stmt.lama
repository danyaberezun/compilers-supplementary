-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--

-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)       |
--        DoWhile (stmt, expr)       

fun eval (c@[state, world], stmt) {
   case stmt of
      Skip -> c
   |  Assn (name, expr) -> [state <- [name, evalExpr(state, expr)], world]
   |  Seq (first,  second) -> eval(eval(c, first), second)
   |  Read (variable) -> let [value, new_world] = readWorld(world) in [state <- [variable, value], new_world]
   |  Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
   |  If(cond, b1, b2) -> if evalExpr(state, cond) then eval(c, b1) else eval(c, b2) fi
   |  While(cond, block) -> if evalExpr(state, cond) then eval(c, Seq(block, stmt)) else c fi
   |  DoWhile(block, cond) -> eval(c, Seq(block, While(cond, block)))
   esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}