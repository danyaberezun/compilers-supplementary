-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)
fun eval (c@[s, w], stmt) {
  case stmt of
    Assn (x, e) ->
      [s <- [x, evalExpr(s, e)], w]
  | Seq (stmt1, stmt2) ->
      let c = eval(c, stmt1) in
      eval(c, stmt2)
  | Skip ->
      c
  | Read (x) ->
      let [value, w] = readWorld(w) in
      [s <- [x, value], w]
  | Write (e) ->
      [s, writeWorld(evalExpr(s, e), w)]
  | If(cond, th, els) -> 
      if evalExpr(s, cond) then
        eval(c, th)
      else
        eval(c, els)
      fi
  | While(cond, body) ->
      if evalExpr(s, cond) then
        let c = eval(c, body) in eval(c, stmt)
      else
        c
      fi
  | DoWhile(body, cond) ->
      let c@[s, w] = eval(c, body) in
      if evalExpr(s, cond) then
        eval(c, stmt)
      else
        c
      fi
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
