-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[s, w], stmt) {
   case stmt of
     Assn(v, expr)    -> [s <- [v, evalExpr(s, expr)], w]
   | Seq(left, right) -> eval(eval(c, left), right)
   | Skip             -> c
   | Read(v)          -> case readWorld(w) of
                           [value, w1] -> [s <- [v, value], w1]
                         esac
   | Write(expr)      -> [s, writeWorld(evalExpr(s, expr), w)]
   esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}