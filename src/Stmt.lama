-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c, stmt) {
   let [st, w] = c in
      case stmt of 
            Assn  (x, expr) -> [st <- [x, evalExpr(st, expr)], w]
         |  Seq   (l, r)    -> eval(eval(c, l), r)
         |  Skip            -> c
         |  Read  (x)       -> [st <- [x, readWorld(w).fst], readWorld(w).snd]
         |  Write (expr)    -> [st, writeWorld(evalExpr(st, expr), w)]
      esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}