-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[state, world], stmt) {
   case stmt of
      Assn(x, expression) ->
         [state <- [x, evalExpr(state, expr)], world]
      | Seq(x, y) ->
         eval(eval(config, x), y)
      | Skip ->
         config
      | Read(x) ->
         case readWorld(world) of
            [value, newWorld] -> [state <- [x, value], newWorld]
         esac
      | Write(expr) ->
         [state, writeWorld(evalExpr(state, expr), world)]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}