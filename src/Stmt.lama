-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of 
    Skip                  -> evalSkip(c) |
    Assn(vrbl, expr)      -> evalAssignment(c, vrbl, expr) |
    Seq(stmt1, stmt2)     -> evalSequence(c, stmt1, stmt2) |
    Read(vrbl)            -> evalRead(c, vrbl) |
    Write(expr)           -> evalWrite(c, expr) |
    If(expr, s1, s2)      -> evalIf(c, expr, s1, s2) |
    While(expr, body)     -> evalWhile(c, expr, body) |
    DoWhile(body, expr)   -> evalDoWhile(c, body, expr)
  esac
}

fun evalSkip(c) {
  c
}

fun evalAssignment([state, world], name, expr) {
  let value = evalExpr(state, expr) in
    [state <- [name, value], world]
}

fun evalSequence(c, stmt1, stmt2) {
  eval(eval(c, stmt1), stmt2)
}

fun evalRead([state, world], name) {
  let [value, new_world] = readWorld(world) in
    [state <- [name, value], new_world]
}

fun evalWrite([state, world], expr) {
  [state, writeWorld(evalExpr(state, expr), world)]
}

fun evalIf(c@[state, _], condExpr, thenStmt, elseStmt) {
  if evalExpr(state, condExpr) == 0
  then eval(c, elseStmt)
  else eval(c, thenStmt)
  fi
}

fun evalWhile(c@[state, _], condExpr, body) {
  if evalExpr(state, condExpr) == 0
  then c
  else eval(eval(c, body), While(condExpr, body))
  fi
}

fun evalDoWhile(c, body, condExpr) {
  let new_c@[new_state, _] = eval(c, body) in
    if evalExpr(new_state, condExpr) == 0
    then new_c
    else eval(new_c, DoWhile(body, condExpr))
    fi
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}