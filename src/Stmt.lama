-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
   let [st, w] = c in case stmt of
      Assn    (name, expr)     -> [st <- [name, evalExpr(st, expr)], w]
    | Seq     (st1, st2)       -> eval(eval(c, st1), st2)
    | Skip                     -> c
    | Read    (name)           -> let [value, w2] = readWorld(w) in [st <- [name, value], w2]
    | Write   (expr)           -> [st, writeWorld(evalExpr(st, expr), w)]
    | If      (cond, st1, st2) -> if evalExpr(st, cond) then eval(c, st1) else eval(c, st2) fi
    | While   (cond, s)        -> if evalExpr(st, cond) then eval(c, Seq(s, stmt)) else c fi
    | DoWhile (s, cond)        -> eval(c, Seq(s, While(cond, s)))
      esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}