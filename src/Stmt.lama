-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
   case stmt of 
        Assn (varname, varexpr) -> [(c[0] <- [varname, evalExpr(c[0], varexpr)]), c[1]]
      | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
      | Skip -> c
      | Read (varname) -> case readWorld(c[1]) of [res, w] -> [(c[0] <- [varname, res]), w] esac
      | Write (expr1) -> [c[0], writeWorld(evalExpr(c[0], expr1), c[1])]
      | If (e, s1, s2) -> case evalExpr(c[0], e) of 
            0 -> eval(c, s2) |
            _ -> eval(c, s1)
         esac
      | While (e, s) -> case evalExpr(c[0], e) of
            0 -> c |
            _ -> eval(eval(c, s), stmt)
         esac
      | DoWhile (s, e) -> eval(eval(c, s), While (e, s))
   esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}
