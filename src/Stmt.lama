-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of 
    Skip -> c |
    Assn (vrbl, expr) -> [state <- [vrbl, evalExpr(state, expr)], world] |
    Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2) |
    Read (vrbl) -> let [value, new_world] = readWorld(world) in [state <- [vrbl, value], new_world] |
    Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)] |
    If (expr, stmt1, stmt2) -> if evalExpr(state, expr) == 0 then eval(c, stmt2) else eval(c, stmt1) fi |
    While (expr, stmt) -> if evalExpr(state, expr) == 0 then c else eval(eval(c, stmt), While(expr, stmt)) fi |
    DoWhile (stmt, expr) -> let new_c@[new_state, _] = eval(c, stmt) in (
                             if evalExpr(new_state, expr) == 0
                             then new_c
                             else eval(new_c, DoWhile(stmt, expr))
                             fi
                           )
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
