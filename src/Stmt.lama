-- Statement evaluator.
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
fun eval (c@[state, w], stmt) {
    case stmt of 
      Assn (variable, expr) -> [state <- [variable, evalExpr(state, expr)], w]
    | Seq (l, r) -> eval(eval(c, l), r)
    | Skip -> c 
    | Read (variable) -> case readWorld(w) of [value, w_] -> [state <- [variable, value], w_] esac
    | Write (expr) -> [state, writeWorld(evalExpr(state, expr), w)]
    esac
}
-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
   eval([emptyState, createWorld(input)], stmt).snd.getOutput
}