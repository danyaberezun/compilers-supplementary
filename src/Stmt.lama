-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |
--        if     (expr, stmt, stmt) |
--        While  (expr, stmt)       |
--        Repeat (stmt, expr)

fun eval (c@[state, w], stmt) {
     case stmt of 
       Assn (variable, expr) -> [state <- [variable, evalExpr (state, expr)], w]
     | Seq (left, right) -> eval(eval(c, left), right)
     | Skip -> c 
     | Read (variable) -> case readWorld(w) of 
                           [value, w1] -> [state <- [variable, value], w1] 
                          esac
     | Write (expr) -> [state, writeWorld (evalExpr (state, expr), w)]
     | If(e, s1, s2) -> if evalExpr(state, e) 
                        then eval(c, s1) 
                        else eval(c, s2) 
                        fi
     | While(e, s) -> if evalExpr(state, e) 
                      then eval(c, Seq(s, stmt)) 
                      else c 
                      fi
     | DoWhile(s, e) -> eval(c, Seq(s, While(e, s)))
     esac
 }


-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
