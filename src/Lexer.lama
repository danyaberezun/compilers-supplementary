-- Lexical analysis using Matcher

import Matcher;
import Ostap;
import Fun;
import Collection;
import List;

-- A hashtable to keep a source code location information.
-- The keys in this table are some (boxed) values, and values are
-- pairs [line, column]
var srcTab = emptyHashTab (1024, hash, flatCompare);

-- A custom combinator to additionally add location info
public fun located (p) {
  syntax(l=pos x=p {srcTab := addHashTab (srcTab, x, l); x})
}

-- Retrieves location info; fail if no info found
public fun getLoc (s) {
  case findHashTab (srcTab, s) of Some (loc) -> loc | None -> failure ("no location found for item %s\n", s.string) esac
}

-- A set of all keywords
var keywords =
   foldl (addSet,
          emptySet (compare),
          {"skip",
           "if",
           "then",
           "else",
           "elif",
           "fi",
           "while",
           "do",
           "od",
           "for",
           "var",
           "val",
           "fun"});

-- Regular expression definitions
public rWhiteSpace  = createRegexp ("(([ \n\t]*)|(--[^\n]*[ \n\t]*))*", "whitespace"),
       rStrlit      = createRegexp ("""([^""]|"""")*""", "string constant"),
       rChar        = createRegexp ("'([^']|''|\n|\t)'", "character constant"),
       rDecimal     = createRegexp ("-?[0-9]+", "decimal constant"),
       rLident      = createRegexp ("[a-z][a-z_A-Z0-9]*", "lowercase identifier"),
       rUident      = createRegexp ("[A-Z][a-z_A-Z0-9]*", "uppercase identifier"),
       rRead        = createRegexp ("read\b", """read"""),
       rWrite       = createRegexp ("write\b", """write"""),
       rSkip        = createRegexp ("skip\b", """skip"""),
       rIf          = createRegexp ("if\b", """if"""),
       rThen        = createRegexp ("then\b", """then"""),
       rElse        = createRegexp ("else\b", """else"""),
       rElif        = createRegexp ("elif\b", """elif"""),
       rFi          = createRegexp ("fi\b", """fi"""),       
       rWhile       = createRegexp ("while\b", """while"""),
       rDo          = createRegexp ("do\b", """do"""),
       rOd          = createRegexp ("od\b", """od"""),
       rFor         = createRegexp ("for\b", """for"""),
       rVar         = createRegexp ("var\b", """var"""),
       rVal         = createRegexp ("val\b", """val"""),
       rFun         = createRegexp ("fun\b", """for""");
      
var whiteSpace = token (rWhiteSpace);

-- Public parsers for concrete tokens
-- Generic token parser; t is either a string or a regular expression
public fun s (t) {memo $ syntax (-whiteSpace token[t])}

-- Some individual tokens
public kSkip    = s (rSkip),
       kIf      = s (rIf),
       kThen    = s (rThen),
       kElse    = s (rElse),
       kElif    = s (rElif),
       kFi      = s (rFi),
       kWhile   = s (rWhile),
       kDo      = s (rDo),
       kOd      = s (rOd),
       kFor     = s (rFor),
       kFun     = s (rFun),
       kVal     = s (rVal),
       kVar     = s (rVar),       
       decimal  = s (rDecimal),
       chrlit   = syntax (x=s[rChar] {case substring (x, 1, x.length - 2) of
                                        "\\t" -> '\t'
                                      | "\\n" -> '\n'
                                      | "''"  -> ''''
                                      | x     -> x [0]
                                      esac
                                     }),
       strlit   = syntax (x=s[rStrlit] {var j = 0;
                                        for var i; i := 1,
                                            i < x.length - 1,
                                            j := j + 1
                                        do
                                          x [j] := x [i];
                                          i := i + if x[i] == '"' then 2 else 1 fi                                          
                                        od;
                                        substring (x, 0, j)}), 
       pos      = memo $ syntax (-whiteSpace loc),
       end      = memo $ syntax (-whiteSpace eof),
       lident   = memo $ syntax (-whiteSpace located[
                                   fun (k) {
                                     fun (s) {
                                       k (case s.matchRegexp (rLident) of
                                            a@Succ (v, _) -> if memSet (keywords, v)
                                                             then Fail ("lowercase identifier expected", s.getLine, s.getCol)
                                                             else a
                                                             fi
                                          | a             -> a
                                          esac)
                                     }
                                   }
       
                                ]),
       uident   = memo $ syntax (-whiteSpace located[
                                   fun (k) {
                                     fun (s) {
                                       k (case s.matchRegexp (rUident) of
                                            a@Succ (v, _) -> if memSet (keywords, v)
                                                             then Fail ("uppercase identifier expected", s.getLine, s.getCol)
                                                             else a
                                                             fi
                                          | a             -> a
                                          esac)
                                     }
                                   }
       
                                ]);


