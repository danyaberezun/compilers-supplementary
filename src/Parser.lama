-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

var expressionAdd = memo $ eta syntax (
    unaryExpression=expressionMul {unaryExpression} |
    left=expressionAdd operator=(s["+"] {"+"} | s["-"] {"-"})
    right=expressionMul {Binop(operator, left, right)}
);

var expressionMul = memo $ eta syntax (
    primaryExpression=primary {primaryExpression} |
    left=expressionMul operator=(s["*"] {"*"} | s["/"] {"/"} | s["%"] {"%"})
    right=primary {Binop(operator, left, right)}
);

var cmpExpression = memo $ eta syntax (
    comparisonValue=expressionAdd {comparisonValue} |
    left=cmpExpression operator=(s["=="] {"=="} | s["!="] {"!="} |
    s[">"] {">"} | s["<"] {"<"} |
    s[">="] {">="} | s["<="] {"<="})
    right=expressionAdd {Binop(operator, left, right)}
);

var andClause = memo $ eta syntax (
    comparisonExpression=cmpExpression {comparisonExpression} |
    left=andClause s["&&"] right=cmpExpression {Binop("&&", left, right)}
);

var exp = memo $ eta syntax (
    andExpression=andClause {andExpression} |
    left=exp s["!!"] right=andClause {Binop("!!", left, right)}
);

var statement = memo $ eta syntax (
    kSkip {Skip} |
    varName=lident s[":="] value=exp {Assn (varName, value)} |
    kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
    kWrite e=inbr[s("("), exp, s(")")] {Write (e)}
);

var statements = memo $ eta syntax (
    statement | s1=statement s[";"] s2=statements {Seq (s1, s2)}
);

-- Public top-level parser
public parse = statements;
             
