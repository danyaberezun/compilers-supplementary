-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (w=decimal {Const (stringInt (w))} |
                                 w=lident  {Var (w)}               |
                                 e=inbr[s("("), exp, s(")")] {e}),
      exp = memo $ expr({
        [Left, {
          [s ("!!"), fun (l, op, r) {Binop("!!", l, r)}]
              }
        ],
        [Left, {
          [s ("&&"), fun (l, op, r) {Binop("&&", l, r)}]
              }
        ],
        [Nona, {
          [s ("=="), fun (l, op, r) {Binop("==", l, r)}],
          [s ("!="), fun (l, op, r) {Binop("!=", l, r)}],
          [s (">="), fun (l, op, r) {Binop(">=", l, r)}],
          [s ("<="), fun (l, op, r) {Binop("<=", l, r)}],
          [s ("<"), fun (l, op, r) {Binop("<", l, r)}],
          [s (">"), fun (l, op, r) {Binop(">", l, r)}]
              }
        ],
        [Left, {
          [s ("+"), fun (l, op, r) {Binop("+", l, r)}],
          [s ("-"), fun (l, op, r) {Binop("-", l, r)}]
              }
        ],
        [Left, {
          [s ("*"), fun (l, op, r) {Binop("*", l, r)}],
          [s ("/"), fun (l, op, r) {Binop("/", l, r)}],
          [s ("%"), fun (l, op, r) {Binop("%", l, r)}]
                }
        ]
        },
        primary);

var singleStmt = memo $ eta syntax (
  kRead v=inbr[s("("), lident, s(")")] {Read(v)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
  kSkip {Skip} |
  w=lident s[":="] y=exp {Assn(w, y)}
);

var stmt = memo $ eta syntax (
  w=singleStmt s[";"] y=stmt {Seq(w, y)} |
  w=singleStmt {w}
);
   

-- Public top-level parser
public parse = stmt;
             
