-- Parser 

import Matcher;
import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var primary = memo $ eta syntax ( x=decimal {Const (stringInt (x))}
                                | x=lident  {Var (x)}
                                | inbr[s("("), exp, s(")")] );

fun bw (l, op, r) {  -- binop wrapper
  Binop (op, l, r)
}

var exp  = memo $ expr ({
                          [Left, {[s ("!!"), bw]}],
                          [Left, {[s ("&&"), bw]}],
                          [Left, {[s ("<"), bw], [s (">"), bw], [s ("<="), bw], [s (">="), bw], [s ("=="), bw], [s ("!="), bw]}],
                          [Left, {[s ("+"), bw], [s ("-"), bw]}],
                          [Left, {[s ("*"), bw], [s ("/"), bw], [s ("%"), bw]}]
                        }, primary);

var stmt = memo $ eta syntax ( x=lident s[":="] e=exp         {Assn (x, e)}
                             | kSkip                          {Skip}
                             | kRead  s["("] x=lident s[")"]  {Read (x)}
                             | kWrite s["("] e=exp    s[")"]  {Write (e)} );

var stmts = memo $ expr ({[Left, {[s (";"), fun (l, _, r) {Seq (l, r)}]}]}, stmt);

-- Public top-level parser
public parse = stmts;
