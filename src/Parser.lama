-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

var Addition_expr = memo $ eta syntax (
    unaryExpression=Mul_expr {unaryExpression} | left=Addition_expr operator=(s["+"] {"+"} | s["-"] {"-"})
    right=Mul_expr {Binop(operator, left, right)}
);

var Mul_expr = memo $ eta syntax (
    primaryExpression=primary {primaryExpression} | left=Mul_expr operator=(s["*"] {"*"} | s["/"] {"/"} | s["%"] {"%"})
    right=primary {Binop(operator, left, right)}
);

var Comp_expr = memo $ eta syntax (
    comparisonValue=Addition_expr {comparisonValue} |left=Comp_expr operator=(s["=="] {"=="} | s["!="] {"!="} |
    s[">"] {">"} | s["<"] {"<"} | s[">="] {">="} | s["<="] {"<="})
    right=Addition_expr {Binop(operator, left, right)}
);

var Aand = memo $ eta syntax ( comparisonExpression=Comp_expr {comparisonExpression} | left=Aand s["&&"] right=Comp_expr {Binop("&&", left, right)}
);

var exp = memo $ eta syntax ( andExpression=Aand {andExpression} | left=exp s["!!"] right=Aand {Binop("!!", left, right)}
);

var if2 =  memo $ eta syntax ( kElif cond=exp kThen t=statements e=if2 { If(cond, t, e) } | kElse b=statements kFi { b } | kFi { Skip }
);

var statement = memo $ eta syntax (
    kSkip {Skip} | varName=lident s[":="] value=exp {Assn (varName, value)} | kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
    kWrite e=inbr[s("("), exp, s(")")] {Write (e)} | kIf cond=exp kThen t=statements e=if2 { If(cond, t, e) } | kWhile cond=exp kDo b=statements kOd { While(cond, b) } |
    kDo b=statements kWhile cond=exp kOd { DoWhile(b, cond) } | kFor init=statements s[","] cond=exp s[","] inc=statements kDo b=statements kOd { Seq(init, While(cond, Seq(b, inc))) }
);

var stmt = memo $ eta syntax (
    statement | s1=statement s[";"] s2=statements {Seq (s1, s2)}
);

-- Public top-level parser
public parse = stmt;
             