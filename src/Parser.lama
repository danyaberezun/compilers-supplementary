-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr (
        {
          [Left, {[s("!!"), fun (l, op, r) {Binop ("!!", l, r)}]}],

          [Left, {[s("&&"), fun (l, op, r) {Binop ("&&", l, r)}]}],

          [Nona, {[s("=="), fun (l, op, r) {Binop ("==", l, r)}],
                  [s("!="), fun (l, op, r) {Binop ("!=", l, r)}],
                  [s("<="), fun (l, op, r) {Binop ("<=", l, r)}],
                  [s("<"), fun (l, op, r) {Binop ("<", l, r)}],
                  [s(">="), fun (l, op, r) {Binop (">=", l, r)}],
                  [s(">"), fun (l, op, r) {Binop (">", l, r)}]}],

          [Left, {[s("+"), fun (l, op, r) {Binop ("+", l, r)}],
                  [s("-"), fun (l, op, r) {Binop ("-", l, r)}]}],

          [Left, {[s("*"), fun (l, op, r) {Binop ("*", l, r)}],
                  [s("/"), fun (l, op, r) {Binop ("/", l, r)}],
                  [s("%"), fun (l, op, r) {Binop ("%", l, r)}]}]
        },
        primary
      ));

var statement = memo $ eta syntax (
  kSkip {Skip} |
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite x=inbr[s("("), exp, s(")")] {Write (x)} |
  x=lident s[":="] e=exp {Assn (x, e)}
);

var stmt = memo $ eta syntax (
  statement | s1=statement s[";"] s2=stmt {Seq(s1, s2)}
);

-- Public top-level parser
public parse = stmt;
