-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |
                                  kRead v=inbr[s("("), lident, s(")")] { fun (a) { assertVoid (a, Read (v), loc) } } |
                                  kWrite e=inbr[s("("), exp, s(")")] {
                                                                  fun (a) {
                                                                      assertVoid (a, Write (e (Val)), loc)
                                                                  }
                                                  } |
                                  kSkip {
                                      fun (a) {
                                          assertVoid (a, Skip, loc)
                                      }
                                  } |
                                  kIf e=exp kThen st=exp end=ifSecStmt {
                                    fun (a) {
                                      If (e (Val), st (a), end (a))
                                    }
                                  } |
                                  kWhile e=exp kDo st=exp kOd {fun (a) {assertVoid (a, While (e (Val), st (Void)), loc)}} |
                                  kDo st=exp kWhile e=exp kOd {fun (a) {assertVoid (a, DoWhile (st (Void), e (Val)), loc)}} |
                                  kFor s1=exp s[","] e=exp s[","] s2=exp kDo s3=exp kOd {fun (a) {assertVoid (a, Seq (s1 (Void), While (e (Val), Seq (s3 (Void), s2 (Void)))), loc)}} |
                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  inbr[s ("("), exp, s (")")]),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    ifSecStmt = memo $ eta syntax (
                                  kFi { fun (a) { assertVoid (a, Skip, loc)} }  | 
                                  kElif expr=exp kThen b=exp it=ifSecStmt {fun (a) {If (expr (Val), b(a), it(a))} } | 
                                  kElse b2=exp kFi { b2 }),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});
   
-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
