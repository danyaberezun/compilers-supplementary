-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (w=decimal {Const (stringInt (w))} |
                                 w=lident  {Var (w)}               |
                                 e=inbr[s("("), exp, s(")")] {e}),
      firstClassBinop = memo $ eta (s("*") | s("/") | s("%")),
      firstClassExpression = memo $ eta syntax ( w=firstClassExpression o=firstClassBinop y=primary {Binop (o, w, y)} |
                                w=primary {w}
                              ),
      secondClassBinop = memo $ eta (s("+") | s("-")),
      secondClassExpression = memo $ eta syntax ( w=secondClassExpression o=secondClassBinop y=firstClassExpression {Binop (o, w, y)} |
                                w=firstClassExpression {w}
                              ),
      thirdClassBinop = memo $ eta (s("==") | s("!=")| s("<=")| s("<") | s(">") | s(">=")),
      thirdClassExpression = memo $ eta syntax ( w=secondClassExpression o=thirdClassBinop y=secondClassExpression {Binop (o, w, y)} |
                                w=secondClassExpression {w}
                              ),
      fourthClassExpression = memo $ eta syntax ( w=fourthClassExpression s["&&"] y=thirdClassExpression {Binop ("&&", w, y)} |
                                w=thirdClassExpression {w}
                              ),
      exp = memo $ eta syntax ( w=exp o=s["!!"] y=fourthClassExpression {Binop ("!!", w, y)} |
                                w=fourthClassExpression {w}
                              );

var singleStmt = memo $ eta syntax (
  kRead v=inbr[s("("), lident, s(")")] {Read(v)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
  kSkip {Skip} |
  w=lident s[":="] y=exp {Assn(w, y)}
);

var stmt = memo $ eta syntax (
  w=singleStmt s[";"] y=stmt {Seq(w, y)} |
  w=singleStmt {w}
);
   

-- Public top-level parser
public parse = stmt;
             
