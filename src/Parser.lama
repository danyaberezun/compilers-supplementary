-- Parser 

import Matcher;
import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopS (opRe) {
  s (createRegexp (opRe, "binop<" ++ opRe ++ ">"))
}

var opOr  = binopS ("!!");
var opAnd = binopS ("&&");
var opCmp = binopS ("(<=?|>=?|==|!=)");
var opAdd = binopS ("(\+|-)");
var opMd  = binopS ("(\*|\/|%)");

var lb = s ("(");
var rb = s (")");

(*
-- Primary expression
var primary = memo $ eta syntax ( x=decimal {Const (stringInt (x))}
                                | x=lident  {Var (x)}
                                | inbr[s("("), exp, s(")")] ),
      exp = memo $ eta syntax ( l=exp op=opOr  r=exp {Binop (op, l, r)}
                              | l=exp op=opAnd r=exp {Binop (op, l, r)}
                              | l=exp op=opCmp r=exp {Binop (op, l, r)}
                              | l=exp op=opAdd r=exp {Binop (op, l, r)}
                              | l=exp op=opMd  r=exp {Binop (op, l, r)} 
                              | primary);

var stmt = memo $ eta syntax ( x=lident s[":="] e=exp {Assn (x, e)}
                             | s=stmt s[";"] t=stmt   {Seq (s, t)}
                             | kSkip                  {Skip}
                             | kRead  lb x=lident rb  {Read (x)}
                             | kWrite lb x=lident rb  {Write (x)} );
*)

var primary = memo $ eta syntax ( x=decimal {Const (stringInt (x))}
                                | x=lident  {Var (x)}
                                | inbr[s("("), exp, s(")")] );
(*
var expMd  = memo $ eta syntax ( l=expMd   op=opMd  r=primary {Binop (op, l, r)} | primary );
var expAdd = memo $ eta syntax ( l=expAdd  op=opAdd r=expMd   {Binop (op, l, r)} | expMd   );
var expCmp = memo $ eta syntax ( l=expCmp  op=opCmp r=expAdd  {Binop (op, l, r)} | expAdd  );
var expAnd = memo $ eta syntax ( l=expAnd  op=opAnd r=expCmp  {Binop (op, l, r)} | expCmp  );
var expOr  = memo $ eta syntax ( l=expOr   op=opOr  r=expAnd  {Binop (op, l, r)} | expAnd  );
*)

fun parseComplexOp (l, rs) {
  case rs of
    {} -> l
  | [op, r]:rt -> parseComplexOp (Binop (op, l, r), rt)
  esac
}

var expMd = memo $ eta syntax ( l=primary rs=(opMd primary)+ { parseComplexOp (l, rs) } );
var exp = expMd;

var stmt = memo $ eta syntax ( x=lident s[":="] e=exp {Assn (x, e)}
                             | s=stmt s[";"] t=stmt   {Seq (s, t)}
                             | kSkip                  {Skip}
                             | kRead  lb x=lident rb  {Read (x)}
                             | kWrite lb x=lident rb  {Write (x)} );

-- Public top-level parser
public parse = stmt;

fun debugThing (thing) {
  case thing of
    Const (i)        -> sprintf ("%d", i)
  | Var   (x)        -> sprintf ("$%s", x)
  | Binop (op, l, r) -> sprintf ("(%s)%s(%s)", debugThing (l), op, debugThing (r))
  | Assn  (x, e)     -> sprintf ("%s:=%s", x, debugThing (e))
  | Seq   (s, t)     -> sprintf ("%s;\n%s", debugThing (s), debugThing (t))
  | Skip             -> sprintf ("`")
  | Read  (x)        -> sprintf (">>>%s", x)
  | Write (x)        -> sprintf ("%s>>>", x)
  esac
}

fun debugParseRes (parseRes) {
  case parseRes of
    Succ (v) -> v.debugThing
  | Fail (e, f, g) -> sprintf ("X %s|%s|%s", e, f, g)
  esac
}

failure ("@ %s\n", expMd.parseString("2*2*2").debugParseRes)
