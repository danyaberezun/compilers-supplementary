-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      f = fun (l, p, r) {BINOP(p, l, r)},
      exp = memo $ expr ({[Left, {[s("!!"), f]}],
                          [Left, {[s("&&"), f]}],
                          [Nona, {[s("=="), f],
                                   [s("!="), f],
                                   [s("<="), f],
                                   [s(">="), f],
                                   [s("<"), f],
                                   [s(">"), f]}],
                          [Left, {[s("+"), f],
                                   [s("-"), f]}],
                          [Left, {[s("*"), f],
                                   [s("/"), f],
                                   [s("%"), f]}]
                        }, primary);

var stmtOne = memo $ eta syntax (
    kSkip {Skip} 
    | y=lident s[":="] x=exp {Assn (y, x)} 
    | kRead x=inbr[s("("), lident, s(")")] {Read (x)} 
    | kWrite e=inbr[s("("), exp, s(")")] {Write (e)}
);

var stmt = memo $ eta syntax (
    stmtOne 
    |s1=stmtOne s[";"] s2=stmt {Seq (s1, s2)}
);                      

-- Public top-level parser
public parse = stmt;
             