-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (x, op, y) {
  Binop (op, x, y)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ expr ({
      [Left, {[s ("!!"), binop]}],
      [Left, {[s ("&&"), binop]}],
      [Nona, {[s ("=="), binop], [s ("!="), binop],
              [s ("<="), binop], [s ("<"), binop],
              [s (">="), binop], [s (">"),  binop]}],
      [Left, {[s ("+"),  binop], [s ("-"), binop]}],
      [Left, {[s ("*"),  binop], [s ("/"), binop], [s ("%"), binop]}]
    }, primary);

var statement = memo $ eta syntax (
      kRead x=inbr[s ("("), lident, s (")")] {Read (x)} |
      kWrite x=inbr[s ("("), exp, s (")")] {Write (x)} |
      kSkip {Skip} |
      kIf e=exp kThen s1=stmt s2=elifStmt {If (e, s1, s2)} |
      kWhile e=exp kDo s=stmt kOd {While (e, s)} |
      kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)} |
      kFor s1=stmt s [","] e=exp s [","] s2=stmt kDo s3=stmt kOd {Seq (s1, While (e, Seq (s3, s2)))} |
      x=lident s [":="] e=exp {Assn (x, e)}
    ),
    elifStmt = memo $ eta syntax (
      kElif e=exp kThen s1=stmt s2=elifStmt {If (e, s1, s2)} |
      kElse s=stmt kFi {s} |
      kFi {Skip}
    ),
    stmt = memo $ eta syntax (
      statement | 
      f=statement s[";"] rest=stmt {Seq (f, rest)}
    );

-- Public top-level parser
public parse = stmt;
