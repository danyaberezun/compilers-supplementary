-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]);

var addition_expr = memo $ eta syntax (
    unaryExpression=mul_expr {unaryExpression} | left=addition_expr operator=(s["+"] {"+"} | s["-"] {"-"})
    right=mul_expr {Binop(operator, left, right)}
);

var mul_expr = memo $ eta syntax (
    primaryExpression=primary {primaryExpression} | left=mul_expr operator=(s["*"] {"*"} | s["/"] {"/"} | s["%"] {"%"})
    right=primary {Binop(operator, left, right)}
);

var comp_expr = memo $ eta syntax (
    comparisonValue=addition_expr {comparisonValue} |left=comp_expr operator=(s["=="] {"=="} | s["!="] {"!="} |
    s[">"] {">"} | s["<"] {"<"} | s[">="] {">="} | s["<="] {"<="})
    right=addition_expr {Binop(operator, left, right)}
);

var scnd_and = memo $ eta syntax ( comparisonExpression=comp_expr {comparisonExpression} | left=scnd_and s["&&"] right=comp_expr {Binop("&&", left, right)}
);

var exp = memo $ eta syntax ( andExpression=scnd_and {andExpression} | left=exp s["!!"] right=scnd_and {Binop("!!", left, right)}
);

var if2 =  memo $ eta syntax ( kElif cond=exp kThen t=stmt e=if2 { If(cond, t, e) } | kElse b=stmt kFi { b } | kFi { Skip }
);

var statement = memo $ eta syntax (
    kSkip {Skip} | varName=lident s[":="] value=exp {Assn (varName, value)} | kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
    kWrite e=inbr[s("("), exp, s(")")] {Write (e)} | kIf cond=exp kThen t=stmt e=if2 { If(cond, t, e) } | kWhile cond=exp kDo b=stmt kOd { While(cond, b) } |
    kDo b=stmt kWhile cond=exp kOd { DoWhile(b, cond) } | kFor init=stmt s[","] cond=exp s[","] inc=stmt kDo b=stmt kOd { Seq(init, While(cond, Seq(b, inc))) }
);

var stmt = memo $ eta syntax (
    statement | s1=statement s[";"] s2=stmt {Seq (s1, s2)}
);

-- Public top-level parser
public parse = stmt;
             