-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    f = fun(l, op, r) { Binop(op, l, r) },
    exp = memo $ expr({
        [Left, {[s("!!"), f]}],
        [Left, {[s("&&"), f]}],
        [Nona, {[s("=="), f], [s("!="), f], [s("<="), f], [s(">="), f], [s("<"), f], [s(">"), f]}],
        [Left, {[s("+"), f], [s("-"), f]}],
        [Left, {[s("*"), f], [s("/"), f], [s("%"), f]}]
    }, primary);

var postIf = memo $ eta syntax (
                kElif e=exp kThen s=stmt t=postIf { If(e, s, t) } |
                kElse s=stmt kFi { s } | 
                kFi { Skip }
            );

var stmtx = eta syntax (
                 kSkip { Skip } |
                 kRead x = inbr[s("("), lident, s(")")] { Read(x) } |
                 kWrite y = inbr[s("("), exp, s(")")] { Write(y) } |
                 y = lident s[":="] x = exp { Assn(y, x) } |
                 kWhile e=exp kDo s=stmt kOd { While(e, s) } |
                 kIf e=exp kThen s1=stmt s2=postIf { If(e, s1, s2) } |
                 kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd { Seq(s1, While(e, Seq(s3, s2))) } |
                 kDo s=stmt kWhile e=exp kOd { DoWhile(s, e) }  
            );

var stmt = memo $ eta syntax (
                        stmtx |
                        x = stmtx s[";"] xs = stmt { Seq(x, xs) }
                      );

-- Public top-level parser
public parse = stmt;
