-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta syntax (x=exp_and {x} | l=exp s["!!"] r=exp_and {Binop("!!", l, r)}),
    exp_and = memo $ eta syntax (x=exp_cmp {x} |
                                 l=exp_and s["&&"] r=exp_cmp {Binop("&&", l, r)}),
    exp_cmp = memo $ eta syntax (x=exp1 {x} |
                                 l=exp_cmp b=(binop_eq | binop_neq | binop_gt | binop_lt | binop_gte | binop_lte) r=exp1 {Binop(b, l, r)}),
    exp1 = memo $ eta syntax (x=exp2 {x} |
                              l=exp1 b=(binop_add | binop_sub) r=exp2 {Binop(b, l, r)}),
    exp2 = memo $ eta syntax (x=primary {x} |
                              l=exp2 b=(binop_mul | binop_div | binop_mod) r=primary {Binop(b, l, r)}),

    binop_mul = memo $ eta syntax(s["*"] {"*"}),
    binop_div = memo $ eta syntax(s["/"] {"/"}),
    binop_mod = memo $ eta syntax(s["%"] {"%"}),

    binop_add = memo $ eta syntax(s["+"] {"+"}),
    binop_sub = memo $ eta syntax(s["-"] {"-"}),

    binop_eq  = memo $ eta syntax(s["=="] {"=="}),
    binop_neq = memo $ eta syntax(s["!="] {"!="}),
    binop_gt  = memo $ eta syntax(s[">"] {">"}),
    binop_lt  = memo $ eta syntax(s["<"] {"<"}),
    binop_gte = memo $ eta syntax(s[">="] {">="}),
    binop_lte = memo $ eta syntax(s["<="] {"<="});

var stmt = memo $ eta syntax (
  varName=lident s[":="] value=exp      { Assn (varName, value) } |
  kSkip                                 { Skip }                  |
  kRead x=inbr[s("("), lident, s(")")]  { Read (x) }              |
  kWrite e=inbr[s("("), exp, s(")")]    { Write (e) }
);

var program = memo $ eta syntax (
  stmt | stmt1=stmt s[";"] stmt2=program { Seq (stmt1, stmt2) }
);

-- Public top-level parser
public parse = program;
