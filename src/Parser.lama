-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun op (x) {
  [ s(x), fun (l, op, r) { Binop (op, l, r) } ]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ expr ({
        [ Left, { op("!!") } ],
        [ Left, { op("&&") } ],
        [ Nona, { op("=="), op("!="), op("<"), op("<="), op(">"), op(">=") } ],
        [ Left, { op("+"), op("-") } ],
        [ Left, { op("*"), op("/"), op("%") } ]
      }, primary);

var ifTail = memo $ eta syntax (
    kFi { Skip }
  | kElif cond=exp kThen body=stmt rest=ifTail { If (cond, body, rest) }
  | kElse tail=stmt kFi { tail }
);

var statement = memo $ eta syntax (
  kSkip { Skip } |
  kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
  kWrite x=inbr[s("("), exp, s(")")] { Write (x) } |
  x=lident s[":="] e=exp { Assn (x, e) } |
  kIf cond=exp kThen body=stmt rest=ifTail { If (cond, body, rest) } |
  kFor init=stmt s[","] cond=exp s[","] update=stmt kDo body=stmt kOd { For (init, cond, update, body) } |
  kWhile cond=exp kDo body=stmt kOd { While (cond, body) } |
  kDo body=stmt kWhile cond=exp kOd { DoWhile (body, cond) }
);

var stmt = memo $ eta syntax(
  statement | s1=statement s[";"] s2=stmt { Seq(s1, s2) }
);
   

-- Public top-level parser
public parse = stmt;
