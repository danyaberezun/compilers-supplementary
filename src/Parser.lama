-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    f = fun(l, op, r) { Binop(op, l, r) },
    exp = memo $ expr({
        [Left, {[s("!!"), f]}],
        [Left, {[s("&&"), f]}],
        [Nona, {[s("=="), f], [s("!="), f], [s("<="), f], [s(">="), f], [s("<"), f], [s(">"), f]}],
        [Left, {[s("+"), f], [s("-"), f]}],
        [Left, {[s("*"), f], [s("/"), f], [s("%"), f]}]
    }, primary);

var stmt1 = eta syntax (
          kSkip { Skip }
        | kRead x=inbr[s("("), lident, s(")")] { Read(x) }
        | kWrite y=inbr[s("("), exp, s(")")] { Write(y) }
        | y=lident s[":="] x=exp { Assn(y, x) }
        | kIf con=exp kThen t=stmt e=kEl { If(con, t, e) } 
        | kWhile con=exp kDo b=stmt kOd { While(con, b) } 
        | kDo b=stmt kWhile con=exp kOd { DoWhile(b, con) } 
        | kFor init=stmt s[","] con=exp s[","] inc=stmt kDo b=stmt kOd { Seq(init, While(con, Seq(b, inc))) } 
    ),
    kEl =  memo $ eta syntax (
          kElif con=exp kThen t=stmt e=kEl { If(con, t, e) }
        | kElse b=stmt kFi { b }
        | kFi { Skip }
    ),
    stmt = memo $ eta syntax (stmt1 | x=stmt1 s[";"] xs=stmt { Seq (x, xs) } 
);
   

-- Public top-level parser
public parse = stmt;
