-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

-- Helper parser: parses a (possible empty) list of items separated by ","
fun list0 (item) {
  list0By (item, s(","))
}

-- Helper parser: parses a non-empty list of items separated by ","
fun list (item) {
  listBy (item, s(","))
}

-- Helper AST function: expands a "raw" scope expression, reifying
-- initializers into assignments
fun expandScope (defs, expr) {
  fun expandDefs (defs, expr) {
    foldr (fun ([defs, expr], def) {     
             case def of
                [ident, None]         -> [ident : defs, expr]
             |  [ident, Some (value)] -> [ident : defs, Seq (Ignore (Assn (Ref (ident), value)), expr)]
             esac
           },
           [{}, expr],
           defs)
  }

  case 
    foldr (fun ([defs, expr], def) {
             case def of
               f@Fun (_, _, _) -> [f : defs, expr]
             | Var (ds)      ->
                 case expandDefs (ds, expr) of
                   [ds, expr] -> [Var (ds) : defs, expr]
                 esac
             esac
           },
           [{}, expr],
           defs) of
    [defs, expr] -> Scope (defs, expr)
  esac  
}

-- Helper AST function: distributes a scope through an expression
fun distributeScope (expr, exprConstructor) {
  case expr of
    Scope (defs, sexpr) -> Scope (defs, exprConstructor (sexpr))
  | _                   -> exprConstructor (expr)
  esac
}

var ifStmtTail = memo $ eta syntax (
  kElif c=exp kThen s=scopeExpr e=ifStmtTail {fun (a) {If (c (Val), s (a), e (a))}}
  | kElse s=scopeExpr kFi {s}
  | kFi { fun (a) { assertVoid (a, Skip, loc) } }
);

var primary    = memo $ eta syntax (
                                      -- decimal constant
                                      loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                      -- identifier
                                      loc=pos x=lident args=inbr[s("("), list0(syntax(e=exp {e(Val)})), s(")")]? {fun (a) {
                                                                                                                    case args of
                                                                                                                      None -> case a of
                                                                                                                                Ref  -> Ref (x)
                                                                                                                              | Void -> Ignore (Var (x))
                                                                                                                              | _    -> Var (x)
                                                                                                                              esac
                                                                                                                    | Some (args) -> assertValue (a, Call (x, args), loc)
                                                                                                                   esac
                                                                                                                }} |

                                       loc=pos kSkip { fun (a) { assertVoid (a, Skip, loc)} }      
                                      | loc=pos s["("] x=scopeExpr s[")"] {fun (a) {x (a)}}             
                                      | loc=pos kRead s["("] x=lident s[")"] {fun (a) {assertVoid (a, Read (x), loc)}}
                                      | loc=pos kWrite s["("] e=exp s[")"] {fun (a) {assertVoid (a, Write (e (Val)), loc)}}
                                      | loc=pos kIf cond=exp kThen body1=scopeExpr body2=ifStmtTail {fun (a) {If (cond (Val), body1 (a), body2 (a))}}
                                      | loc=pos kDo body=scopeExpr kWhile cond=exp kOd {
                                          fun (a) {assertVoid (a, distributeScope(
                                            body(Void),
                                            fun (expr) {DoWhile (expr, cond (Val))}),
                                            loc
                                          )}
                                        }
                                      | loc=pos kWhile cond=exp kDo body=scopeExpr kOd {fun (a) {assertVoid (a, While (cond (Val), body (Void)), loc)}}
                                      | loc=pos kFor init=scopeExpr s[","] cond=exp s[","] step=exp kDo body=scopeExpr kOd {
                                          fun (a) {assertVoid(a, distributeScope(
                                            init (Void), 
                                            fun (expr) { Seq (expr, While (cond (Val), Seq (body (Void), step (Void)))) }),
                                            loc
                                          )}
                                      }),
                                      
      basic      = memo $ eta (expr ({[Right, {[s (":="),
                                                fun (l, loc, r) {
                                                  fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                }]}],
                                      [Left , map (binop, {"!!"})],
                                      [Left , map (binop, {"&&"})],
                                      [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                      [Left , map (binop, {"+", "-"})],
                                      [Left , map (binop, {"*", "/", "%"})]
                                     },
                                     primary)),
      scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                        case ds of
                                                                          {} -> e
                                                                        | _  -> expandScope (ds, e) 
                                                                        esac
                                                                      } (case e of 
                                                                           Some (e) -> e (a)
                                                                         | _        -> Skip
                                                                         esac)
                                                                      }}),
      definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Var (ds)} |
                                      kFun name=lident
                                           args=inbr[s("("), list0 (lident), s(")")]
                                           body=inbr[s("{"), scopeExpr, s("}")] {
                                           Fun (name, args, body (Weak))
                                      }
                                     ),                                    
      exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
