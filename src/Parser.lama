-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun inbkts (p) {
  inbr (s("("), p, s(")"))
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                          x=lident  {Var (x)}               |
                          inbkts[exp]                               ),
      multiplicative = memo $ eta syntax (l=multiplicative op=multiplicativeOp r=primary { Binop (op, l, r) } | primary),
      additive = memo $ eta syntax (l=additive op=additiveOp r=multiplicative { Binop (op, l, r) } | multiplicative),
      -- comparative operations are not associative
      comparative = memo $ eta syntax (l=additive op=comparativeOp r=additive { Binop (op, l, r) } | additive),
      and = memo $ eta syntax (l=and op=andOp r=comparative { Binop (op, l, r) } | comparative),
      or = memo $ eta syntax (l=or op=orOp r=and { Binop (op, l, r) } | and),
      exp = or;

var singleStmt = memo $ eta syntax (kRead x=inbkts[lident] { Read (x) }    | 
                                    kWrite e=inbkts[exp] { Write (e) }     |
                                    kSkip { Skip }                         |
                                    x=lident assignOp e=exp { Assn (x, e) }),
    stmt = memo $ eta syntax (s1=singleStmt semicolon s2=stmt { Seq (s1, s2) } | singleStmt);
   

-- Public top-level parser
public parse = stmt;
