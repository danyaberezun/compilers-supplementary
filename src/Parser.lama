-- Parser 

import Matcher;
import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

(*
var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                  -- identifier
                                  x=lident                                          {fun (a) {
                                                                                       case a of
                                                                                         Ref  -> Ref (x)
                                                                                       | Void -> Ignore (Var (x))
                                                                                       | _    -> Var (x)
                                                                                       esac
                                                                                    }} |
                                  $(failure ("the rest of primary parsing in not implemented\n"))),
    basic    = memo $ eta (expr ({[Right, {[s (":="),
                                            fun (l, loc, r) {
                                              fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                            }]}],
                                  [Left , map (binop, {"!!"})],
                                  [Left , map (binop, {"&&"})],
                                  [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                  [Left , map (binop, {"+", "-"})],
                                  [Left , map (binop, {"*", "/", "%"})]
                                 },
                                 primary)),
    exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
*)

var primary = memo $ eta syntax ( x=decimal {Const (stringInt (x))}
                                | x=lident  {Var (x)}
                                | inbr[s("("), exp, s(")")] );

fun bw (l, op, r) {  -- binop wrapper
  Binop (op, l, r)
}

var exp  = memo $ expr ({
                          [Left, {[s ("!!"), bw]}],
                          [Left, {[s ("&&"), bw]}],
                          [Left, {[s ("<"), bw], [s (">"), bw], [s ("<="), bw], [s (">="), bw], [s ("=="), bw], [s ("!="), bw]}],
                          [Left, {[s ("+"), bw], [s ("-"), bw]}],
                          [Left, {[s ("*"), bw], [s ("/"), bw], [s ("%"), bw]}]
                        }, primary);

fun helperElif (elifS, elseS) {
  case elifS of
    {}          -> elseS
  | [e,s]:elifT -> If (e, s, helperElif (elifT, elseS))
  esac
}

var stmtIf = memo $ eta syntax (kIf e=exp
                                kThen s=stmts
                                elifS=(kElif e5=exp kThen s5=stmts { [e5, s5] })*
                                elseS=(kElse s0=stmts { s0 })?
                                kFi { If (e, s, helperElif (elifS, case elseS of None -> Skip | Some (s) -> s esac))});

var stmt = memo $ eta syntax ( x=lident s[":="] e=exp         {Assn (x, e)}
                             | kSkip                          {Skip}
                             | kRead  s["("] x=lident s[")"]  {Read (x)}
                             | kWrite s["("] e=exp    s[")"]  {Write (e)}
                             | kWhile e=exp kDo s=stmts kOd   {While (e, s)}
                             | kDo s=stmts kWhile e=exp kOd   {DoWhile (s, e)}
                             | kFor i=stmt s[","] e=exp s[","] c=stmt kDo s=stmts kOd {Seq (i, While (e, Seq (s, c)))}
                             | stmtIf);

var stmts = memo $ expr ({[Left, {[s (";"), fun (l, _, r) {Seq (l, r)}]}]}, stmt);

-- Public top-level parser
public parse = stmts;

(*
public fun debugThing (thing) {
  case thing of
    Const (i)         -> sprintf ("$%d", i)
  | Var   (x)         -> sprintf ("#%s", x)
  | Binop (op, l, r)  -> sprintf ("(%s) %s (%s)", debugThing (l), op, debugThing (r))
  | Assn  (x, e)      -> sprintf ("%s := %s", x, debugThing (e))
  | Seq   (s, t)      -> sprintf ("%s;\n%s", debugThing (s), debugThing (t))
  | Skip              -> sprintf ("`")
  | Read  (x)         -> sprintf (">>> %s", x)
  | Write (e)         -> sprintf ("%s >>>", debugThing (e))
  | If    (e, s1, s2) -> sprintf ("(%s) ? %s : %s", debugThing (e), debugThing (s1), debugThing (s2))
  | While (e, s)      -> sprintf ("<~(%s)\n%s\n~>", debugThing (e), debugThing (s))
  | DoWhile (s, e)    -> sprintf ("<~\n%s\n(%s)~>", debugThing (s), debugThing (e))
  | x                 -> sprintf ("unknownthing{%s}", x)
  esac
}

fun debugParseRes (parseRes) {
  case parseRes of
    Succ (v) -> v.debugThing
  | Fail (e, f, g) -> sprintf ("X %s|%s|%s", e, f, g)
  esac
}
*)
