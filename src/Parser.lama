-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binopF(lhs, op, rhs) {
  Binop(op, lhs, rhs)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 e=inbr[s("("), exp, s(")")] {e}),
      exp = memo $ expr (
          {
            [Left , {[s ("!!"), binopF ]}],
            [Left , {[s ("&&"), binopF ]}],
            [Nona , {
              [s ("=="), binopF ],
              [s ("!="), binopF ],
              [s ("<="), binopF ],
              [s ("<"), binopF ],
              [s (">="), binopF ],
              [s (">"), binopF ]
            }],
            [Left , {
              [s ("+"), binopF ],
              [s ("-"), binopF ]
            }],
            [Left , {
              [s ("*"), binopF ],
              [s ("/"), binopF ],
              [s ("%"), binopF ]
            }]
          }
          , primary
        );

var ifSecStmt = memo $ eta syntax (
    kFi { Skip }
  | kElif expr=exp kThen b=stmt it=ifSecStmt { If (expr, b, it) }
  | kElse b2=stmt kFi { b2 }
);

var baseStmt = memo $ eta syntax (
      kRead  x=inbr[s("("), lident, s(")")] { Read (x) }
    | kWrite x=inbr[s("("), exp, s(")")] { Write (x) }
    | kSkip  { Skip }
    | kWhile expr=exp kDo b=stmt kOd { While (expr, b) }
    | kDo b=stmt kWhile expr=exp kOd { DoWhile(b, expr) }
    | kIf expr=exp kThen b1=stmt it=ifSecStmt { If(expr, b1, it) }
    | kFor init=stmt s[","] cond=exp s[","] succ=stmt kDo b=stmt kOd { Seq(init, While(cond, Seq(b, succ)) ) }
    | x=lident s[":="] res=exp { Assn (x, res) }
);

var stmt = memo $ eta syntax (
  b = baseStmt s[";"] t=stmt { Seq(b, t) } |
  b = baseStmt {b}
);
   

-- Public top-level parser
public parse = stmt;
