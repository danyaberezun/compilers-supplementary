-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    binop = fun(l, op, r) { Binop(op, l, r) },
    exp = memo $ expr({
        [Left, {[s("!!"), binop]}],
        [Left, {[s("&&"), binop]}],
        [Nona, {
            [s("=="), binop], [s("!="), binop],
            [s("<="), binop], [s(">="), binop],
            [s("<"), binop], [s(">"), binop]
        }],
        [Left, {[s("+"), binop], [s("-"), binop]}],
        [Left, {[s("*"), binop], [s("/"), binop], [s("%"), binop]}]
    }, primary);

var elif = memo $ eta syntax (kElif x=exp kThen s=stmt { fun (els) { If(x, s, els) } }),
    stmt;

var stmt = memo $ list0By(eta syntax (
        kSkip { Skip } |
        kRead v=inbr[s("("), lident, s(")")] { Read(v) } |
        kWrite x=inbr[s("("), exp, s(")")] { Write(x) } |
        kIf x0=exp kThen s0=stmt
            elifs=elif*
            els=((-kElse stmt))?
            kFi
            { If(x0, s0, foldr(fun (x, f) {f(x)}, case els of None -> Skip | Some(x) -> x esac, elifs)) } |
        kWhile x=exp kDo s=stmt kOd { While(x, s) } |
        kDo s=stmt kWhile x=exp kOd { DoWhile(s, x) } |
        kFor init=stmt s[","] cond=exp s[","] inc=stmt kDo body=stmt kOd 
            { Seq(init, While(cond, Seq(body, inc))) } |
        v=lident s[":="] x=exp { Assn(v, x) }
    ), s(";")) @ fun(a) {
        case a of
          {} -> Skip
        | first:rest -> foldl (fun(x, y) { Seq(x, y) }, first, rest)
        esac
    };

-- Public top-level parser
public parse = stmt;
