-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta syntax (x=andand {x} |
                               l=exp s["!!"] r=andand {Binop("!!", l, r)}),
      andand = memo $ eta syntax (x=mdm {x} |
                                  l=andand s["&&"] r=mdm {Binop("&&", l, r)}),
      mdm = memo $ eta syntax (x=as {x} |
                                  l=mdm b=(binop_eq | binop_neq | binop_gt | binop_lt | binop_gte | binop_lte) r=as {Binop(b, l, r)}),
      as = memo $ eta syntax (x=engl {x} |
                                  l=as b=(binop_add | binop_sub) r=engl {Binop(b, l, r)}),
      engl = memo $ eta syntax (x=primary {x} |
                                  l=engl b=(binop_mul | binop_div | binop_mod) r=primary {Binop(b, l, r)}),

      binop_mul = memo $ eta syntax(s["*"] {"*"}),
      binop_div = memo $ eta syntax(s["/"] {"/"}),
      binop_mod = memo $ eta syntax(s["%"] {"%"}),
          
      binop_add = memo $ eta syntax(s["+"] {"+"}),
      binop_sub = memo $ eta syntax(s["-"] {"-"}),
          
      binop_eq  = memo $ eta syntax(s["=="] {"=="}),
      binop_neq = memo $ eta syntax(s["!="] {"!="}),
      binop_gt  = memo $ eta syntax(s[">"] {">"}),
      binop_lt  = memo $ eta syntax(s["<"] {"<"}),
      binop_gte = memo $ eta syntax(s[">="] {">="}),
      binop_lte = memo $ eta syntax(s["<="] {"<="});

var stmt = memo $ eta syntax (
  varName=lident s[":="] value=exp      { Assn (varName, value) } |
  kSkip                                 { Skip }                  |
  kRead x=inbr[s("("), lident, s(")")]  { Read (x) }              |
  kWrite e=inbr[s("("), exp, s(")")]    { Write (e) }
);

var program = memo $ eta syntax (
  stmt | stmt1=stmt s[";"] stmt2=program { Seq (stmt1, stmt2) }
);
   
-- Public top-level parser
public parse = program;
             
