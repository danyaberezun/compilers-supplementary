-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- DEBUG
import Std;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

var exp = memo $ eta syntax (x=decimal             {Const (stringInt (x))} |
                             x=lident              {Var (x)}               |
                             l=exp op=kBinop r=exp {Binop (op, l, r)}      |
                             inbr[s("("), exp, s(")")]);

var stmt = memo $ eta syntax (x=lident kAssn e=exp   {Assn (x, e)}  |
                              s=stmt kSemicln t=stmt {Seq (s, t)}   |
                              kSkip                  {Skip}         |
                              kRead x=lident         {Read (x)}     |
                              kWrite x=lident        {Write (x)});

public fun debugParser () {
  -- DEBUG
  sprintf ("^ %s\n", parse (exp, "-124")) ++
  sprintf ("^ %s\n", parse (exp, "asdods")) ++
  sprintf ("^ %s\n", parse (exp, "asdods + -124"))
}

-- Public top-level parser
public parse = stmt;