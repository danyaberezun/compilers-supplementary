-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Right, {
          [s(":="), fun(l, op, r) {Assn(l, r)}]
        }],
        [Left, {
          [s("!!"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("&&"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Nona, {
          [s("=="), fun(l, op, r) {Binop(op, l, r)}],
          [s("!="), fun(l, op, r) {Binop(op, l, r)}],
          [s("<="), fun(l, op, r) {Binop(op, l, r)}],
          [s("<"), fun(l, op, r) {Binop(op, l, r)}],
          [s(">"), fun(l, op, r) {Binop(op, l, r)}],
          [s(">="), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("+"), fun(l, op, r) {Binop(op, l, r)}],
          [s("-"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("*"), fun(l, op, r) {Binop(op, l, r)}],
          [s("/"), fun(l, op, r) {Binop(op, l, r)}],
          [s("%"), fun(l, op, r) {Binop(op, l, r)}]
        }]
    }, primary);

var line = memo $ eta syntax (
  kRead name=inbr[s("("), lident, s(")")] {Read(name)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
  kSkip {Skip} |
  name=lident s[":="] e=exp {Assn(name, e)}
);

var stmt = memo $ eta syntax (
  line |
  head=line s[";"] tail=stmt {Seq(head, tail)}
);
   

-- Public top-level parser
public parse = stmt;
             