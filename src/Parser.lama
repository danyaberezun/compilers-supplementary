-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (x, op, y) {
  Binop (op, x, y)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ expr ({
      [Left, {[s ("!!"), binop]}],
      [Left, {[s ("&&"), binop]}],
      [Nona, {[s ("=="), binop], [s ("!="), binop],
              [s ("<="), binop], [s ("<"), binop],
              [s (">="), binop], [s (">"),  binop]}],
      [Left, {[s ("+"),  binop], [s ("-"), binop]}],
      [Left, {[s ("*"),  binop], [s ("/"), binop], [s ("%"), binop]}]
    }, primary);

-- public kRead    = s (rRead),
--        kWrite   = s (rWrite),
--        kSkip    = s (rSkip),
--        decimal  = s (rDecimal)

var statement = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
  kWrite x=inbr[s("("), exp, s(")")] {Write (x)} |
  kSkip {Skip} |
  x=lident s[":="] e=exp {Assn (x, e)}
);

var stmt = memo $ eta syntax (
  statement | 
  f=statement s[";"] rest=stmt {Seq (f, rest)}
);

-- Public top-level parser
public parse = stmt;
             
