-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun f(l, op, r) {Binop(op, l, r)}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ expr({
      [Left, {[s("!!"), f]}],
      [Left, {[s("&&"), f]}],
      [Nona, {[s("=="), f], [s("!="), f], [s("<="), f], [s("<"), f], [s(">="), f], [s(">"), f]}],
      [Left, {[s("+"), f], [s("-"), f]}],
      [Left, {[s("*"), f], [s("/"), f], [s("%"), f]}]
    }, primary);

var conditionalClause = memo $ eta syntax (
    kFi { Skip }
  | kElif condition=exp kThen body=stmt rest=conditionalClause { If (condition, body, rest) }
  | kElse alternative=stmt kFi { alternative }
);

var primaryStmt = memo $ eta syntax (
      kRead  x=inbr[s("("), lident, s(")")] { Read (x) }
    | kWrite x=inbr[s("("), exp, s(")")] { Write (x) }
    | kSkip  { Skip }
    | kWhile condition=exp kDo body=stmt kOd { While (condition, body) }
    | kDo body=stmt kWhile condition=exp kOd { DoWhile (body, condition) }
    | kIf condition=exp kThen consequence=stmt rest=conditionalClause { If (condition, consequence, rest) }
    | kFor setup=stmt s[","] condition=exp s[","] update=stmt kDo body=stmt kOd { Seq (setup, While (condition, Seq (body, update)) ) }
    | x=lident s[":="] value=exp { Assn (x, value) }
);

var stmt = memo $ eta syntax (
  current = primaryStmt s[";"] next=stmt { Seq(current, next) } |
  current = primaryStmt {current}
);

-- Public top-level parser
public parse = stmt;
