-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
public fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")
--   Weak --- works like Val, but allows to provide a "default" value for void constructs

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, v, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (v)
  | _    -> v
  esac
}

-- Checks if a void epxression can be used in the context described by
-- the attribute "atr".
fun assertVoid (atr, v, loc) {
  case atr of
    Void -> v
  | Val  -> error ("value expected", loc)
  | Weak -> Seq (v, Const (0))
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- A helper function to be used with super-combinator "expr"
fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

var primary  = memo $ eta syntax (
                                  -- decimal constant
                                  loc=pos x=decimal {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}
                                  -- identifier
                                  | x=lident                                    
                                        {fun (a) {
                                          case a of
                                            Ref  -> Ref (x) |
                                            Void -> Ignore (Var (x)) |
                                            _    -> Var (x)
                                          esac
                                        }} 
                                  | inbr[s("("), exp, s(")")]
                                  | kRead x=inbr[s("("), lident, s(")")] { fun (a) { assertVoid(a, Read(x), loc) } }
                                  | kWrite e=inbr[s("("), exp, s(")")] { fun (a) { assertVoid(a, Write(e(Val)), loc) } }
                                  | kSkip { fun (a) { assertVoid(a, Skip, loc) } }
                                  | kIf con=exp kThen t=exp f=kEl { fun (a) { If(con(Val), t(a), f(a)) } }
                                  | kWhile con=exp kDo b=exp kOd {fun (a) { assertVoid(a, While(con(Val), b(Void)), loc) } }
                                  | kDo b=exp kWhile con=exp kOd {fun (a) { assertVoid(a, DoWhile(b(Void), con(Val)), loc) } }
                                  | kFor init=exp s[","] con=exp s[","] inc=exp kDo b=exp kOd { fun (a) { assertVoid(a, Seq(init(Void), While(con(Val), Seq(b(Void), inc(Void)))), loc) } }
),
kEl = memo $ eta syntax (
    kFi { fun (a) { assertVoid(a, Skip, loc) } } |
    kElif con=exp kThen t=exp f=kEl { fun(a) { If(con(Val), t(a), f(a)) } } |
    kElse b=exp kFi { fun(a) { b(a) } }
),
basic = memo $ eta (expr ({[Right, {[s(":="),
                                        fun (l, loc, r) {
                                            fun (a) { assertValue (a, Assn (l (Ref), r (Val)), loc) }
                                        }]}],
                                [Left , map (binop, {"!!"})],
                                [Left , map (binop, {"&&"})],
                                [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                [Left , map (binop, {"+", "-"})],
                                [Left , map (binop, {"*", "/", "%"})]
                                },
                                primary)),
scopeExpr  = memo $ eta syntax (ds=definition* e=exp? {fun (a) {fun (e) {
                                                                  case ds of
                                                                    {} -> e
                                                                  | _  -> expandScope (ds, e) 
                                                                  esac
                                                                } (case e of 
                                                                      Some (e) -> e (a)
                                                                    | _        -> Skip
                                                                    esac)
                                                                }}),
definition = memo $ eta syntax (kVar ds=list[syntax (lident (s["="] e=basic {e (Val)})?)] s[";"] {Var (ds)} |
                                kFun name=lident
                                      args=inbr[s("("), list0 (lident), s(")")]
                                      body=inbr[s("{"), scopeExpr, s("}")] {
                                      Fun (name, args, body (Weak))
                                }
                                ),                                    
exp        = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});


-- Public top-level parser
public parse = syntax (s=scopeExpr {s (Void)});
