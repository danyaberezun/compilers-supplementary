-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalArgs(args, s) {
  case args of
    [argName, argValue]:ags -> evalArgs(ags, s.addName(argName, argValue))
  | _ -> s
  esac
}

fun evalScope(defs, s) {
  case defs of
      Var (strr)             :ds -> evalScope(ds, s.addNames(strr))
    | Fun (strr, args, body) :ds -> evalScope(ds, s.addFunction(strr, args, body))
    | _ -> s
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Assn    (e1, e2) ->
      case evalList(c, {e1, e2}) of
        [[s1, w1], {Ref(x), Val(e)}] -> [[s1 <- [x, Val(e)], w1], Val(e)]
      esac
  | Seq     (e1, e2)     -> eval(eval(c, e1).fst, e2)
  | Skip                 -> [c, Void]
  | Read    (strr)       -> case readWorld(w) of [z1, w1] -> [[s <- [strr, Val(z1)], w1], Void] esac
  | Write   (e)          -> case eval(c, e) of [[s1, w1], Val(x)] -> [[s1, writeWorld(x, w1)], Void] esac
  | If      (e1, e2, e3) ->
    case eval (c, e1) of
      [c, Val (0)] -> eval(c, e3)
    | [c, Val (n)] -> eval(c, e2)
    esac
  | While   (e1, e2)     ->
    case eval(c, e1) of
        [c1, Val(0)] -> [c1, Void]
      | [c1, Val(_)] -> eval(eval(c1, e2).fst, expr)
    esac
  | DoWhile (e1, e2)     -> eval(eval(c, e1).fst, While(e2, e1))
  | Var     (strr)       -> [c, s.lookup(strr)]
  | Ref     (strr)       -> [c, Ref (strr)]
  | Const   (n)          -> [c, Val (n)]
  | Binop   (op, e1, e2)  ->
    case evalList(c, {e1, e2}) of
      [c1, { Val(lhs), Val(rhs) }] -> [c1, Val(evalOp(op, lhs, rhs))]
    esac
  | Scope   (defs, e)    ->
      case eval([evalScope(defs, s.enterScope), w], e) of
        [[s1, w1], x1] -> [[s1.leaveScope, w1], x1]
      esac
  | Call    (strr, es)   ->
      s.checkFun(strr);
      case s.lookup(strr) of
        Fun (args, body) ->
          case evalList(c, es) of
            [[s1, w1], vs] ->
              case eval([evalArgs(zip(args, vs), s1.enterFunction), w1], body) of
                [[s2, w2], x2] -> [[s1.leaveFunction(s2.getGlobal), w2], x2]
              esac
          esac
      esac
  | Ignore  (expr)       -> [eval(c, expr).fst, Void]
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}