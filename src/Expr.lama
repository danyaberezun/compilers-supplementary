-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
   case expr of
     Var(name) -> st(name)
   | Const(n) -> n
   | Binop(op, left, right) -> evalBinop(op, evalExpr(st, left), evalExpr(st, right))
   esac
}

fun evalBinop (op, x, y) {
   case op of
     "+" -> x + y
   | "-" -> x - y
   | "*" -> x * y
   | "/" -> x / y
   | "%" -> x % y
   | "==" -> x == y
   | "!=" -> x != y
   | "<" -> x < y
   | "<=" -> x <= y
   | ">" -> x > y
   | ">=" -> x >= y
   | "&&" -> x && y
   | "!!" -> x !! y
   esac
} 