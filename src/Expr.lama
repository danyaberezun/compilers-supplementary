-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (r, e) -> let [c@[st, w], {Ref(x), v}] = evalList (c, {r, e}) in [[st <- [x, v], w], v]
  | Seq (e1, e2) -> let [c, {v1, v2}] = evalList (c, {e1, e2}) in [c, v2]
  | Skip -> [c, Void]
  | Read (x) -> let [v, w] = readWorld (w) in [[st <- [x, v], w], Void]
  | Write (e) -> let [[st, w], v] = eval (c, e) in [[st, writeWorld (v, w)], Void]
  | If (e, e1, e2) -> let [c, v] = eval (c, e) in 
      if v != 0 then eval (c, e1) else eval (c, e2) fi
  | DoWhile (cond, body) -> eval (c, Seq (cond, While (body, cond)))
  | While (cond, body) -> let [c, res] = eval (c, cond) in 
      if res != 0 then eval (c, Seq (body, While (cond, body))) else [c, Void] fi
  | Var (x) -> [c, st (x)]
  | Ref (x) -> [c, Ref (x)] 
  | Const (n) -> [c, n]
  | Binop (op, l, r) -> let [c, {l, r}] = evalList (c, {l, r}) in [c, evalOp (op, l, r)]
  | Ignore (e) -> let [c, v] = eval (c, e) in [c, Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
