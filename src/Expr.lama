-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesAndFuns (state, defs) {
  foldl (fun (state, def) {
    case def of
        Var(name) -> state.addNames(name)
      | Fun(name, args, body) -> state.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun addArgs (state, names, values) {
  foldl (fun (s, [name, value]) {s.addName(name, value)}, state, zip(names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalCall (c@[s, w], name, args) {
  case evalList(c, args) of
    [[s1, w1], argVals] -> case lookup(s1, name) of
        Fun (argNames, External) -> case evalBuiltin(name, argVals, w1) of
          [result, newWorld] -> [[s1, newWorld], result]
        esac
      | Fun(argNames, body) -> case enterFunction(s1) of
        sFun -> case addArgs(sFun, argNames, argVals) of
          sFun1 -> case eval([sFun1, w1], body) of
            [[sFun2, w2], res] -> [[leaveFunction(s1, getGlobal(sFun2)), w2], res]
          esac
        esac
      esac
    esac
  esac
}

fun addNamesAndValues (state, names, values) {
  foldl (fun (s, [name_, value_])
    { s.addName (name_, Val(value_)) },
    state, zip(names, values)
  )
}

fun evalElem (c, arrExpr, indExpr) {
  case eval(c, arrExpr) of
    [c1, Sexp(name, args)] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, args[ind]]
    esac
  | [c1, arr] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, arr[ind]]
    esac
  esac
}

fun evalDefs(st, dfns) {
  foldl(fun (st, def) {
          case def of
            Var (ds_) -> addNames (st, ds_) |
            Fun (name_, args_, body_) -> addFunction (st, name_, args_, body_)
          esac
        }, st, dfns)
}

fun evalElemRef (c, arrExpr, indExpr) {
  case eval(c, arrExpr) of
    [c1, Sexp(name, args)] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, ElemRef(args, ind)]
    esac
  | [c1, arr] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, ElemRef(arr, ind)]
    esac
  esac
}


fun eval (c@[st, w], expr) {
  case expr of
    Skip -> [c, None] |
    Ref(x) -> [c, Ref(x)] |
    Const(x) -> [c, x] |
    String(s) -> [c, s] |
    Binop(x, exp1, exp2) -> let [new_c, {left, right}] = evalList(c, {exp1, exp2}) in [new_c, evalOp(x, left, right)] |
    Var(interpr) -> let Val(v) = lookupVal(st, interpr) in ([c, v]) |
    Seq(exp1, exp2) -> let [new_c, {_, right}] = evalList(c, {exp1, exp2}) in [new_c, right] |
    If(cond, exp1, exp2) -> let [new_c, cond_res] = eval(c, cond) in eval(new_c, if cond_res then exp1 else exp2 fi) |
    Assn(exp1, exp2) ->
        let [[new_s, new_w], {u, v}] = evalList(c, {exp1, exp2}) in (
          case u of
            Ref(x) -> lookupVal(st, x); [[new_s <- [x, Val(v)], new_w], v] |
            ElemRef(x@#array, i@#val) -> x[i] := v; [[new_s, new_w], v] |
            ElemRef(x@#str, i@#val) -> x[i] := v; [[new_s, new_w], v] |
            ElemRef(Sexp(_, args), i@#val) -> args[i] := v; [[new_s, new_w], v]
          esac
        ) |
    While(cond, exp) -> let [new_c, k] = eval(c, cond) in (if k == 0 then [new_c, None] else eval(new_c, Seq(exp, While(cond, exp))) fi) |
    DoWhile(exp, cond) -> let [new_c, _] = eval(c, exp) in eval(new_c, While(cond, exp)) | 
    Ignore(exp) -> let [new_c, _] = eval(c, exp) in [new_c, None] |
    Scope(dfns, exp) -> let [[st, w], v] = eval([evalDefs(enterScope(st), dfns), w], exp) in [[leaveScope(st), w], v] |
    Call(name, args) -> var f = lookupFun(st, name);
        let Fun(f_args, body) = f in (
          let [[st, w], vs] = evalList(c, args) in (
            let [[new_s, w], v] = eval([addNamesAndValues(enterFunction(st, "expr"), f_args, vs), w], body) in (
              [[leaveFunction(st, getGlobal(new_s)), w], v]
            )
          )
        ) |
    Array(exps) -> let [[new_s, new_w], vs] = evalList(c, exps) in [[new_s, new_w], listArray(vs)] |
    Sexp(name, exps) -> let [[new_s, new_w], vs] = evalList(c, exps) in [[new_s, new_w], Sexp(name, listArray(vs))] |
    Elem(e_array, e_index) -> 
        let [[new_s, new_w], {u, v_index@#val}] = evalList(c, {e_array, e_index}) in (
          case u of
            v_array@#array -> [[new_s, new_w], v_array[v_index]] |
            v_array@#str -> [[new_s, new_w], v_array[v_index]] |
            Sexp(name, v_args) -> [[new_s, new_w], v_args[v_index]]
          esac
        ) |
    ElemRef(e_array, e_index) ->  let [c, {v_array, v_index}] = evalList(c, {e_array, e_index}) in [c, ElemRef(v_array, v_index)] |
    Builtin(name, exps) -> 
        let [[new_s, w], vs] = evalList(c, exps) in (
          let [v, w] = evalBuiltin(name, vs, w) in (
            [[new_s, w], v]
          )
        )
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}