-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Sexp    (string, expr list)  |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Assn (r, e) ->
      let [c@[st, w], res] = evalList(c, {r, e}) in
      case res of
        {Ref(x), v}   -> (lookupVal(st, x); [[st <- [x, Val(v)], w], v])
        | {ElemRef(a,i),v} -> (a[i] := v; [c, v])
      esac
    | Var(x) -> let Val(v) = lookupVal(st, x) in ([c, v])
    | Ref(x) -> [c, Ref(x)]
    | Const(v) -> [c, v]
    | Seq(e1, e2) -> 
        case evalList(c, {e1, e2}) of 
          [c1, {_, e2}] -> [c1, e2]
        esac
    | Skip -> [c, {}]
    | If(cond, t, f) -> 
            case eval(c, cond) of 
              [c1, res] -> 
                if res then 
                  eval(c1, t)
                else 
                  eval(c1, f)
                fi
            esac
    | While(cond, body) -> 
        case eval(c, cond) of 
          [c1, res] -> 
            if res then 
              eval(c1, Seq(body, While(cond, body)))
            else 
              [c1, {}]
            fi
        esac
    | DoWhile(body, cond) -> 
        eval(c, Seq(body, While(cond, body)))
    | Binop(op, lhs, rhs) -> 
        case evalList(c, {lhs, rhs}) of 
          [c1, {l, r}] -> [c1, evalOp(op, l, r)]
        esac
    | Ignore(e) -> 
        case eval(c, e) of 
          [c, _] -> [c, {}]
        esac
    | Call(name, args) ->
        let Fun(f_args, body) = lookupFun(st, name) in
        let [[st, w], vs] = evalList(c, args) in
        let st_with_args = foldl(
          fun(s, [arg, value]) { s.addName(arg, Val(value)) },
          enterFunction(st),
          zip(f_args, vs)
        ) in
        let [[final_st, w], v] = eval([st_with_args, w], body) in
        [[leaveFunction(st, getGlobal(final_st)), w], v]
    | Scope(dfs, body) -> 
      case eval([foldl(fun(scope, d) {
        case d of 
          Var(ns) -> addNames(scope, ns)
          | Fun(n, args, b) -> addFunction(scope, n, args, b)
        esac
      }, enterScope(st), dfs), w], body) of 
        [[s1, w1], x] -> [[leaveScope(s1), w1], x]
      esac


    | String(s) -> [c, s] 
    | Array(e) ->
        case evalList(c, e) of
          [[s, new_w], x] -> [[s, new_w], listArray(x)]
        esac
    | Sexp(n, e) ->
        case evalList(c, e) of
          [[s, new_w], x] -> [[s, new_w], Sexp(n, listArray(x))]
        esac
    | Elem(ea, ei) ->
        let 
          [c, arr] = eval(c, ea) in
        let 
          [c, idx] = eval(c, ei) in
        [c, (case arr of Sexp(_, a) -> a | a -> a esac)[idx]]
    | ElemRef(e_array, e_index) ->
        let 
          [c, {v_array, v_index}] = evalList(c, {e_array, e_index}) in 
          [c, ElemRef(v_array, v_index)]
    | Builtin(name, exps) -> 
        let [[new_s, w], vs] = evalList(c, exps) in (
          let [v, w] = evalBuiltin(name, vs, w) in (
            [[new_s, w], v]
          )
        )
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}