-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Sexp    (string, expr list)  |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (state, defs) {
  foldl (fun (s, def) {
    case def of
      Var (names) -> addNames (s, names)
    | Fun (name, args, body) -> addFunction (s, name, args, body)
    esac
  }, state, defs)
}

fun addVars (state, names, values) {
  foldl (fun (s, name_and_value) {
    case name_and_value of
      [n, v] -> addName (s, n, Val (v))
    esac
  }, state, zip (names, values))
}

fun eval (c@[s, w], expr) {
  -- printf ("eval: %s\n", expr.string);
  case expr of
    Assn (r, e) ->
      let [c@[st, w], {ref, v}] = evalList (c, {r, e}) in
      case ref of
        Ref (x) -> [[st <- [x, Val (v)], w], v]
      | ElemRef (arr, idx) -> arr[idx] := v; [c, v]
      esac
  | Scope (defs, e) ->
      case eval ([addDefs (enterScope (s), defs), w], e) of
        [c@[s, w], v] -> [[leaveScope (s), w], v]
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of 
        [c, {v1, v2}] -> [c, v2]
      esac
  | Skip -> [c, Void]
  | If (e, e1, e2) ->
      case eval (c, e) of
        [c, v] -> if v != 0 then eval (c, e1) else eval(c, e2) fi
      esac
  | While (e, e1) ->
      case eval (c, e) of
        [c, v] -> 
          if v != 0 then
            case eval (c, e1) of
              [c, Void] -> eval (c, While (e, e1))
            esac
          else
            [c, Void]
          fi
      esac
  | DoWhile (e1, e) ->
      case eval (c, e1) of
        [c, Void] ->
          case eval (c, e) of
            [c, v] ->
              if v != 0 then
                eval (c, DoWhile (e1, e))
              else [c, Void] fi
          esac
      esac
  | Var (x) ->
      lookupVal (s, x);
      case lookup (s, x) of
        Val (v) -> [c, v]
      esac 
  | Ref (x) -> lookupVal (s, x); [c, Ref (x)]
  | Const (n) -> [c, n]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [c, {vl, vr}] -> [c, evalOp (op, vl, vr)]
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, v] -> [c, Void]
      esac
  | Call (x, exprs) ->
      lookupFun (s, x);
      let Fun (args, e) = lookup (s, x) in
      let [c@[s, w], vals] = evalList (c, exprs) in
      let s' = addVars (enterFunction (s), args, vals) in
      let [c@[s', w], v] = eval([s', w], e) in
      [[leaveFunction (s, getGlobal (s')), w], v]
  | Builtin (x, exprs) ->
      let [c@[s, w], vals] = evalList (c, exprs) in
      let [v, w] = evalBuiltin (x, vals, w) in
      [[s, w], v]
  | String (v) -> [c, v]
  | Array (exprs) -> let [c, vals] = evalList (c, exprs) in [c, listArray (vals)]
  | Elem (ea, ei) ->
      let [c, arr] = eval (c, ea) in
      let [c, idx] = eval (c, ei) in
      let arr =
        case arr of
          Sexp (_, arr) -> arr
        | arr -> arr
        esac
      in
      [c, arr[idx]] 
  | ElemRef (ea, ei) -> 
      let [c, arr] = eval (c, ea) in
      let [c, idx] = eval (c, ei) in
      let arr =
        case arr of
          Sexp (_, arr) -> arr
        | arr -> arr
        esac
      in
      [c, ElemRef (arr, idx)] 
  | Sexp (tag, exprs) ->
      let [c, args] = evalList (c, exprs) in
        [c, Sexp (tag, listArray (args))]
  | _ -> failure ("eval expr is not implemented for %s", expr.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
