-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun applyBinaryOperator(op, x, y) {
    case op of
      "+" -> x + y
    | "-" -> x - y
    | "*" -> x * y
    | "/" -> x / y
    | "%" -> x % y
    | "<" -> x < y
    | ">" -> x > y
    | "<=" -> x <= y
    | ">=" -> x >= y
    | "==" -> x == y
    | "!=" -> x != y
    | "!!" -> x !! y
    | "&&" -> x && y
    | _ -> failure("not ok")
    esac
}

public fun evalExpr (st, expr) {
   case expr of
            Var(x) -> st(x)
        |   Const(x) -> x
        |   Binop(op, x, y) -> applyBinaryOperator(op, evalExpr(st, x), evalExpr(st, y))
   esac
}