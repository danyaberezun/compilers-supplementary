-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval ([s, w], expr) {
  -- DEBUG
  (*if compare (sysargs[1], "test013.lama") == 0
  then failure (expr.string)
  else skip
  fi;*)

  case expr of
    Assn (er, ei)      ->
      let [[s, w], Ref (x)] = eval ([s, w], er) in
      let [[s, w], Val (i)] = eval ([s, w], ei) in
      [[s <- [x, i], w], Val (i)]
  | Seq (e1, e2)       ->
      let [[s, w], Void] = eval ([s, w], e1) in
      let [[s, w], v]    = eval ([s, w], e2) in
      [[s, w], v]
  | Skip               -> [[s, w], Void]
  | Read (x)           ->
      let [i, w] = readWorld (w) in
      [[s <- [x, i], w], Void]
  | Write (e)          ->
      let [[s, w], Val (i)] = eval ([s, w], e) in
      let w = writeWorld (i, w) in
      [[s, w], Void]
  | If (ec, et, ef)    ->
      let [[s, w], Val (ic)] = eval ([s, w], ec) in
      if ic != 0 then
        eval ([s, w], et)
      else
        eval ([s, w], ef)
      fi
  | While (ec, ed)     -> eval ([s, w], If (ec, DoWhile (ed, ec), Skip))
  | DoWhile (ed, ec)   -> eval ([s, w], Seq (ed, While (ec, ed)))
  | Var (x)            -> [[s, w], Val (s (x))]
  | Ref (x)            -> [[s, w], Ref (x)]
  | Const (i)          -> [[s, w], Val (i)]
  | Binop (op, el, er) ->
      let [[s, w], Val (l)] = eval ([s, w], el) in
      let [[s, w], Val (r)] = eval ([s, w], er) in
      [[s, w], Val (evalOp (op, l, r))]
  | Ignore (e)         ->
      let [[s, w], _] = eval ([s, w], e) in
      [[s, w], Void]
  | _                  -> failure (sprintf ("evalExpr for %s is not implemented\n", expr.string))
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}