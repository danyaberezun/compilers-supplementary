-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of 
       Assn (varName, expr) ->
         case evalList (c, {varName, expr}) of 
           [[s, w], {varName, expr}] -> 
             [[s <- [varName, expr], w], expr]
         esac
     | Seq (s1, s2) ->
         case evalList (c, {s1, s2}) of
           [c, {s1, s2}] -> 
             [c, s2]
         esac
     | Skip ->
         [c, {}]
     | Read (varName) ->
         case readWorld (w) of
           [value, newWorld] -> 
             [[s <- [varName, value], newWorld], {}]
         esac
     | Write (expr) ->
         case eval (c, expr) of
           [[s, w], value] -> 
             [[s, writeWorld (value, w)], {}]
         esac
     | If (e, s1, s2) ->
         case eval (c, e) of
           [c, cond] ->
             if cond then eval (c, s1)
             else eval (c, s2)
             fi
         esac                
     | While (e, s) ->
         case eval (c, e) of
           [c, cond] ->
             if cond then eval (c, Seq (s, While (e, s)))
             else [c, {}]
             fi
         esac
     | DoWhile (s, e) ->
         eval (c, Seq (s, While (e, s)))
     | Var (varName) ->
         [c, lookup (s, varName)]
     | Ref (e) ->
         [c, e]
     | Const (n) ->
         [c, n]
     | Binop (op, lhs, rhs) ->
         case evalList (c, {lhs, rhs}) of
           [c, {lhs, rhs}] -> 
             [c, evalOp (op, lhs, rhs)] 
         esac
     | Ignore (e) ->
         case eval (c, e) of
           [c, _] -> 
             [c, {}]       
         esac
     | Scope (defs, expr) ->
         case foldl (fun (s, inner_expr) {
           case inner_expr of
             Var (varName) -> 
               addNames (s, varName)
           | Fun (name, args, body) -> 
               addFunction (s, name, args, body)
           esac
          }, s.enterScope, defs) of
            s -> case eval ([s, w], expr) of
              [[s, w], value] -> 
                [[s.leaveScope, w], value]
                  esac 
        esac
     | Call (fun_name, exprs) ->
         case lookup (s, fun_name) of
           Fun (args, body) -> 
             case evalList (c, exprs) of
               [c@[s, w], data] ->
                 case foldl (fun (s, [arg, value]) {
                   s.addName (arg, value) 
                 }, enterFunction (s), zip (args, data)) of
                   state_before ->
                     case eval ([state_before, w], body) of 
                       [[state_after, w], value] -> 
                         [[leaveFunction (s, getGlobal (state_after)), w], value]
                     esac
                 esac
             esac
         esac
   esac  
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}