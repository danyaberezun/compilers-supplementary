-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addScopeDef (s, d) {
  case d of
      Var (n)             -> s.addNames (n)
    | Fun (n, args, body) -> s.addFunction (n, args, body)
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
    case expr of 
    Assn (lhs, rhs) -> case evalList (c, {lhs, rhs}) of 
        [[s, w], {Ref (name), value}] -> [[s <- [name, value], w], value]
      esac
  | Seq (s1, s2) -> case evalList (c, {s1, s2}) of
        [c, {_, v}] -> [c, v]
      esac
  | Skip -> [c, Void]
  | Read (n) -> case readWorld (w) of 
        [v, w] -> [[s <- [n, v], w], Void]
      esac
  | Write (e) -> case eval (c, e) of 
        [[s, w], v] -> [[s, writeWorld (v, w)], Void]
      esac
  | If (e, s1, s2) -> case eval (c, e) of 
        [c, v] -> eval (c, if v != 0 then s1 else s2 fi)
      esac
  | While (e, inner) -> case eval (c, e) of 
        [c, v] -> if v != 0 then eval (c, Seq (inner, expr)) else [c, Void] fi
      esac
  | DoWhile (inner, e) -> eval (c, Seq (inner, While (e, inner)))
  | Var (n) -> [c, s.lookup (n)]
  | Ref (n) -> [c, Ref (n)]
  | Const (v) -> [c, v]
  | Binop (op, l, r) -> case evalList (c, {l, r}) of 
        [c, {vl, vr}] -> [c, evalOp (op, vl, vr)]
      esac
  | Scope (ds, e) -> case eval ([foldl (addScopeDef, s.enterScope, ds), w], e) of
        [[s, w], v] -> [[s.leaveScope, w], v]
      esac
  | Call (n, args) -> case evalList (c, args) of
        [[s, w], vals] -> case s.lookup (n) of
            Fun (args, body) -> case eval ([foldl (fun (s, [n, v]) {s.addName (n, v)}, s.enterFunction, zip (args, vals)), w], body) of 
                [[s2, w], v] -> [[s.leaveFunction (s2.getGlobal), w], v]
              esac
          esac
      esac
  | Ignore (e) -> case eval (c, e) of 
        [c, v] -> [c, Void]
      esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}