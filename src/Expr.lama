-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (ctx@[store, world], expr) {
  case expr of
      Var    (id)                   -> [ctx, store (id)]
    | Const  (x)                  -> [ctx, x]
    | Ref    (name)                -> [ctx, Ref (name)]
    | Binop  (op, e1, e2)          ->
        let [ctx, left]  = eval (ctx, e1) in
        let [ctx, right] = eval (ctx, e2) in
        [ctx, evalOp (op, left, right)]
    | Assn   (target, valueExpr)   ->
        let [ctx, Ref (key)] = eval (ctx, target) in
        let [[store, world], x] = eval (ctx, valueExpr) in
        [[store <- [key, x], world], x]
    | Seq    (fir, sec)       ->
        let [ctx, _] = eval (ctx, fir) in
        eval (ctx, sec)
    | Skip                         -> [ctx, Void]
    | Read(x)                       ->  
         let [v, world] = readWorld(world) in 
         [[store <- [x, v], world], Void] 
    | Write  (expr)                ->
        let [[store, world], x] = eval (ctx, expr) in
        [[store, writeWorld (x, world)], Void]
    | If     (cond, then_, else_)  ->
        let [ctx, result] = eval (ctx, cond) in
        if result then eval (ctx, then_) else eval (ctx, else_) fi
    | While  (cond, body)          ->
        var keepGoing = true;
        while (keepGoing) do
            let [newCtx, result] = eval (ctx, cond) in
            keepGoing := result;
            ctx := newCtx;
            if keepGoing then
                ctx := eval (ctx, body)[0]
            fi
        od;
        [ctx, Void]
    | DoWhile (stmt, cond)         ->
        eval (ctx, Seq (stmt, While (cond, stmt)))
    | Ignore (expr)                ->
        let [ctx, _] = eval (ctx, expr) in
        [ctx, Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
