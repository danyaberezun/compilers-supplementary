-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[state, world], expr) {
  case expr of 
      Assn (variable, expr) ->
        case evalList (c, {variable, expr}) of 
          [[state, world], {variable, expr}] -> 
            [[state <- [variable, expr], world], expr]
        esac
    | Seq (s1, s2) ->
        case evalList (c, {s1, s2}) of
          [c, {s1, s2}] -> 
            [c, s2]
        esac
    | Skip ->
        [c, {}]
    | Read (variable) ->
        case readWorld (world) of
          [value, newWorld] -> 
            [[state <- [variable, value], newWorld], {}]
        esac
    | Write (expr) ->
        case eval (c, expr) of
          [[state, world], value] -> 
            [[state, writeWorld (value, world)], {}]
        esac
    | If (e, s1, s2) ->
        case eval (c, e) of
          [c, cond] ->
            if cond then eval (c, s1)
            else eval (c, s2)
            fi
        esac                
    | While (e, state) ->
        case eval (c, e) of
          [c, cond] ->
            if cond then eval (c, Seq (state, While (e, state)))
            else [c, {}]
            fi
        esac
    | DoWhile (state, e) ->
        eval (c, Seq (state, While (e, state)))
    | Var (variable) ->
        [c, state (variable)]
    | Ref (e) ->
        [c, e]
    | Const (n) ->
        [c, n]
    | Binop (op, lhs, rhs) ->
        case evalList (c, {lhs, rhs}) of
          [c, {lhs, rhs}] -> 
            [c, evalOp (op, lhs, rhs)] 
        esac
    | Ignore (e) ->
        case eval (c, e) of
          [c, _] -> 
            [c, {}]       
        esac           
  esac  
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}