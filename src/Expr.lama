-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn    (exprl, exprr) -> 
    case evalList (c, {exprl, exprr}) of
      [[s, w], {Ref(x), e}] -> [[s <- [x, e], w], e]
    esac
  | Seq     (exprl, exprr) ->
    case eval(c, exprl) of
      [c, _] -> eval(c, exprr)
    esac         
  | Skip -> [c, Void] 
  | Read    (x) ->
    case readWorld(w) of
      [z, w] -> [[s <- [x, z], w], Void]
    esac 
  | Write   (e) ->
    case eval(c, e) of
        [[s, w], value] -> [[s, writeWorld(value, w)], Void]
    esac
  | If      (cond, st1, st2) ->
    case eval(c, cond) of
        [c, 0] -> eval(c, st2) | [c, _] -> eval(c, st1)
    esac
  | While   (cond, st) ->
    case eval(c, cond) of [c, 0] -> [c, Void] | [c, _] ->
        case eval(c, st) of
            [c, Void] -> eval(c, expr)
        esac
    esac
  | DoWhile (cond, e) ->
    case eval(c, cond) of [c, Void] ->
        case eval(c, e) of
            [c, 0] -> [c, Void] | [c, _] -> eval(c, expr)
        esac
    esac
  | Var     (v) -> [c, s (v)]
  | Ref     (x) -> [c, Ref(x)]
  | Const   (x) -> [c, x]
  | Binop   (op, l, r) -> 
    case evalList (c, {l, r}) of 
        [c, {l, r}] -> [c, evalOp (op, l, r)]
    esac
  | Ignore  (e) -> let [c, _] = eval (c, e) in [c, Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
