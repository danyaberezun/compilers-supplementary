-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

fun eval ([s, w], expr) {
  case expr of
    Assn (Var (x), e) ->
      let [[s1, w1], v] = eval ([s, w], e) in
        [[s1 <- [x, v], w1], v]
  | Seq (e1, e2) ->
      let [[s1, w1], _] = eval ([s, w], e1) in
        eval ([s1, w1], e2)
  | Skip -> [[s, w], defaultValue]
  | Read (x) ->
      let [v, w1] = readWorld (w) in
        [[s <- [x, v], w1], v]
  | Write (e) ->
      let [[s1, w1], v] = eval ([s, w], e) in
      let w2 = writeWorld (v, w1) in
        [[s1, w2], v]
  | If (eC, eT, eF) ->
      let [[sC, wC], vC] = eval ([s, w], eC) in
      if vC != 0
      then eval ([sC, wC], eT)
      else eval ([sC, wC], eF)
      fi
  | While (eC, eD) -> (
      [[sC, wC], v] := eval ([s, w], eC);
      while v != 0 do
        [[sD, wD], _] := eval ([sC, wC], eD);
        [[sC, wC], v] := eval ([sD, wD], eC)
      od;
      [[sC, wC], defaultValue]
    )
  | DoWhile (eD, eC) -> (
      [sC, wC] := [s, w];
      v := 0;
      do
        [[sD, wD], _] := eval ([sC, wC], eD);
        [[sC, wC], v] := eval ([sD, wD], eC)
      while v != 0 od;
      [[sC, wC], defaultValue]
    )
  | Var (x) -> [[s, w], s (x)]
  | Ref (m) -> [[s, w], s (x)]  -- FIXME: correct?
  | Const (v) -> [[s, w], v]
  | Binop (op, e1, e2) ->
    let [[s1, w1], v1] = eval ([s, w], e1) in
    let [[s2, w2], v2] = eval ([s1, w1], e2) in
      [[s2, w2], evalOp (op, v1, v2)]
  | Ignore (_) -> [[s, w], defaultValue]
  | _ -> failure ("eval for %s is not implemented", expr.string)
  esac
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
