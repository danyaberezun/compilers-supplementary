-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  -- printf("%s\n", string(expr));
  let result = case expr of
    Assn(ref, expr) ->
      let [c, VarRef(name)] = eval(c, ref) in
      let [[s, w], value@#val] = eval(c, expr) in
      [[s <- [name, value], w], value]
  | Seq(expr1, expr2) ->
      let [c, Bottom] = eval(c, expr1) in
      eval(c, expr2)
  | Skip -> [c, Bottom]
  | Read(name) ->
      let [value, w] = readWorld(w) in
      [[s <- [name, value], w], Bottom]
  | Write(e) ->
      let [c@[s, w], value@#val] = eval(c, e) in
      [[s, writeWorld(value, w)], Bottom]
  | If(cond, th, els) ->
      let [c, condVal@#val] = eval(c, cond) in
      if condVal then eval(c, th) else eval(c, els) fi
  | expr@While(cond, body) ->
      let [c, condVal@#val] = eval(c, cond) in
      if condVal then
        let [c, Bottom] = eval(c, body) in
        eval(c, expr)
      else
        [c, Bottom]
      fi
  | expr@DoWhile(body, cond) ->
      let [c, Bottom] = eval(c, body) in
      let [c, condVal@#val] = eval(c, cond) in
      if condVal then
        eval(c, expr)
      else
        [c, Bottom]
      fi
  | Var(name@#str) -> [c, s(name)]
  | Ref(name@#str) -> [c, VarRef(name)]
  | Const (value@#val) -> [c, value]
  | Binop (op, lhs, rhs) ->
      let [c, x] = eval(c, lhs) in
      let [c, y] = eval(c, rhs) in
      [c, case op of
        "+" -> x + y
      | "-" -> x - y
      | "*" -> x * y
      | "/" -> x / y
      | "%" -> x % y
      | "<" -> x < y
      | ">" -> x > y
      | "<=" -> x <= y
      | ">=" -> x >= y
      | "==" -> x == y
      | "!=" -> x != y
      | "&&" -> x && y
      | "!!" -> x !! y
      esac]
  | Ignore(expr) ->
      let [c, _] = eval(c, expr) in
      [c, Bottom]
  esac in
  -- printf("%s: %s\n", string(expr), string(result));
  result
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
