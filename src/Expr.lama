-- Expression evaluator
import List;
import State;

public fun useBinop (op, left, right) {
   case op of
     "+"  -> left + right
   | "-"  -> left - right
   | "/"  -> left / right
   | "*"  -> left * right
   | "%"  -> left % right
   | "<"  -> left < right
   | ">"  -> left > right
   | "<=" -> left <= right
   | ">=" -> left >= right
   | "==" -> left == right
   | "!=" -> left != right
   | "!!" -> left !! right
   | "&&" -> left && right
   esac
}
-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
   case expr of
     Var(x)          -> st(x)
   | Const(n)        -> n
   | Binop(operation, left, right) -> useBinop(operation, evalExpr(st, left), evalExpr(st, right))
   esac
}