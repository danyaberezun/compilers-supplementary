-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (name) -> st (name)
  | Const (value) -> value
  | Binop (op, lhs, rhs) ->
      let x = evalExpr (st, lhs) in
      let y = evalExpr (st, rhs) in
      case op of
        "+" -> x + y
      | "-" -> x - y
      | "*" -> x * y
      | "/" -> x / y
      | "%" -> x % y
      | "<" -> x < y
      | ">" -> x > y
      | "<=" -> x <= y
      | ">=" -> x >= y
      | "==" -> x == y
      | "!=" -> x != y
      | "&&" -> x && y
      | "!!" -> x !! y
      esac
  esac
}
