-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {["+" , infix + ],
    ["-" , infix - ],
    ["*" , infix * ],
    ["/" , infix / ],
    ["%" , infix % ],
    ["==", infix ==],
    ["!=", infix !=],
    ["<" , infix < ],
    ["<=", infix <=],
    [">" , infix > ],
    [">=", infix >=],
    ["&&", infix &&],
    ["!!", infix !!]};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name, args) {
   case state.lookup(name) of
     f@Fun(params, _) -> if size(params) != size(args)
                         then error(sprintf("wrong arg count: expected %d, got %d", size(params), size(args)), getLoc(name))
                         else f
                         fi
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
   esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addAssignVals (s, fn, vals) {
   foldl(
    fun (s, [name, v]) 
      {
        s.addName(name, v)
      }, 
      s, 
      zip (fn, vals)
  )
}

fun addScope (sc, d) {
   case d of def:tail ->
         let ns = case def of
            Fun (fn, args, body) -> addFunction (sc, fn, args, body)
          | Var (names) -> addNames (sc, names)
         esac in addScope (ns, tail)
    | {} -> sc
   esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (x, y) -> let [c, Ref(z)] = eval (c, x) in
                    let [c@[s, w], v] = eval (c, y) in
                    [[s <- [z, v], w], v]
   | Var(v) -> [c, lookup(s, v)]
   | Ref(_) -> [c, expr]
   | Const(x) -> [c, x]
   | Ignore(e) -> let [c, _] = eval(c, e) in 
                    [c, Void]
   | Seq(e1, e2) -> let [c, _] = eval(c, e1) in 
                  eval(c, e2)
   | Read(x) -> let [c@[s, w], Ref(z)] = eval(c, x) in 
                let [v, w] = readWorld(w) in 
                [[s <- [z, v], w], Void]    
   | Write(x) -> let [c@[s, w], v] = eval(c, x) in 
                  [[s, writeWorld(v, w)], Void]          
   | Skip -> [c, Void]
   | If(cond, f, s) -> let [c, v] = eval(c, cond) in 
                        if v then eval(c, f) 
                        else eval(c, s) 
                        fi
   | While(cond, x) -> var y = true;
                          while (y) do
                             let [c_, v] = eval(c, cond) in
                                y := v;
                                c := c_;
                                if v 
                                then c := eval (c, x)[0] fi
                          od;
                          [c, Void]
   | DoWhile(cond, x) -> eval(c, Seq(x, While(cond, x)))
   | Binop(op, e1, e2) -> let [c, v_] = eval(c, e1) in 
                          let [c, vv] = eval(c, e2) in 
                          [c, evalOp(op, v_, vv)]
   | Call(fn, args) -> let f@Fun (pars, b) = checkFun (s, fn, args) in
                        let [[s, w], vals] = evalList(c, args) in
                          let s2 = addAssignVals (enterFunction (s), pars, vals) in
                          let [[s2, w], e] = eval ([s2, w], b) in 
                          [[leaveFunction (s, getGlobal (s2)), w], e]
   | Scope(d1, y) -> let s1 = addScope(enterScope(s), d1) in 
                      let [[s1, w], x] = eval([s1, w], y) in 
                      [[leaveScope(s1), w], x]
esac
        
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}