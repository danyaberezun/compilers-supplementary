-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (m) -> st (m)
  | Const (n) -> n
  | Binop (op, l, r) ->
      let x = evalExpr (st, l) in
      let y = evalExpr (st, r) in  
      case op of
        "+"  -> x + y
      | "-"  -> x - y
      | "*"  -> x * y
      | "/"  -> x / y
      | "%"  -> x % y
      | "<"  -> x < y
      | "<=" -> x <= y
      | ">"  -> x > y
      | ">=" -> x >= y
      | "==" -> x == y
      | "!=" -> x != y
      | "&&" -> x && y
      | "!!" -> x !! y
      esac
  esac
}
