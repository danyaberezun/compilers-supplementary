-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of 
    Var (x) -> [c, s (x)]
    | Ignore (expr) -> [eval(c, expr) [0], 0]
    | Const (n) -> [c, n]
    | Assn (lvalue, rvalue) -> 
      case evalList(c, {lvalue, rvalue}) of 
        [[s, w], {Ref (lv), rv}] -> [[s <- [lv, rv], w], rv]
      esac
    | Seq (expr1, expr2) -> 
      case eval(c, expr1) of
        [c, v] -> eval(c, expr2)
      esac
    | Ref (x) -> [c, Ref (x)]
    | Skip -> [c, 0]
    | Read (varname) ->
      case readWorld(c[1]) of
        [res, w] -> [[(c[0] <- [varname, res]), w], 0]
      esac
    | Write (expr) -> 
      case eval(c, expr) of 
        [c, e] -> [[c[0], writeWorld(e, c[1])], 0]
      esac
    | Binop (op, lhs, rhs) -> 
      case evalList(c, {lhs, rhs}) of 
        [c, {lv, rv}] -> [c, evalOp(op, lv, rv)]
      esac
    | While (cond, body) -> 
      case eval(c, cond) of 
        [c, 0] -> [c, 0]
        | [c, _] -> 
          case eval(c, body) of
            [c, _] -> eval(c, While (cond, body))
          esac
      esac
    | DoWhile (body, cond) -> eval(c, Seq(body, While (cond, body)))
    | If (cond, t, f) -> 
      case eval(c, cond) of
        [c, 0] -> eval(c, f)
        | [c, _] -> eval(c, t)
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
