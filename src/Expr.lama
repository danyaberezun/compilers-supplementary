-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[state, world], expr) {
  case expr of
      Var(x) -> [c, lookup(state, x)]
    | Const(x) -> [c, x]
    | Binop(x, l, r) ->
      let [new_c, {new_l, new_r}] = evalList(c, {l, r}) in
      [new_c, evalOp(x, new_l, new_r)]
    | Assn(exp1, exp2) ->
      let [[new_s, new_w], {left, right}] = evalList(c, {exp1, exp2}) in
      [[new_s <- [left, right], new_w], right]
    | Skip -> [c, None]
    | Read(x) ->
      let [rd, new_world] = readWorld(world) in
      [[state <- [x, rd], new_world], None]
    | Write(exp) ->
      let [[new_state, new_world], x] = eval(c, exp) in
      [[new_state, writeWorld(x, new_world)], None]
    | If (cond, exp1, exp2) ->
      let [new_c, res] = eval(c, cond) in
      eval(new_c, if res then exp1 else exp2 fi)
    | While(cond, exp) ->
      let [new_c, res] = eval(c, cond) in
      (if res == 0 then [new_c, None] else eval(new_c, Seq(exp, While(cond, exp))) fi)
    | DoWhile(exp, cond) ->
      let [new_c, _] = eval(c, exp) in
      eval(new_c, While(cond, exp))
    | Ref(x) -> [c, x]
    | Ignore(exp) ->
      let [new_c, _] = eval(c, exp) in
      [new_c, None]
    | Seq(exp1, exp2) ->
      let [new_c, {_, right}] = evalList(c, {exp1, exp2}) in
      [new_c, right]
    | Call(func, arg) ->
      let [[sa, new_w], x] = evalList(c, arg) in
      let Fun(arg, body) = lookup(sa, func) in
      let new_state = foldl(fun(st, [name, vl]) {addName(st, name, vl)}, enterFunction(sa), zip(arg, x)) in
      let [[new_s2, new_w2], res] = eval([new_state, new_w], body) in
      [[leaveFunction(sa, getGlobal(new_s2)), new_w2], res]
    | Scope(defs, body) ->
      let [[new_state, new_world], x] = eval(
      [foldl(fun(s, def) {
        case def of
          Var(names) -> addNames(s, names) |
          Fun(name, arg, body) -> addFunction(s, name, arg, body)
        esac
        }, enterScope(state), defs) , world], body
      ) in
      [[leaveScope(new_state), new_world], x]
    | _ -> [c, 0]
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
