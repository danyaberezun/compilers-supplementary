-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
    case expr of
          Var (x) -> [c, s(x)]
        | Const (x) -> [c, x]
        | Binop (s, l, r) -> let [c, lv] = eval(c, l) in let [c, rv] = eval(c, r) in [c, evalOp(s, lv, rv)]
        | Assn(x, e) ->  let [c, Ref(y)] =  eval(c, x) in let [[s, w], v] = eval(c, e) in [[s <- [y, v], w], v]
        | Seq(e1, e2) ->  let [c, _] = eval(c, e1) in eval(c, e2)
        | Skip -> [c, 0]
        | Read(x) ->  let [v, w] = readWorld(w) in [[s <- [x, v], w], 0] 
        | Write(e) -> let [[s, w], v] = eval(c, e) in [[s, writeWorld(v, w)], 0]
        | If(con, t, f) -> let [c, v] = eval(c, con) in 
                                if v then eval(c, t) else eval(c, f) fi
        | While (con, b) -> case eval(c, con) of
                                  [c, 0] -> [c, 0]
                                | [c, _] -> let [c, _] = eval(c, b) in eval(c, While (con, b))
                                esac
        | DoWhile (b, con) -> eval(c, Seq(b, While(con, b)))
        | Ref(x) -> [c, Ref(x)]
        | Ignore(e) ->  let [c, _] = eval(c, e) in [c, 0]
        | _ -> [c, 0]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
