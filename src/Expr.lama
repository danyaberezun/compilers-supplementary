-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Var (str_var) -> [c, st(str_var)]
    | Const (const_val) -> [c, const_val]
    | Binop (s, e1, e2) ->  case evalList(c, {e1, e2}) of
                              [new_c, {v1, v2}] -> [new_c, evalOp(s, v1, v2)]
                            esac
    | Assn(e1, e2) -> case evalList(c, {e1, e2}) of
                        [[new_st, new_w], {Ref x, v2}] -> [[new_st <- [x, v2], new_w], v2]
                      esac
    | Seq(e1, e2) ->  case evalExpr(c, e1) of
                        [new_c, v] -> evalExpr(new_c, e2)
                      esac
    | Skip -> [c, 0]
    | Read(x) ->  case readWorld(w) of
                    [v, new_w] -> [[st <- [x, v], new_w], 0]
                  esac
    | Write(e) -> case evalExpr(c, e) of
                    [[new_st, new_w], v] -> [[new_st, writeWorld(v, new_w)], 0]
                  esac
    | If(e1, e2, e3) -> case evalExpr(c, e1) of
                            [new_c, 0] -> evalExpr(new_c, e3)
                          | [new_c, _] -> evalExpr(new_c, e2)
                        esac
    | While (e1, e2) -> case evalExpr(c, e1) of
                            [new_c, 0] -> [new_c, 0]
                          | [new_c, _] -> case evalExpr(new_c, e2) of
                                            [body_c, 0] -> evalExpr(body_c, While (e1, e2))
                                          esac
                        esac
    | DoWhile (e1, e2) -> evalExpr(new_c, Seq(e1, While(e2, e1)))
    | Ref(x) -> [c, Ref(x)]
    | Ignore(e) ->  case evalExpr(c, e) of
                      [new_c, _] -> [new_c, 0]
                    esac
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
