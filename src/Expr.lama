-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addD(scope, defs) {
  case defs of 
    d:tail -> case d of 
      Var (ns) -> addD(addNames(scope, ns), tail) | 
      Fun (n, as, b) -> addD(addFunction(scope, n, as, b), tail)
    esac
    | _ -> scope
  esac
}

fun addArg(s, as, vs) {
  case as of 
      a:astail -> case vs of v:vstail -> addArg(addName(s, a, v), astail, vstail) esac
    | _ -> s
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of 
    Var (x) ->              [c, lookup(s, x)] |
    Const (x) ->            [c, x] |
    Ref (e) -> [            c, e] |
    Binop (op, lhs, rhs) -> case evalList (c, {lhs, rhs}) of [c, {l, r}] -> 
                                [c, evalOp (op, l, r)] 
                            esac |
    Ignore (e) -> 
                            case eval (c, e) of [c, _] -> 
                                [c, {}] 
                            esac |
    Skip -> 
                            [c, {}] |
    Assn (x, exp) ->        case evalList (c, {x, exp}) of [[s, w], {x, exp}] -> 
                                [[s <- [x, exp], w], exp] 
                            esac |
    Read (x) ->             case readWorld (w) of [v, w] -> 
                                [[s <- [x, v], w], {}] 
                            esac |
    Write (exp) ->          case eval (c, exp) of [[s, w], tmp] -> 
                                [[s, writeWorld (tmp, w)], {}] 
                            esac |
    Seq (e1, e2) ->         case evalList (c, {e1, e2}) of [c, {_, e2}] -> 
                                [c, e2] 
                            esac |
    DoWhile (cond, body) -> eval (c, Seq(cond, While(body, cond))) |
    While (cond, body) ->   case eval (c, cond) of [c, res] -> 
                            if res 
                            then eval (c, Seq (body, While (cond, body))) 
                            else [c, {}] 
                            fi 
                            esac |
    If (cond, b1, b2) ->    case eval (c, cond) of [c, res] -> 
                            if res 
                            then eval (c, b1) 
                            else eval (c, b2) 
                            fi
        esac |
    Call (f, args) ->       case evalList(c, args) of [[s1, w], vs] -> 
                            case lookup(s1, f) of Fun(args, body) -> 
                            case addArg(enterFunction(s1), args, vs) of scope -> 
                            case eval([scope, w], body) of [[scope, w], res] -> 
                                [[leaveFunction(s1, getGlobal(scope)), w], res] 
                            esac
                            esac
                            esac
                            esac| 
    Scope (defs, e) ->      case addD(enterScope(s), defs) of scope -> 
                            case eval([scope, w], e) of [[scope, w], res] -> 
                                [[leaveScope(scope), w], res] 
                            esac
                            esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}