-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesAndFuns (state, defs) {
  foldl (fun (state, def) {
    case def of
        Var(name) -> state.addNames(name)
      | Fun(name, args, body) -> state.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun addArgs (state, names, values) {
  foldl (fun (s, [name, value]) {s.addName(name, value)}, state, zip(names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn (e1, e2) ->
      let [c1, value] = eval(c, e2) in
      case eval(c1, e1) of
        [[s1, w1], ElemRef(arr, ind)] -> (
          arr[ind] := value;
          [[s1, w1], value]
        )
      | [[s1, w1], refName] ->
          [[s1 <- [refName, value], w1], value]

  | Seq (e1, e2) ->
      let [c1, _] = eval(c, e1) in
      eval(c1, e2)

  | Skip -> [c, Void]

  | If (cond, thenExpr, elseExpr) ->
      let [c1, res] = eval(c, cond) in
      if res != 0 then eval(c1, thenExpr) else eval(c1, elseExpr)

  | While (cond, body) ->
      let [c1, res] = eval(c, cond) in
      if res then eval(c1, Seq(body, While(cond, body))) else [c1, Void]

  | DoWhile (body, cond) ->
      eval(c, Seq(body, While(cond, body)))

  | Var(name) -> [c, lookup(s, name)]

  | Ref(name) -> [c, name]

  | Const(n) -> [c, n]

  | Binop(op, e1, e2) ->
      let [c1, v1] = eval(c, e1) in
      let [c2, v2] = eval(c1, e2) in
      [c2, evalOp(op, v1, v2)]

  | Ignore(e) ->
      let [c1, _] = eval(c, e) in
      [c1, Void]

  | Scope(defs, body) ->
      let s1 = enterScope(s) in
      let s2 = addNamesAndFuns(s1, defs) in
      let [[s3, w1], result] = eval([s2, w], body) in
      [[leaveScope(s3), w1], result]

  | Call(name, args) ->
      let [[s1, w1], argVals] = evalList(c, args) in
      case lookup(s1, name) of
        Fun(argNames, External) ->
          let [res, newWorld] = evalBuiltin(name, argVals, w1) in
          [[s1, newWorld], res]
      | Fun(argNames, body) ->
          let sFun = enterFunction(s1) in
          let sFun1 = addArgs(sFun, argNames, argVals) in
          let [[sFun2, w2], res] = eval([sFun1, w1], body) in
          [[leaveFunction(s1, getGlobal(sFun2)), w2], res]

  | Set(name, e) ->
      let [[s1, w1], val] = eval(c, e) in
      [[s1 <- [name, val], w1], Void]

  | String(str) -> [c, str]

  | Elem(arrExpr, indExpr) ->
      let [c1, arr] = eval(c, arrExpr) in
      let [c2, ind] = eval(c1, indExpr) in
      case arr of
        Sexp(_, args) -> [c2, args[ind]]
      | _ -> [c2, arr[ind]]

  | ElemRef(arrExpr, indExpr) ->
      let [c1, arr] = eval(c, arrExpr) in
      let [c2, ind] = eval(c1, indExpr) in
      case arr of
        Sexp(_, args) -> [c2, ElemRef(args, ind)]
      | _ -> [c2, ElemRef(arr, ind)]

  | Array(exprs) ->
      let [c1, vals] = evalList(c, exprs) in
      [c1, listArray(vals)]

  | Sexp(tag, exprs) ->
      let [c1, vals] = evalList(c, exprs) in
      [c1, Sexp(tag, listArray(vals))]
}



-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}