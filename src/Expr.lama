-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)

fun addNamesAndValues (state, names, values) {
  foldl(fun(s, [name_, value_]) { s.addName(name_, Var(value_)) },
        state,
        zip(names, values))
}


fun evalDefs(st, dfns) {
  foldl(fun (st, def) {
          case def of
            Var (ds_) -> addNames (st, ds_) |
            Fun (name_, args_, body_) -> addFunction (st, name_, args_, body_)
          esac
        },
        st,
        dfns)
}

public fun evalBinop(op, left_arg, right_arg) {
    case op of
      "+"  -> left_arg + right_arg |
      "-"  -> left_arg - right_arg |
      "*"  -> left_arg * right_arg |
      "/"  -> left_arg / right_arg |
      "%"  -> left_arg % right_arg |
      "<"  -> left_arg < right_arg |
      ">"  -> left_arg > right_arg |
      "<=" -> left_arg <= right_arg |
      ">=" -> left_arg >= right_arg |
      "==" -> left_arg == right_arg |
      "!=" -> left_arg != right_arg |
      "&&" -> left_arg && right_arg |
      "!!" -> left_arg !! right_arg
    esac
}

fun eval (c@[st, w], expr) {
  case expr of
    Skip -> [c, None] |
    Ref(x) -> [c, Ref(x)] |
    Const(x) -> [c, x] |
    Binop(x, exp1, exp2) -> let [new_c, {left, right}] = evalList(c, {exp1, exp2}) in [new_c, evalOp(x, left, right)] |
    Assn(exp1, exp2) -> let [[new_s, new_w], {Ref(left), right}] = evalList(c, {exp1, exp2}) in
                        checkVar(st, left);
                        [[new_s <- [left, Var(right)], new_w], right] |
    Seq(exp1, exp2) -> let [new_c, {_, right}] = evalList(c, {exp1, exp2}) in [new_c, right] |
    Read(x) -> checkVar(st, x);
               let [rd, new_w] = readWorld(w) in [[st <- [x, Var(rd)], new_w], None] |
    Write(exp) -> let [[new_s, new_w], x] = eval(c, exp) in [[new_s, writeWorld(x, new_w)], None] |
    Ignore(exp) -> let [new_c, _] = eval(c, exp) in [new_c, None] |
    If(cond, exp1, exp2) -> let [new_c, cond_res] = eval(c, cond) in eval(new_c, if cond_res then exp1 else exp2 fi) |
    While(cond, exp) -> let [new_c, k] = eval(c, cond) in (if k == 0 then [new_c, None] else eval(new_c, Seq(exp, While(cond, exp))) fi) |
    DoWhile(exp, cond) -> let [new_c, _] = eval(c, exp) in eval(new_c, While(cond, exp)) | 
    Var(vn) -> checkVar(st, vn);
               let Var(v) = lookup(st, vn) in [c, v] |
    Scope(dfns, exp) -> let [[st, w], v] = eval([evalDefs(enterScope(st), dfns), w], exp) in [[leaveScope(st), w], v] |
    Call(f, arg) -> var f_name = lookup(st, f);
                    checkFun(st, f);
                    let Fun(f_args, body) = f_name in (
                      let [[st, w], vs] = evalList(c, arg) in (
                        let [[new_s, new_w], res] = eval([addNamesAndValues(enterFunction(st), f_args, vs), w], body) in
                        [[leaveFunction(st, getGlobal(new_s)), new_w], res]
                      )
                    )
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}