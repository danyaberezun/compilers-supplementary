-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Assn(x, exp) -> 
      case evalList(c, {x, exp}) of 
        [[s, w], {x, exp}] -> [[s <- [x, exp], w], exp]
      esac
    | Var(x) -> [c, lookup(s, x)]
    | Ref(x) -> [c, x]
    | Const(v) -> [c, v]
    | Seq(e1, e2) -> 
        case evalList(c, {e1, e2}) of 
          [c1, {_, e2}] -> [c1, e2]
        esac
    | Skip -> [c, {}]
    | Read(x) -> 
        case readWorld(w) of 
          [v, w1] -> [[s <- [x, v], w1], {}]
        esac
    | Write(exp) -> 
        case eval(c, exp) of 
          [[s1, w1], v] -> [[s1, writeWorld(v, w1)], {}]
        esac
    | If(cond, t, f) -> 
        case eval(c, cond) of 
          [c1, res] -> 
            if res then 
              eval(c1, t)
            else 
              eval(c1, f)
            fi
        esac
    | While(cond, body) -> 
        case eval(c, cond) of 
          [c1, res] -> 
            if res then 
              eval(c1, Seq(body, While(cond, body)))
            else 
              [c1, {}]
            fi
        esac
    | DoWhile(body, cond) -> 
        eval(c, Seq(body, While(cond, body)))
    | Binop(op, lhs, rhs) -> 
        case evalList(c, {lhs, rhs}) of 
          [c1, {l, r}] -> [c1, evalOp(op, l, r)]
        esac
    | Ignore(e) -> 
        case eval(c, e) of 
          [c, _] -> [c, {}]
        esac
    | Call(f, args) -> 
        case evalList(c, args) of 
          [[st, w1], vals] -> 
            case lookup(st, f) of 
              Fun(ns, body) -> 
                case foldl(fun(s, [n, v]) { addName(s, n, v) }, enterFunction(st), zip(ns, vals)) of 
                  scope -> 
                    case eval([scope, w1], body) of 
                      [[scope, w2], res] -> [[leaveFunction(st, getGlobal(scope)), w2], res]
                    esac
                esac
            esac
        esac
    | Scope(dfs, body) -> 
        case eval([foldl(fun(scope, d) {
          case d of 
            Var(ns) -> addNames(scope, ns)
            | Fun(n, args, b) -> addFunction(scope, n, args, b)
          esac
        }, enterScope(s), dfs), w], body) of 
          [[s1, w1], x] -> [[leaveScope(s1), w1], x]
        esac
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}