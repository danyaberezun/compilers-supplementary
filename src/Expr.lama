-- Expression evaluator
import List;
import State;

public fun evalBinop(op, res1, res2) {
    if compare(op, "+") == 0 then res1 + res2
    elif compare(op, "-") == 0 then res1 - res2 
    elif compare(op, "*") == 0 then res1 * res2
    elif compare(op, "/") == 0 then res1 / res2
    elif compare(op, "%") == 0 then res1 % res2
    elif compare(op, "==") == 0 then res1 == res2
    elif compare(op, "!=") == 0 then res1 != res2
    elif compare(op, "<") == 0 then res1 < res2
    elif compare(op, "<=") == 0 then res1 <= res2
    elif compare(op, ">") == 0 then res1 > res2
    elif compare(op, ">=") == 0 then res1 >= res2
    elif compare(op, "&&") == 0 then res1 && res2
    elif compare(op, "!!") == 0 then res1 !! res2
    fi
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
   case expr of 
      Var (name) -> st (name)
      | Const (value) -> value
      | Binop (op, expr1, expr2) -> evalBinop(op, evalExpr (st, expr1), evalExpr (st, expr2))
   esac
}