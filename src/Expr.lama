-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

-- Helper function to evaluate binary operations
public fun evalBinop(operation, val1, val2) { 
   case operation of
      "+"  -> val1 + val2
    | "-"  -> val1 - val2
    | "*"  -> val1 * val2
    | "/"  -> if val2 == 0 then failure("Division by zero error\n") else val1 / val2 fi
    | "%"  -> if val2 == 0 then failure("Modulo by zero error\n") else val1 % val2 fi
    | "==" -> val1 == val2
    | "!=" -> val1 != val2
    | "<"  -> val1 < val2
    | "<=" -> val1 <= val2
    | ">"  -> val1 > val2
    | ">=" -> val1 >= val2
    -- Logical ops can be added here if tests require e.g.:
    | "&&" -> val1 && val2 
    | "!!" -> val1 !! val2
    | _    -> failure("Unsupported binary operator in evalBinop: %s\n", operation)
   esac
}

public fun evalExpr (current_state, expression_to_eval) {
   case expression_to_eval of 
      Var(var_name) -> current_state(var_name)
      | Const(num_val) -> num_val 
      | Binop(op_str, sub_expr1, sub_expr2) -> 
         evalBinop(op_str, evalExpr(current_state, sub_expr1), evalExpr(current_state, sub_expr2))
   esac
}