-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalOp (s, v1, v2) {
  case s of
    "+" -> v1 + v2
  | "-" -> v1 -  v2
  | "*" -> v1 *  v2
  | "/" -> v1 /  v2
  | "%" -> v1 %  v2
  | "=="-> v1 == v2
  | "!="-> v1 != v2
  | "<" -> v1 <  v2
  | "<="-> v1 <= v2
  | ">" -> v1 >  v2
  | ">="-> v1 >= v2
  | "&&"-> v1 && v2
  | "!!"-> v1 !! v2
  | _ -> failure("could not convert string to op")
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (s) -> st(s)
  | Const (n) -> n
  | Binop (s, e1, e2) -> evalOp (s, evalExpr (st, e1), evalExpr (st, e2))
  | _ -> failure("could not evaluate expression")
  esac
}
