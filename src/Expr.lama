-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (state, expr) {
   case expr of
      Var(var_name) -> state(var_name)
   |  Const(value) -> value
   |  Binop(operation, first, second) ->
         evalBinop(operation, evalExpr(state, first), evalExpr(state, second))
   esac
}

public fun evalBinop(operation, first, second) {
   case operation of
      "+" -> first + second
   |  "-" -> first - second
   |  "*" -> first * second
   |  "/" -> first / second
   |  "%" -> first % second
   |  "==" -> first == second
   |  "!=" -> first != second
   |  "<" -> first < second
   |  "<=" -> first <= second
   |  ">" -> first > second
   |  ">=" -> first >= second
   |  "&&" -> first && second
   |  "!!" -> first !! second
   esac
}
