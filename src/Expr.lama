-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)


-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
   case expr of
      Var    (name)               -> [c, s (name)]
    | Const  (value)              -> [c, value]
    | Ref    (_)                  -> [c, expr]
    | Binop  (op, expr1, expr2)   -> let [c, l] = eval (c, expr1) in
       let [c, r] = eval (c, expr2) in [c, evalOp (op, l, r)]
    | Assn   (exprl, exprr)       -> let [c, Ref (name)] = eval (c, exprl) in
       let [c, value] = eval (c, exprr) in
          let [s, w] = c in [[s <- [name, value], w], value]
    | Seq    (expr1, expr2)       -> let [c, _] = eval (c, expr1) in eval (c, expr2)
    | Skip                        -> [c, Void]
    | Read   (expr)               -> let [c, Ref (name)] = eval (c, expr) in
       let [s, w] = c in
          let [value, w] = readWorld (w) in
             [[s <- [name, value], w], Void]
    | Write  (expr)               -> let [c, value] = eval (c, expr) in
       let [s, w] = c in
          [[s, writeWorld (value, w)], Void]
    | If     (cond, expr1, expr2) -> let [c, value] = eval (c, cond) in
       if value then eval (c, expr1) else eval (c, expr2) fi
    | While  (cond, s)            ->
       var value = true;
       while (value) do
          let [c_, v] = eval (c, cond) in
             value := v;
             c := c_;
             if value then c := eval (c, s)[0] fi
       od;
       [c, Void]
    | DoWhile (cond, s)           -> eval (c, Seq (s, While (cond, s)))
    | Ignore (expr)               -> let [c, _] = eval (c, expr) in [c, Void]    
   esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
