-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
  case expr of
      Var (x)   -> st (x)
    | Const (n) -> n
    | Binop (binop, n1, n2) -> 
        let left = evalExpr (st, n1) in
        let right = evalExpr (st, n2) in
        case binop of
            "+"  -> left + right
          | "-"  -> left - right
          | "*"  -> left * right
          | "/"  -> left / right
          | "%"  -> left % right
          | "<"  -> left < right
          | ">"  -> left > right
          | "<=" -> left <= right
          | ">=" -> left >= right
          | "==" -> left == right
          | "!=" -> left != right
          | "&&" -> left && right
          | "!!" -> left !! right
        esac
  esac
}