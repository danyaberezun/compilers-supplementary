-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalAssn (c, e1, e2) {
  case evalList (c, {e1, e2}) of
    [[s, w], {Ref (x), Val (v)}] -> [[s <- [x, Val (v)], w], Val (v)]
  esac
}

fun evalSeq (c, e1, e2) {
  case eval (c, e1) of
    [c, _] -> eval (c, e2)
  esac
}

fun evalRead ([s, w], x) {
  case readWorld (w) of
    [v, w] -> [[s <- [x, Val (v)], w], Void]
  esac
}

fun evalWrite (c, e) {
  case eval (c, e) of
    [[s, w], Val (v)] -> [[s, writeWorld (v, w)], Void]
  esac
}

fun evalIf (c, e, s1, s2) {
  case eval (c, e) of
    [c, Val (0)] -> eval (c, s2)
    | [c, Val (_)] -> eval (c, s1)
  esac
}

fun evalWhile (c, e, s) {
  case eval (c, e) of
    [c, Val (0)] -> [c, Void]
    | [c, Val (_)] ->
        case eval(c, s) of
          [c, _] -> eval (c, While (e, s))
        esac
  esac
}

fun evalBinop (c, op, l, r) {
  case evalList (c, {l, r}) of
    [c, {Val (l), Val (r)}] -> [c, Val (evalOp (op, l, r))]
  esac
}

fun evalIgnore (c, e) {
  case eval (c, e) of
    [c, _] -> [c, Void]
  esac
}

fun evalScope ([s, w], d, e) {
  case s.enterScope of
    s ->
      case foldl (
          fun (s, d) {
            case d of
              Fun (name, args, body) -> s.addFunction (name, args, body)
              | Var (name) -> s.addNames (name)
            esac
          }, s, d) of
        s ->
          case eval ([s, w], e) of
            [[s, w], v] -> [[s.leaveScope, w], v]
          esac
      esac
  esac
}

fun evalCall ([s, w], name, e) {
  case evalList([s, w], e) of
    [[sOutOfFunction, w], values] ->
      case sOutOfFunction.lookup(name) of
        Fun (args, body) ->
          case sOutOfFunction.enterFunction of
            sInFunction ->
              case foldl (
                  fun (s, [x, v]) {
                    s.addName (x, v)
                  }, sInFunction, zip (args, values)) of
                sInFunction ->
                  case eval ([sInFunction, w], body) of
                    [[sFunctionEnd, w], v] -> [[sOutOfFunction.leaveFunction(sFunctionEnd.getGlobal), w], v]
                  esac
              esac
          esac
      esac
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
      Assn (e1, e2)       -> evalAssn (c, e1, e2)
    | Seq (e1, e2)        -> evalSeq (c, e1, e2)
    | Skip               -> [c, Void]
    | Read (x)           -> evalRead (c, x)
    | Write (e)          -> evalWrite (c, e)
    | If (e, s1, s2)     -> evalIf (c, e, s1, s2)
    | While (e, s)       -> evalWhile (c, e, s)
    | DoWhile (s, e)     -> eval (c, Seq (s, While (e, s)))
    | Var (x)            -> [c, s.lookup (x)]
    | Ref (x)            -> [c, Ref (x)]
    | Const (z)          -> [c , Val (z)]
    | Binop (op, l, r)   -> evalBinop (c, op, l, r)
    | Ignore (e)         -> evalIgnore (c, e)
    | Scope (d, e)       -> evalScope (c, d, e)
    | Call (name, e)     -> evalCall (c, name, e)
    | _ -> failure ("unimplemented expression: %s\n", expr.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}