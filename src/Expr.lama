-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (state, defs) {
  foldl (fun (s, def) {
    case def of
      Var (names) -> s.addNames (names)
    | Fun (name, args, body) -> s.addFunction (name, args, body)
    esac
  }, state, defs)
}

fun addVars (state, names, values) {
  foldl (fun (s, name_and_value) {
    case name_and_value of
      [n, v] -> s.addName(n, Var (v))
    esac
  }, state, zip (names, values))
}

(* Assignment *)
fun eval (c@[s, w], expr) {
  case expr of
    Assn (r, e) ->
      case evalList (c, {r, e}) of
        [c@[st, w], {Ref (x), v}] -> [[st <- [x, Var (v)], w], v]
      esac
  | Scope (defs, e) ->
      case eval ([s.enterScope.addDefs (defs), w], e) of
        [c@[s, w], v] -> [[s.leaveScope, w], v]
      esac
  | Seq (e1, e2) ->
      case evalList (c, {e1, e2}) of 
        [c, {v1, v2}] -> [c, v2]
      esac
  | Skip -> [c, Void]
  | Read (x) -> 
      s.checkVar (x);
      case readWorld (w) of
        [n, w] -> [[s <- [x, Var (n)], w], Void]
      esac
  | Write (e) ->
      case eval (c, e) of
        [c@[s, w], v] -> [[s, writeWorld (v, w)], Void]
      esac
  | If (e, e1, e2) ->
      case eval (c, e) of
        [c, v] -> if v != 0 then eval (c, e1) else eval(c, e2) fi
      esac
  | While (e, e1) ->
      case eval (c, e) of
        [c, v] -> 
          if v != 0 then
            case eval (c, e1) of
              [c, Void] -> eval (c, While (e, e1))
            esac
          else
            [c, Void]
          fi
      esac
  | DoWhile (e1, e) ->
      case eval (c, e1) of
        [c, Void] ->
          case eval (c, e) of
            [c, v] ->
              if v != 0 then
                eval (c, DoWhile (e1, e))
              else [c, Void] fi
          esac
      esac
  | Var (x) ->
      s.checkVar (x);
      case s.lookup (x) of
        Var (v) -> [c, v]
      esac 
  | Ref (x) -> s.checkVar (x); [c, Ref (x)]
  | Const (n) -> [c, n]
  | Binop (op, l, r) ->
      case evalList (c, {l, r}) of
        [c, {vl, vr}] -> [c, evalOp (op, vl, vr)]
      esac
  | Ignore (e) ->
      case eval (c, e) of
        [c, v] -> [c, Void]
      esac
  | Call (x, exprs) ->
      s.checkFun (x);
      let Fun (args, e) = lookup (s, x) in
      let [c@[s, w], vals] = evalList (c, exprs) in
      let s' = addVars (enterFunction (s), args, vals) in
      let [c@[s', w], v] = eval([s', w], e) in
      [[leaveFunction (s, getGlobal (s')), w], v]
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
