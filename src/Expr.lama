-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
     Var (name) -> st (name)
   | Const (c) -> c
   | Binop (operation, first, second) ->
      var firstExpr = evalExpr(st, first);
      var secondExpr = evalExpr(st, second);
      case operation of
         "+" -> firstExpr + secondExpr
       | "-" -> firstExpr - secondExpr
       | "*" -> firstExpr * secondExpr
       | "/" -> firstExpr / secondExpr
       | "%" -> firstExpr % secondExpr
       | "==" -> firstExpr == secondExpr
       | "!=" -> firstExpr != secondExpr
       | "<" -> firstExpr < secondExpr
       | "<=" -> firstExpr <= secondExpr
       | ">" -> firstExpr > secondExpr
       | ">=" -> firstExpr >= secondExpr
       | "&&" -> firstExpr && secondExpr
       | "!!" -> firstExpr !! secondExpr
       esac
   esac
}