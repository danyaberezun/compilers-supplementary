-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesAndFuns (state, defs) {
  foldl (fun (state, def) {
    case def of
        Var(name) -> state.addNames(name)
      | Fun(name, args, body) -> state.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun addArgs (state, names, values) {
  foldl (fun (s, [name, value]) {s.addName(name, value)}, state, zip(names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalCall (c@[s, w], name, args) {
  case evalList(c, args) of
    [[s1, w1], argVals] -> case lookup(s1, name) of
        Fun (argNames, External) -> case evalBuiltin(name, argVals, w1) of
          [result, newWorld] -> [[s1, newWorld], result]
        esac
      | Fun(argNames, body) -> case enterFunction(s1) of
        sFun -> case addArgs(sFun, argNames, argVals) of
          sFun1 -> case eval([sFun1, w1], body) of
            [[sFun2, w2], res] -> [[leaveFunction(s1, getGlobal(sFun2)), w2], res]
          esac
        esac
      esac
    esac
  esac
}

fun evalElem (c, arrExpr, indExpr) {
  case eval(c, arrExpr) of
    [c1, Sexp(name, args)] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, args[ind]]
    esac
  | [c1, arr] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, arr[ind]]
    esac
  esac
}

fun evalElemRef (c, arrExpr, indExpr) {
  case eval(c, arrExpr) of
    [c1, Sexp(name, args)] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, ElemRef(args, ind)]
    esac
  | [c1, arr] -> case eval(c1, indExpr) of
      [c2, ind] -> [c2, ElemRef(arr, ind)]
    esac
  esac
}


fun eval (c@[s, w], expr) {
  case expr of
      Assn (e1, e2) -> case eval(c, e2) of
        [c1, value] -> case eval(c1, e1) of
            [[s, w], ElemRef (arr, ind)] -> arr[ind] := value; [[s, w], value]
          | [[s1, w1], refName] -> [[s1 <- [refName, value], w1], value]
        esac
      esac
    | Seq (e1, e2) -> case eval(c, e1) of
      [c1, _] -> eval(c1, e2)
    esac
    | Skip -> [c, Void]
    | If (e, e1, e2) -> case eval(c, e) of
      [c1, res] -> if (res != 0) then eval(c1, e1) else eval(c1, e2) fi
    esac
    | While (e, e1) -> case eval(c, e) of
      [c1, res] -> if (res) then eval(c1, Seq(e1, While(e, e1))) else [c1, Void] fi
    esac
    | DoWhile (e1, e) -> eval(c, Seq(e1, While (e, e1)) )
    | Var (st) -> [c, lookup(s, st)]
    | Ref (st) -> [c, st]
    | Const (n) -> [c, n]
    | Binop (st, e1, e2) -> case eval(c, e1) of
      [c1, res1] -> case eval(c1, e2) of
        [c2, res2] -> [c2, evalOp(st, res1, res2)]
      esac
    esac
    | Ignore (e) -> case eval(c, e) of
      [c1, _] -> [c1, Void]
    esac
    | Scope (defs, expr) -> case enterScope(s) of
      s1 -> case addNamesAndFuns(s1, defs) of
        s2 -> case eval([s2, w], expr) of
          [[s3, w1], res] -> [[leaveScope(s3), w1], res]
        esac
      esac
    esac
    | Call (name, args) -> evalCall(c, name, args)
    | Elem (arrExpr, indExpr) -> evalElem(c, arrExpr, indExpr)
    | ElemRef (arrExpr, indExpr) -> evalElemRef(c, arrExpr, indExpr)
    | Array (exprs) -> case evalList(c, exprs) of
      [c, vals] -> [c, listArray(vals)]
    esac
    | Sexp (tag, exprs) -> case evalList(c, exprs) of
      [c, vals] -> [c, Sexp(tag, listArray(vals))]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}