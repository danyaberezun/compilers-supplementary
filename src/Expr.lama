-- Expression evaluator

import List;
import State;

public fun evalBinop (op, lhs, rhs) {
     case op of
       "+"  -> lhs + rhs
     | "-"  -> lhs - rhs
     | "*"  -> lhs * rhs
     | "/"  -> lhs / rhs
     | "%"  -> lhs % rhs
     | "<"  -> lhs < rhs
     | ">"  -> lhs > rhs
     | "<=" -> lhs <= rhs
     | ">=" -> lhs >= rhs
     | "==" -> lhs == rhs
     | "!=" -> lhs != rhs
     | "&&" -> lhs && rhs
     | "!!" -> lhs !! rhs
     esac
  }

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var   (varName)      -> st (varName)
  | Const (value)        -> value
  | Binop (op, lhs, rhs) -> evalBinop (op, evalExpr (st, lhs), evalExpr (st, rhs))
  esac
}
