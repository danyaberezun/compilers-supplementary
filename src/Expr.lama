-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addNamesAndFuns (state, defs) {
  foldl (fun (state, def) {
    case def of
        Var(name) -> state.addNames(name)
      | Fun(name, args, body) -> state.addFunction(name, args, body)
    esac
  }, state, defs)
}

fun addArgs (state, names, values) {
  foldl (fun (s, [name, value]) {s.addName(name, value)}, state, zip(names, values))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addNamesAndValues (state, names, values) {
  foldl (fun (s, [name_, value_])
    { s.addName (name_, Val(value_)) },
    state, zip(names, values)
  )
}

fun evalSkip(c) { [c, None] }

fun evalRef(c, x) { [c, Ref(x)] }

fun evalConst(c, x) { [c, x] }

fun evalString(c, s) { [c, s] }

fun evalVar(c@[st, w], interpr) {
  let Val(v) = lookupVal(st, interpr) in ([c, v])
}

fun evalBinop(c, op, exp1, exp2) {
  let [new_c, {left, right}] = evalList(c, {exp1, exp2}) in
    [new_c, evalOp(op, left, right)]
}

fun evalSeq(c, exp1, exp2) {
  let [new_c, {_, right}] = evalList(c, {exp1, exp2}) in
    [new_c, right]
}

fun evalIf(c, cond, exp1, exp2) {
  let [new_c, cond_res] = eval(c, cond) in
    eval(new_c, if cond_res then exp1 else exp2 fi)
}

fun evalAssn(c@[st, w], exp1, exp2) {
  let [[new_s, new_w], {u, v}] = evalList(c, {exp1, exp2}) in
    case u of
      Ref(x) -> lookupVal(st, x); [[new_s <- [x, Val(v)], new_w], v]
    | ElemRef(x@#array, i@#val) -> x[i] := v; [[new_s, new_w], v]
    | ElemRef(x@#str, i@#val) -> x[i] := v; [[new_s, new_w], v]
    | ElemRef(Sexp(_, args), i@#val) -> args[i] := v; [[new_s, new_w], v]
    esac
}

fun evalWhile(c, cond, exp) {
  let [new_c, k] = eval(c, cond) in
    if k == 0 then [new_c, None]
    else eval(new_c, Seq(exp, While(cond, exp)))
    fi
}

fun evalDoWhile(c, exp, cond) {
  let [new_c, _] = eval(c, exp) in
    eval(new_c, While(cond, exp))
}

fun evalIgnore(c, exp) {
  let [new_c, _] = eval(c, exp) in [new_c, None]
}

fun evalDefs(st, dfns) {
  foldl(fun (st, def) {
          case def of
            Var (ds_) -> addNames (st, ds_) |
            Fun (name_, args_, body_) -> addFunction (st, name_, args_, body_)
          esac
        },
        st,
        dfns)
}

fun evalScope(c@[st, w], dfns, exp) {
  let [[st1, w1], v] = eval([evalDefs(enterScope(st), dfns), w], exp) in
    [[leaveScope(st), w], v]
}

fun evalCall(c@[st, w], name, args) {
  var f = lookupFun(st, name);
  let Fun(f_args, body) = f in
    let [[st2, w2], vs] = evalList(c, args) in
      let [[new_s, w3], v] = eval([addNamesAndValues(enterFunction(st, "expr"), f_args, vs), w2], body) in
        [[leaveFunction(st, getGlobal(new_s)), w3], v]
}

fun evalArray(c, exps) {
  let [[new_s, new_w], vs] = evalList(c, exps) in [[new_s, new_w], listArray(vs)]
}

fun evalSexp(c, name, exps) {
  let [[new_s, new_w], vs] = evalList(c, exps) in [[new_s, new_w], Sexp(name, listArray(vs))]
}

fun evalElem(c, e_array, e_index) {
  let [[new_s, new_w], {u, v_index@#val}] = evalList(c, {e_array, e_index}) in
    case u of
      v_array@#array -> [[new_s, new_w], v_array[v_index]]
    | v_array@#str -> [[new_s, new_w], v_array[v_index]]
    | Sexp(name, v_args) -> [[new_s, new_w], v_args[v_index]]
    esac
}

fun evalElemRef(c, e_array, e_index) {
  let [c1, {v_array, v_index}] = evalList(c, {e_array, e_index}) in
    [c1, ElemRef(v_array, v_index)]
}

fun evalBuiltinCall(c@[st, w], name, exps) {
  let [[new_s, w1], vs] = evalList(c, exps) in
    let [v, w2] = evalBuiltin(name, vs, w1) in
      [[new_s, w2], v]
}

fun eval (c@[st, w], expr) {
  case expr of
    Skip -> evalSkip(c)
  | Ref(x) -> evalRef(c, x)
  | Const(x) -> evalConst(c, x)
  | String(s) -> evalString(c, s)
  | Binop(x, exp1, exp2) -> evalBinop(c, x, exp1, exp2)
  | Var(interpr) -> evalVar(c, interpr)
  | Seq(exp1, exp2) -> evalSeq(c, exp1, exp2)
  | If(cond, exp1, exp2) -> evalIf(c, cond, exp1, exp2)
  | Assn(exp1, exp2) -> evalAssn(c, exp1, exp2)
  | While(cond, exp) -> evalWhile(c, cond, exp)
  | DoWhile(exp, cond) -> evalDoWhile(c, exp, cond)
  | Ignore(exp) -> evalIgnore(c, exp)
  | Scope(dfns, exp) -> evalScope(c, dfns, exp)
  | Call(name, args) -> evalCall(c, name, args)
  | Array(exps) -> evalArray(c, exps)
  | Sexp(name, exps) -> evalSexp(c, name, exps)
  | Elem(e_array, e_index) -> evalElem(c, e_array, e_index)
  | ElemRef(e_array, e_index) -> evalElemRef(c, e_array, e_index)
  | Builtin(name, exps) -> evalBuiltinCall(c, name, exps)
  esac
}



-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}