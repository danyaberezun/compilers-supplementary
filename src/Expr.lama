-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable (%s)", name, state.lookup (name).string), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

fun addNamesWithValues (state, names, values) {
  foldl (fun (s, [name, v]) {s.addName (name, Var (v))}, state, zip(names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs(st, defs) {
  foldl(fun (st, def) {
    case def of
     Var(ds) -> addNames(st, ds)
     | Fun(name, args, body) -> addFunction(st, name, args, body)
    esac
  }, st, defs)
}

fun evalVar ([st, w], x) {
  checkVar(st, x);
  case lookup(st, x) of
    Var (v) -> [[st, w], v]
  esac
}

fun evalConst (c, v) {
  [c, v]
}

fun evalBinop (c, op, e1, e2) {
  case evalList(c, {e1, e2}) of
    [new_c, {v1, v2}] -> [new_c, evalOp(op, v1, v2)]
  esac
}

fun evalAssn (c@[st, w], e1, e2) {
  case evalList(c, {e1, e2}) of
    [[new_st, new_w], {Ref(x), v2}] ->
      checkVar(st, x);
      [[new_st <- [x, Var(v2)], new_w], v2]
  esac
}


fun evalSeq (c, e1, e2) {
  case eval(c, e1) of
    [new_c, _] -> eval(new_c, e2)
  esac
}


fun evalSkip (c) {
  [c, 0]
}


fun evalRead (c@[st, w], x) {
  checkVar(st, x);
  case readWorld(w) of
    [v, new_w] -> [[st <- [x, Var(v)], new_w], 0]
  esac
}

fun evalWrite (c, e) {
  case eval(c, e) of
    [[new_st, new_w], v] -> [[new_st, writeWorld(v, new_w)], 0]
  esac
}

fun evalIf (c, e1, e2, e3) {
  case eval(c, e1) of
    [new_c, 0] -> eval(new_c, e3)
  | [new_c, _] -> eval(new_c, e2)
  esac
}

fun evalWhile (c, e1, e2) {
  case eval(c, e1) of
    [new_c, 0] -> [new_c, 0]
  | [new_c, _] -> case eval(new_c, e2) of
                    [body_c, 0] -> eval(body_c, While (e1, e2))
                  esac
  esac
}

fun evalDoWhile (c, e1, e2) {
  eval(c, Seq(e1, While(e2, e1)))
}

fun evalRef (c, x) {
  [c, Ref(x)]
}

fun evalIgnore (c, e) {
  case eval(c, e) of
    [new_c, _] -> [new_c, 0]
  esac
}


fun evalScope (c@[st, w], defs, expr) {
  case eval([evalDefs(enterScope(st), defs), w], expr) of
    [[st, w], v] -> [[leaveScope(st), w], v]
  esac
}

fun evalCall (c@[st, w], name, args) {
  var f = lookup(st, name);
  checkFun(st, name);
  case f of
    Fun(fArgs, body) ->
      case evalList(c, args) of
        [[st, w], vals] ->
          case eval([addNamesWithValues(enterFunction(st), fArgs, vals), w], body) of
            [[newSt, w], v] -> [[leaveFunction(st, getGlobal(newSt)), w], v]
          esac
      esac
  esac
}

fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval(c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs(st, defs) {
  foldl(fun (st, def) {
    case def of
     Var(ds) -> addNames(st, ds)
     | Fun(name, args, body) -> addFunction(st, name, args, body)
    esac
  }, st, defs)
}


fun eval (c, expr) {
  case expr of
    Var (x)             -> evalVar(c, x)
  | Const (v)           -> evalConst(c, v)
  | Binop (op, l, r)    -> evalBinop(c, op, l, r)
  | Assn (e1, e2)       -> evalAssn(c, e1, e2)
  | Seq (e1, e2)        -> evalSeq(c, e1, e2)
  | Skip                -> evalSkip(c)
  | Read (x)            -> evalRead(c, x)
  | Write (e)           -> evalWrite(c, e)
  | If (e1, e2, e3)     -> evalIf(c, e1, e2, e3)
  | While (e1, e2)      -> evalWhile(c, e1, e2)
  | DoWhile (e1, e2)    -> evalDoWhile(c, e1, e2)
  | Ref (x)             -> evalRef(c, x)
  | Ignore (e)          -> evalIgnore(c, e)
  | Scope (defs, e)     -> evalScope(c, defs, e)
  | Call (name, args)   -> evalCall(c, name, args)
  | _                   -> failure ("Error. Unknown expression!\n")
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
