-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some(f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration(if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn(string, expr)       |
--        Seq(expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)
--
-- A definition is either a local variable definition or a function
-- definition:
--
-- def = Var (string list)                |
--       Fun (string, string list, expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar(state, name) {
  case state.lookup(name) of
    Var(_) -> skip
  | _       -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun(state, name) {
  case state.lookup(name) of
    Fun(_, _) -> skip
  | _          -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun(s, name) {s.addName(name, Var(0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun([c, vals], e) {
                case eval(c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[s, w], expr) {
    case expr of
          Assn(x, e) -> let [[s, w], {Ref(x), Val(v)}] = evalList(c, {x, e}) in [[s <- [x, Val(v)], w], Val(v)]
        | Seq(e1, e2) -> let [c, _] = eval(c, e1) in eval(c, e2)
        | Skip -> [c, Bottom]
        | Read(x) ->  let [v, w] = readWorld(w) in [[s <- [x, Val(v)], w], Bottom] 
        | Write(e) -> let [[s, w], Val(v)] = eval(c, e) in [[s, writeWorld(v, w)], Bottom]
        | If(con, t, f) -> let [c, Val(v)] = eval(c, con) in 
                                if v then eval(c, t) else eval(c, f) fi
        | While(con, b) -> let [c, Val(v)] = eval(c, con) in 
                                if v then let [c, _] = eval(c, b) in eval(c, While(con, b)) else [c, Bottom] fi
        | DoWhile(b, con) -> eval(c, Seq(b, While(con, b)))
        | Var(x) -> [c, lookup(s, x)]
        | Ref(x) -> [c, Ref(x)]
        | Const(x) -> [c, Val(x)]
        | Binop(op, l, r) -> let [c, Val(l)] = eval(c, l) in let [c, Val(r)] = eval(c, r) in [c, Val(evalOp(op, l, r))]
        | Ignore(e) -> let [c, _] = eval(c, e) in [c, Bottom]
        | Scope(d, e) -> let s = enterScope(s) in 
            let s = foldl(fun(s, d) {
                case d of
                  Fun(n, a, b) -> addFunction(s, n, a, b)
                | Var(n) -> addNames(s, n)
                esac
                }, s, d) in
            let [[s, w], v] = eval([s, w], e) in [[leaveScope(s), w], v]
        | Call(n, e) -> let [[s1, w], v] = evalList([s, w], e) in
            let Fun(a, b) = lookup(s1, n) in
            let s = enterFunction(s1) in
            let s = foldl(
                fun(s, [x, v]) {
                    addName(s, x, v)
                }, s, zip(a, v)) in 
            let [[s, w], v] = eval([s, w], b) in 
            [[leaveFunction(s1, getGlobal(s)), w], v]
        | _ -> [c, Bottom]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState(), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}