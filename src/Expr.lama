-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (str_var) -> st(str_var)
    | Const (const_val) -> const_val
    | Binop ("+", e1, e2) -> evalExpr (st, e1) + evalExpr (st, e2)
    | Binop ("-", e1, e2) -> evalExpr (st, e1) - evalExpr (st, e2)
    | Binop ("*", e1, e2) -> evalExpr (st, e1) * evalExpr (st, e2)
    | Binop ("/", e1, e2) -> case evalExpr (st, e2) of
                                0 -> failure ("Error. Division by zero!\n")
                                | divisor -> evalExpr (st, e1) / divisor
                              esac
    | Binop ("%", e1, e2) -> case evalExpr (st, e2) of
                                0 -> failure ("Error. Division by zero!\n")
                                | divisor -> evalExpr (st, e1) % divisor
                              esac
    | Binop ("<", e1, e2) -> evalExpr (st, e1) < evalExpr (st, e2)
    | Binop ("<=", e1, e2) -> evalExpr (st, e1) <= evalExpr (st, e2)
    | Binop (">", e1, e2) -> evalExpr (st, e1) > evalExpr (st, e2)
    | Binop (">=", e1, e2) -> evalExpr (st, e1) >= evalExpr (st, e2)
    | Binop ("!!", e1, e2) -> case evalExpr (st, e1) of
                                0 -> case evalExpr (st, e1) of
                                        0 -> 0
                                        | 1 -> 1
                                        | _ -> failure ("Error. e2 in !! is not 0 or 1!\n")
                                      esac
                                | 1 -> case evalExpr (st, e1) of
                                        0 -> 1
                                        | 1 -> 1
                                        | _ -> failure ("Error. e2 in !! is not 0 or 1!\n")
                                      esac
                                | _ -> failure ("Error. e1 in !! is not 0 or 1!\n")
                              esac
    | Binop ("&&", e1, e2) -> case evalExpr (st, e1) of
                                0 -> case evalExpr (st, e1) of
                                        0 -> 0
                                        | 1 -> 0
                                        | _ -> failure ("Error. e2 in && is not 0 or 1!\n")
                                      esac
                                | 1 -> case evalExpr (st, e2) of
                                        0 -> 0
                                        | 1 -> 1
                                        | _ -> failure ("Error. e2 in && is not 0 or 1!\n")
                                      esac
                                | _ -> failure ("Error. e1 in && is not 0 or 1!\n")
                              esac
    | Binop ("!=", e1, e2) -> evalExpr (st, e1) != evalExpr (st, e2)
    | Binop ("==", e1, e2) -> evalExpr (st, e1) == evalExpr (st, e2)
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}
