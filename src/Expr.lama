-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun evalBinop(op, left_arg, right_arg) {
    case op of
      "+"  -> left_arg + right_arg |
      "-"  -> left_arg - right_arg |
      "*"  -> left_arg * right_arg |
      "/"  -> left_arg / right_arg |
      "%"  -> left_arg % right_arg |
      "<"  -> left_arg < right_arg |
      ">"  -> left_arg > right_arg |
      "<=" -> left_arg <= right_arg |
      ">=" -> left_arg >= right_arg |
      "==" -> left_arg == right_arg |
      "!=" -> left_arg != right_arg |
      "&&" -> left_arg && right_arg |
      "!!" -> left_arg !! right_arg
    esac
}

fun eval (c@[state, world], expr) {
  case expr of
    Var (x) -> [c, state(x)] |
    Const (n) -> [c, n] |
    Skip -> [c, 0] |
    Ref (x) -> [c, Ref(x)] |
    Ignore (exp) ->  let [new_c, _] = eval(c, exp) in [new_c, 0] |
    Binop (s, exp1, exp2) -> let [new_c, {v1, v2}] = evalList(c, {exp1, exp2}) in [new_c, evalOp(s, v1, v2)] |
    Assn (exp1, exp2) -> let [[new_state, new_world], {Ref(x), v2}] = evalList(c, {exp1, exp2}) in [[new_state <- [x, v2], new_world], v2] |
    Seq (exp1, exp2) -> let [new_c, _] = eval(c, exp1) in eval(new_c, exp2) |
    Read (x) -> let [v, new_world] = readWorld(world) in [[state <- [x, v], new_world], 0] |
    Write (exp) -> let [[new_state, new_world], v] = eval(c, exp) in [[new_state, writeWorld(v, new_world)], 0] |
    If (exp1, exp2, exp3) -> let [new_c, v] = eval(c, exp1) in eval(new_c, if v != 0 then exp2 else exp3 fi) |
    While (exp1, exp2) -> let [new_c, v] = eval(c, exp1) in (
                            if v == 0
                            then [new_c, 0]
                            else let [body, 0] = eval(new_c, exp2) in eval(body, While(exp1, exp2))
                            fi
                          ) |
    DoWhile (exp1, exp2) -> eval(c, Seq(exp1, While(exp2, exp1)))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
