-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
   case expr of
      Var   (name)             -> st(name)
    | Const (value)            -> value
    | Binop (op, expr1, expr2) -> let [l, r] = [evalExpr(st, expr1), evalExpr(st, expr2)] in 
         case op of
            "+"  -> l + r
          | "-"  -> l - r
          | "*"  -> l * r
          | "/"  -> l / r
          | "%"  -> l % r
          | "==" -> l == r
          | "!=" -> l != r
          | "<"  -> l < r
          | ">"  -> l > r
          | "<=" -> l <= r
          | ">=" -> l >= r
          | "&&" -> l && r
          | "!!" -> l !! r
            esac
      esac
}
