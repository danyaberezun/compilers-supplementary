-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp(op, l, r) {
  case assoc(ops, op) of
    Some(f) -> f(l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration(if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn(string, expr)       |
--        Seq(expr, expr)         |
--        Skip                         |
--        if(expr, expr, expr)   |
--        While(expr, expr)         |
--        DoWhile(expr, expr)         |
--        Var(string)             |
--        Ref(string)             |
--        Const(int)                |
--        Binop(string, expr, expr) |
--        Call(string, expr list)  |
--        Ignore(expr)               |
--        String(string)             |
--        Array(expr list)          |
--        Elem(expr, expr)         |
--        ElemRef(expr, expr)         |
--        Sexp(string, expr list)  |
--        Builtin(string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal(state, name) {
  case state.lookup(name) of
    x@Val(_) -> x
  | _         -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun(state, name) {
  case state.lookup(name) of
    x@Fun(_, _) -> x
  | _            -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames(state, names) {
  foldl(fun(s, name) {s.addName(name, Val(0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction(state, name, args, body) {
  state.addName(name, Fun(args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList(c, exprs) {
  case foldl(fun([c, vals], e) {
                case eval(c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse(vals)]
  esac
}

fun eval(c@[s, w], expr) {
    case expr of
          Assn(e1, e2) -> let [[s, w], {u, v}] = evalList(c, {e1, e2}) in
            case u of
                  Ref(x) -> lookupVal(s, x); [[s <- [x, Val(v)], w], v]
                | ElemRef(x@#array, i@#val) -> x[i] := v; [[s, w], v]
                | ElemRef(x@#str, i@#val) -> x[i] := v; [[s, w], v]
                | ElemRef(Sexp(_, a), i@#val) -> a[i] := v; [[s, w], v]
            esac
        | Seq(e1, e2) -> let [c, _] = eval(c, e1) in eval(c, e2)
        | Skip -> [c, Bottom]
        | If(con, t, f) -> let [c, v] = eval(c, con) in 
            if v then eval(c, t) else eval(c, f) fi
        | While(con, b) -> let [c, v] = eval(c, con) in 
            if v then let [c, _] = eval(c, b) in eval(c, While(con, b)) else [c, Bottom] fi
        | DoWhile(b, con) -> eval(c, Seq(b, While(con, b)))
        | Var(x) -> let Val(v) = lookupVal(s, x) in [c, v]
        | Ref(x) -> [c, Ref(x)]
        | Const(x) -> [c, x]
        | String(x) -> [c, x]
        | Binop(op, l, r) -> let [c, l] = eval(c, l) in let [c, r] = eval(c, r) in [c, evalOp(op, l, r)]
        | Ignore(e) -> let [c, _] = eval(c, e) in [c, Bottom]
        | Scope(d, e) -> let s = foldl(fun(s, def) {
            case def of
              Fun(n, a, b) -> addFunction(s, n, a, b)
            | Var(n) -> addNames(s, n)
            esac
            }, enterScope(s), d) in
            let [[s, w], v] = eval([s, w], e) in [[leaveScope(s), w], v]
        | Call(f, a) -> let [[s1, w], v] = evalList([s, w], a) in
            let Fun(args, b) = lookupFun(s, f) in
            case b of 
                  External -> let [res, w] = evalBuiltin(f, v, w) in [[s, w], res]
                | _ -> let s = enterFunction(s1) in
                    let s = foldl(fun(s, [a, v]) {
                        addName(s, a, Val(v))
                    }, s, zip(args, v)) in 
                    let [[s, w], v] = eval([s, w], b) in 
                    [[leaveFunction(s1, getGlobal(s)), w], v]
            esac
        | Array(e) -> let [[s, w], vs] = evalList(c, e) in [[s, w], listArray(vs)]
        | Sexp(n, e) -> let [[s, w], vs] = evalList(c, e) in [[s, w], Sexp(n, listArray(vs))]
        | Elem(a, b) -> let [[s, w], {u, i@#val}] = evalList(c, {a, b}) in 
            case u of
                  a@#array -> [[s, w], a[i]]
                | a@#str -> [[s, w], a[i]]
                | Sexp(_, a) -> [[s, w], a[i]]
            esac
        | ElemRef(a, b) -> let [c, {a, b}] = evalList(c, {a, b}) in [c, ElemRef(a, b)]
        | Builtin(n, e) -> let [[s, w], v] = evalList(c, e) in 
            let [v, w] = evalBuiltin(n, v, w) in 
            [[s, w], v]
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr(input, expr) {
  case eval([emptyState().enterScope.addName("read",   Fun({}, External))
                                      .addName("write",  Fun({"a"}, External))
                                      .addName("length", Fun({"a"}, External)), createWorld(input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
