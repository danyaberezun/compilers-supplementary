-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Sexp    (string, expr list)  |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

fun addNamesAndValues (state, names, values) {
  foldl (fun (s, [name_, value_]) { addName (s) (name_, Val (value_)) }, state, zip (names, values))
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, vl] -> [c, vl : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun evalDefs (s, defs) {
  foldl (fun (s, def) {
    case def of
      Var (ds) -> addNames (s, ds)
    | Fun (name, args, body) -> addFunction (s, name, args, body)
    esac
  }, s, defs)
}

fun eval (c@[s, w], expr) {
  --printf ("Expr.eval %s\n", expr.string);
  case expr of
    Assn (lhs, rhs) ->
      case evalList (c, {lhs, rhs}) of
        [[s, w], {Ref (x), value}] -> lookupVal (s, x); [[s <- [x, Val (value)], w], value]
      | [[s, w], {ElemRef (x@#array, i@#val), value}] -> x[i] := value; [[s, w], value]
      | [[s, w], {ElemRef (x@#str, i@#val), value}] -> x[i] := value; [[s, w], value]
      | [[s, w], {ElemRef (Sexp (_, args), i@#val), value}] -> args[i] := value; [[s, w], value]
      esac
  | Seq (e1, e2) ->
      case eval (c, e1) of 
        [c, value] -> [c, e2]
      esac
  | Skip -> [c, 0]
  | If (condE, thenE, elseE) ->
      case eval (c, condE) of 
        [c, 0] -> eval (c, elseE)
      | [c, _] -> eval (c, thenE)
      esac
  | While (condE, bodyE) ->
      case eval (c, condE) of 
        [c, 0] -> [c, 0]
      | [c, _] -> case eval (c, bodyE) of 
                    [body, 0] -> eval (body, While (condE, bodyE)) 
                  esac 
      esac
  | DoWhile (bodyE, condE) -> eval (c, Seq (bodyE, While (condE, bodyE)))
  | Var (identifier) -> case lookupVal (s, identifier) of 
                          Val (v) -> [c, v]
                        esac
  | Ref (v) -> [c, Ref (v)]
  | Const (n) -> [c, n]
  | Binop (op, lhsE, rhsE) ->
      case evalList (c, {lhsE, rhsE}) of 
        [c, {l, r}] -> [c, evalOp (op, l, r)]
      esac
  | Scope (defs, bodyE) ->
      var s1 = evalDefs (enterScope (s), defs);
      case eval ([s1, w], bodyE) of 
        [[s, w], value] ->  [[leaveScope (s), w], value]
      esac
  | Call (name, args) ->
      var fn = lookupFun (s, name);
      case fn of
        Fun (fnArgs, body) -> case evalList (c, args) of [[s, w], values] -> case eval ([addNamesAndValues (enterFunction (s, "expr"), fnArgs, values), w], body) of
                                [[new_s, w], v] -> [[leaveFunction (s, getGlobal(new_s)), w], v]
                              esac esac
      esac
  | Ignore (e) ->
      case eval (c, e) of 
        [c, _] -> [c, 0]
      esac
  | String (s) -> [c, s]
  | Array (exprList) ->
      case evalList (c, exprList) of 
        [c, values] -> [c, listArray (values)]
      esac
  | Sexp (uident, exprList) ->
      case evalList (c, exprList) of 
        [c, values] -> [c, Sexp (uident, listArray (values))]
      esac
  | Elem (e_container, e_index) ->
      case evalList (c, {e_container, e_index}) of 
        [c, {vArray@#array, vIndex@#val}] -> [c, vArray[vIndex]]
      | [c, {vArray@#str, vIndex@#val}] -> [c, vArray[vIndex]]
      | [c, {Sexp (name, vArgs), vIndex@#val}] -> [c, vArgs[vIndex]]
      esac
  | ElemRef (e_container, e_index) ->
      case evalList (c, {e_container, e_index}) of 
        [c, {container, index}] -> [c, ElemRef (container, index)]
      esac
  | Builtin(uident, exprList) ->  case evalList (c, exprList) of [[s, w], values] -> case evalBuiltin (uident, values, w) of
                                    [v, w] -> [[s, w], v]
                                  esac esac
  | _ -> failure ("AST ain't well-formed\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}