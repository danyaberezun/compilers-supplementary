-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun applyBinop (op, i1, i2) {
  case op of
    "+"  -> i1 + i2
  | "-"  -> i1 - i2
  | "*"  -> i1 * i2
  | "/"  -> i1 / i2
  | "%"  -> i1 % i2
  | "==" -> i1 == i2
  | "!=" -> i1 != i2
  | "<"  -> i1 < i2
  | ">"  -> i1 > i2
  | "<=" -> i1 <= i2
  | ">=" -> i1 >= i2
  | "&&" -> i1 && i2
  | "!!" -> i1 !! i2
  esac
}

public fun evalExpr (st, expr) {
  case expr of
    Var (x)            -> st (x)
  | Const (i)          -> i
  | Binop (op, e1, e2) -> applyBinop (op, evalExpr (st, e1), evalExpr (st, e2))
  esac
}
