-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
   case expr of
      Var (x) -> st (x)
   |  Const (x) -> x   
   |  Binop (s, lexpr, rexpr) ->
         var lx = evalExpr(st, lexpr);
         var rx = evalExpr(st, rexpr);
         case s of 
            "+" -> lx + rx    
         |  "-" -> lx - rx    
         |  "*" -> lx * rx    
         |  "/" -> lx / rx    
         |  "%" -> lx % rx    
         |  "<" -> lx < rx    
         |  ">" -> lx > rx    
         |  "<=" -> lx <= rx  
         |  ">=" -> lx >= rx  
         |  "==" -> lx == rx  
         |  "!=" -> lx != rx  
         |  "&&" -> lx && rx  
         |  "!!" -> lx !! rx
         esac
   esac
}