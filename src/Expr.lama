-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Var (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[s, w], expr) {
    case expr of 
    Var (x) -> [c, s (x)]
    | Ignore (e) -> [eval(c, e) [0], 0]
    | Const (n) -> [c, n]
    | Assn (l, r) -> 
      case evalList(c, {l, r}) of 
        [[s, w], {Ref (lv), rv}] -> [[s <- [lv, rv], w], rv]
      esac
    | Seq (e1, e2) -> 
      case eval(c, e1) of
        [c1, v1] -> eval(c1, e2)
      esac
    | Ref (x) -> [c, Ref (x)]
    | Skip -> [c, 0]
    | Read (varname) -> case readWorld(c[1]) of [res, w] -> [[(c[0] <- [varname, res]), w], 0] esac
    | Write (expr1) -> 
      case eval(c, expr1) of 
        [c1, e] -> [[c1[0], writeWorld(e, c[1])], 0]
      esac
    | Binop (op, l, r) -> 
      case evalList(c, {l, r}) of 
        [c1, {lv, rv}] -> [c1, evalOp(op, lv, rv)]
      esac
    | While (cond, s) -> 
      case eval(c, cond) of 
        [c1, 0] -> [c1, 0]
        | [c1, _] -> 
          case eval(c1, s) of
            [c2, _] -> eval(c2, While (cond, s))
          esac
      esac
    | DoWhile (s, cond) -> eval(c, Seq(s, While (cond, s)))
    | If (cond, t, f) -> 
      case eval(c, cond) of
        [c1, 0] -> eval(c1, f)
        | [c1, _] -> eval(c1, t)
      esac
    | Call(f, arg) ->
      let [[sa, new_w], x] = evalList(c, arg) in (
        let Fun(arg, body) = lookup(sa, f) in (
          let new_s = foldl(fun(st, [name, vl]) {addName(st, name, vl)}, enterFunction(sa), zip(arg, x)) in (
            let [[new_s2, new_w2], res] = eval([new_s, new_w], body) in [[leaveFunction(sa, getGlobal(new_s2)), new_w2], res] 
          )
        )
      )
    | Scope(defs, body) ->
      let [[new_s, new_w], x] = eval(
      [foldl(fun(s, def) {
        case def of 
          Var(names) -> addNames(s, names) |
          Fun(name, arg, body) -> addFunction(s, name, arg, body)         
        esac    
        }, enterScope(s), defs) , w], body
      ) in [[leaveScope(new_s), new_w], x]
  esac
}
(* End *)

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}