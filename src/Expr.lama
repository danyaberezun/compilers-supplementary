-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(st, x, y) {
   case st of
        "+" -> x + y
      | "-" -> x - y
      | "*" -> x * y
      | "/" -> x / y
      | "%" -> x % y
      | "<" -> x < y
      | "<=" -> x <= y
      | ">" -> x > y
      | ">=" -> x >= y
      | "==" -> x == y
      | "!=" -> x != y
      | "&&" -> x && y
      | "!!" -> x !! y
   esac
}

public fun evalExpr (st, expr) {
   case st of
      Var (name) -> st (name)
      | Const (int) -> int
      | Binop (op, x, y) -> evalBinop(op, evalExpr(st, x), evalExpr(st, y))
   esac
}
