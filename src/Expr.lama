-- Expression evaluator
import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalBinop(operation, op1, op2) {
   case operation of
      "+" -> op1 + op2
   |  "-" -> op1 - op2
   |  "*" -> op1 * op2
   |  "/" -> op1 / op2
   |  "%" -> op1 % op2
   |  "<" -> op1 < op2
   |  ">" -> op1 > op2
   |  "<=" -> op1 <= op2
   |  ">=" -> op1 >= op2
   |  "==" -> op1 == op2
   |  "!=" -> op1 != op2
   |  "&&" -> op1 && op2
   |  "!!" -> op1 !! op2
   esac
}

public fun evalExpr (state, expr) {
   case expr of
      Var(var_name) -> state(var_name)
   |  Const(value) -> value
   |  Binop(operation, op1, op2) -> evalBinop(operation, evalExpr(state, op1), evalExpr(state, op2))
   esac
}