-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)
public fun evalExpr (st, expr) {
   case expr of
     Var(lable)      -> st(lable)
   | Const(n)        -> n
   | Binop(op, x, y) -> var fst = evalExpr(st, x);
                        var snd = evalExpr(st, y);
                        
                        case op of
                          "+"  -> fst + snd
                        | "-"  -> fst - snd
                        | "*"  -> fst * snd
                        | "/"  -> fst / snd
                        | "%"  -> fst % snd
                        | "<"  -> fst < snd
                        | ">"  -> fst > snd
                        | "<=" -> fst <= snd
                        | ">=" -> fst >= snd
                        | "==" -> fst == snd
                        | "!=" -> fst != snd
                        | "&&" -> fst && snd
                        | "!!" -> fst !! snd
                        esac
   esac
}