-- Expression evaluator
import List;
import State;

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)


public fun evalBinop(op, v1, v2) {
   case op of
        "+"  -> v1 + v2
      | "-"  -> v1 - v2
      | "*"  -> v1 * v2
      | "/"  -> v1 / v2
      | "%"  -> v1 % v2
      | "<"  -> v1 < v2
      | "<=" -> v1 <= v2
      | ">"  -> v1 > v2
      | ">=" -> v1 >= v2
      | "==" -> v1 == v2
      | "!=" -> v1 != v2
      | "&&" -> v1 && v2
      | "!!" -> v1 !! v2
      esac
}

public fun evalExpr (st, expr) {
   case expr of
     Var(x) -> st(x)
   | Const(n) -> n
   | Binop(op, v1, v2) -> evalBinop(op, evalExpr(st, v1), evalExpr(st, v2))
   esac
}