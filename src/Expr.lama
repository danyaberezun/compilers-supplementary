-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)


-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun assignValues (s, names, values) {
   case names of
      name:tailn -> 
         case values of
            value:tailv -> assignValues (s.addName (name, Val (value)), tailn, tailv)
          | {} -> error ("wrong values count")
         esac
    | {}   -> s
   esac
}

fun addToScope (scope, defs) {
   case defs of
      def:tail ->
         let nScope = case def of
            Fun (fname, args, body) -> addFunction (scope, fname, args, body)
          | Var (names)             -> addNames (scope, names)
         esac in addToScope (nScope, tail)
    | {}       -> scope
   esac
}

fun elem (c, arr, idx) {
   let [c, arr] = eval (c, arr) in
      let [c, i] = eval (c, idx) in 
         let arr = case arr of Sexp (_, a) -> a | _ -> arr esac in [c, arr, i]
}

fun eval (c@[s, w], expr) {
   case expr of
      Var     (name)               -> let Val (x) = lookupVal (s, name) in [c, x]
    | Const   (value)              -> [c, value]
    | Ref     (ref)                -> [c, Ref(ref)]
    | Binop   (op, expr1, expr2)   -> let [c, l] = eval (c, expr1) in
       let [c, r] = eval (c, expr2) in [c, evalOp (op, l, r)]
    | Assn(e1, e2) -> 
       case evalList(c, {e1, e2}) of
          [[st, w], {Ref (x), value}]                    -> lookupVal(s, x); [[st <- [x, Val(value)], w], value]
        | [[st, w], {ElemRef (Sexp (_, arr), i), value}] -> arr[i] := value; [[st, w], value]
        | [[st, w], {ElemRef (arr, i), value}]           -> arr[i] := value; [[st, w], value]
       esac
    | Seq     (expr1, expr2)       -> let [c, _] = eval (c, expr1) in eval (c, expr2)
    | Skip                         -> [c, Void]
    | Read    (expr)               -> let [c, Ref (name)] = eval (c, expr) in
       let [s, w] = c in
          let [value, w] = readWorld (w) in
             [[s <- [name, value], w], Void]
    | Write   (expr)               -> let [c, value] = eval (c, expr) in
       let [s, w] = c in
          [[s, writeWorld (value, w)], Void]
    | If      (cond, expr1, expr2) -> let [c, value] = eval (c, cond) in
       if value then eval (c, expr1) else eval (c, expr2) fi
    | While   (cond, s)            ->
       var value = true;
       while  (value) do
          let [c_, v] = eval (c, cond) in
             value := v;
             c := c_;
             if value then c := eval (c, s)[0] fi
       od;
       [c, Void]
    | DoWhile (s, cond)            -> eval (c, Seq (s, While (cond, s)))
    | Ignore  (expr)               -> let [c, _] = eval (c, expr) in [c, Void]
    | Call    (fname, args)        -> let f@Fun (params, body) = lookupFun (s, fname) in
       let [[s, w], values] = evalList(c, args) in
          case body of
             External -> let [res, w] = evalBuiltin (fname, values, w) in [[s, w], res]
           | _        -> let fs = assignValues (enterFunction (s), params, values) in 
              let [[fs, w], res] = eval ([fs, w], body) in
                 [[leaveFunction (s, getGlobal (fs)), w], res]
      esac
    | Scope   (defs, expr)         -> let s = addToScope (enterScope (s), defs) in
       let [[s, w], e] = eval ([s, w], expr) in [[leaveScope (s), w], e]
    | String  (value)              -> [c, value]
    | Array   (es)              -> let [c, n] = evalList (c, es) in [c, listArray (n)]
    | Elem    (arr, ind)        -> let [c, a, i] = elem (c, arr, ind) in [c, a[i]]
    | ElemRef (ea, ei)          -> let [c, {va, vi}] = evalList(c, {ea, ei}) in [c, ElemRef(va, vi)]
    | Sexp    (t, es)           -> let [c, values] = evalList (c, es) in [c, Sexp (t, listArray (values))]
    | Builtin (name, es)        -> let [c, values] = evalList (c, es) in
       let [value, w] = evalBuiltin (name, values, w) in [[s, w], value]
   esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
