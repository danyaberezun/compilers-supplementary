-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  case insns of 
    head:tail -> 
      case head of
        CONST (x) -> eval(env, [x:stack, state, w], tail)  
        | READ -> let [n, newWorld] = readWorld(w) in eval(env, [n:stack, state, newWorld], tail)   
        | WRITE -> let value:restStack = stack in eval(env, [restStack, state, writeWorld(value, w)], tail) 
        | LD (x) -> eval(env, [state(x):stack, state, w], tail)
        | ST (x) -> let value:restStack = stack in eval(env, [restStack, state <- [x, value], w], tail)
        | BINOP (op) -> let second:first:restStack = stack in
            eval(env, [evalExpr(state, Binop(op, Const(first), Const(second))) : restStack, state, w], tail)       
        | LABEL (l) -> eval(env, c, tail)
        | JMP (l) -> eval(env, c, fromLabel(env, l))
        | CJMP ("nz", l) -> let first:restStack = stack in 
            eval(env, [restStack, state, w], if first == 0 then tail else fromLabel(env, l) fi)
        | CJMP ("z", l) -> let first:restStack = stack in 
            eval(env, [restStack, state, w], if first == 0 then fromLabel(env, l) else tail fi)
      esac
    | {} -> c 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name) -> singletonBuffer(LD (name))
    | Const (value) -> singletonBuffer(CONST (value))
    | Binop (op, left, right) -> compileExpr(left) <+> compileExpr(right) <+ BINOP (op)
  esac  
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        let [s2Lab, env] = env.genLabel in
          let [s2LabUsed, env, s1Code] = compile (s2Lab, env, s1) in
            let [labUsed, env, s2Code] = compile (lab, env, s2) in
              [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
    | If (expr, s1, s2) ->
        let [elseLabel, env] = env.genLabel in
          let [_, env, codeTrueCond] = compile (lab, env, s1) in
            let [_, env, codeFalseCond] = compile (lab, env, s2) in
              [true, env, 
                compileExpr (expr) <+
                CJMP ("z", elseLabel) <+> 
                codeTrueCond <+
                JMP (lab) <+ 
                LABEL (elseLabel) <+> 
                codeFalseCond
              ]
    | While (expr, s) ->
        let [condLabel, bodyLabel, env] = env.genLabels (2) in
          let [_, env, code] = compile (condLabel, env, s) in
            [false, env,
              singletonBuffer (JMP (condLabel)) <+
              LABEL (bodyLabel) <+>
              code <+
              LABEL (condLabel) <+>
              compileExpr (expr) <+
              CJMP ("nz", bodyLabel)
            ]
    
    | DoWhile (s, expr) ->
        let [bodyLabel, env] = env.genLabel in
          let [_, env, code] = compile (bodyLabel, env, s) in
            [false, env,
              label (bodyLabel, true) <+>
              code <+>
              compileExpr (expr) <+
              CJMP ("nz", bodyLabel)
            ]
    | _  -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
