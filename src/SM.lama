-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of 
      {} -> c
      | ST (varname) : t -> case c[0] of top : stT -> eval(env, [top : stT, c[1] <- [varname, top], c[2]], t) esac
      | STI : t -> case c[0] of top : Ref (addr) : stT -> eval(env, [top : stT, c[1] <- [addr, top], c[2]], t) esac
      | CONST (n) : t -> eval(env, [n : c[0], c[1], c[2]], t)
      | BINOP (op) : t -> case c[0] of top : pretop : stT -> eval (env, [evalOp(op, pretop, top) : stT, c[1], c[2]], t) esac
      | READ : t -> case readWorld (c[2]) of [res, w] -> eval (env, [res : c[0], c[1], w], t) esac
      | WRITE : t -> case c[0] of e: stT -> eval (env, [stT, c[1], writeWorld (e, c[2])], t) esac
      | DROP : t -> case c[0] of top : stT -> eval(env, [stT, c[1], c[2]], t) esac
      | LABEL (lbl) : t -> eval(env, c, t)
      | JMP (lbl) : t -> eval(env, c, fromLabel (env, lbl))
      | CJMP (cond, lbl) : t -> case c[0] of top : stT ->
            case cond of 
               "z" -> case top of 
                  0 -> eval(env, [stT, c[1], c[2]], fromLabel (env, lbl)) |
                  _ -> eval(env, [stT, c[1], c[2]], t)
               esac
               | "nz" -> case top of 
                  0 -> eval(env, [stT, c[1], c[2]], t) |
                  _ -> eval(env, [stT, c[1], c[2]], fromLabel (env, lbl)) 
                esac
            esac
      esac
      | LD (varname) : t -> eval(env, [c[1] (varname) : c[0], c[1], c[2]], t)
      | LDA (x) : t -> eval(env, [Ref (x) : c[0], c[1], c[2]], t)
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> case compile(lab, env, e) of 
        [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
      esac
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) -> 
      case env.genLabel of 
        [wlab, env] ->
          case compile (wlab, env, e) of 
            [labUsed, env, code] -> [false, env, code <+> label (wlab, labUsed) <+ WRITE]
          esac
      esac
    | Binop (op, l, r) -> case env.genLabels(2) of 
      [llabel, rlabel, env] -> case compile(llabel, env, l) of 
        [luse, env, lcode] -> case compile(rlabel, env, r) of 
          [ruse, env, rcode] -> [false, env, lcode <+> label(llabel, luse) <+> rcode <+> label(rlabel, ruse) <+ BINOP(op)]
          esac
        esac
      esac
    | Assn  (x, e) ->
      case env.genLabels(2) of 
        [xlab, elab, env] -> 
          case compile(xlab, env, x) of 
            [xlabUsed, env, codeX] -> 
              case compile(elab, env, e) of 
                [elabUsed, env, codeE] -> [false, env, codeX <+> label(xlab, xlabUsed)
                 <+> codeE <+> label (elab, elabUsed) <+ STI]
              esac
          esac 
      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) -> case env.genLabels(2) of 
         [lblCond, lblE, env] -> case env.genLabel of 
            [lblS, env] -> case compile(lblCond, env, e) of
              [lblCondUsed, env, codeCond] -> case compile(lblE, env, s) of 
                [lblUse, env, sCode] -> [
                    false, env,
                    singletonBuffer(JMP(lblE)) <+ LABEL (lblS) <+> sCode <+ LABEL (lblE) <+> codeCond <+> label (lblCond, lblCondUsed) <+ CJMP ("nz", lblS)]
              esac
            esac
         esac
      esac
    | DoWhile (s, e) -> case env.genLabels(2) of
         [lblCond, lblE, env] -> case env.genLabel of 
            [lblS, env] -> case compile(lblE, env, s) of 
               [lblUse, env, sCode] -> case compile(lblCond, env, e) of
                [lblCondUsed, env, codeCond] -> [
                    false, env,  
                      singletonBuffer(LABEL (lblS)) <+> sCode <+ LABEL (lblE) <+> codeCond <+> label(lblCond, lblCondUsed) <+ CJMP ("nz", lblS)
                ]
              esac
            esac
         esac
      esac
    | If (e, s1, s2) -> case env.genLabels(2) of 
          [elabel, elseLbl, env] -> case compile(elabel, env, e) of
            [elabelUsed, env, ecode] -> case compile (lab, env, s1) of 
              [_, env, s1Code] -> case compile(lab, env, s2) of 
                  [_, env, s2Code] -> [
                    true, env,
                      ecode <+> label (ecode, elabelUsed) <+ CJMP ("z", elseLbl) <+> s1Code <+ JMP (lab) <+ LABEL (elseLbl) <+> s2Code <+ JMP (lab)]
                  esac
              esac         
            esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}