-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
   case insns of
      {} -> [stack, state, world]
   |  head:tail -> 
      case head of
         READ -> case readWorld(world) of [v, w] -> eval ([v:stack, state, w], tail) esac
      |  WRITE -> case stack of v:rest -> eval ([rest, state, writeWorld(v, world)], tail) esac
      |  BINOP (s) -> case stack of rx:lx:rest ->
            var res = case s of 
                  "+" -> lx + rx    
               |  "-" -> lx - rx    
               |  "*" -> lx * rx    
               |  "/" -> lx / rx    
               |  "%" -> lx % rx    
               |  "<" -> lx < rx    
               |  ">" -> lx > rx    
               |  "<=" -> lx <= rx  
               |  ">=" -> lx >= rx  
               |  "==" -> lx == rx  
               |  "!=" -> lx != rx  
               |  "&&" -> lx && rx  
               |  "!!" -> lx !! rx
            esac;
            eval([res:rest, state, world], tail)
         esac
      |  LD (x) -> eval([state (x):stack, state, world], tail)
      |  ST (x) -> case stack of v:rest -> eval ([stack, state <- [x, v], world], tail) esac
      |  CONST (x) -> eval ([x:stack, state, world], tail)
      esac
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var (x) -> singletonBuffer(LD (x))
   |  Const (x) -> singletonBuffer(CONST (x))
   |  Binop (s, lexpr, rexpr) -> compileExpr(lexpr) <+> compileExpr(rexpr) <+ {BINOP(s)}
   esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
      Assn (st, expr) -> compileExpr(expr) +++ {ST(st)}
   |  Seq (lst, rst) -> compileSM (lst) +++ compileSM (rst)
   |  Skip -> []
   |  Read (st) -> { READ, ST(st)}
   |  Write (expr) -> compileExpr(expr) +++ {WRITE}
   esac
}
