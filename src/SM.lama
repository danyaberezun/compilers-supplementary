-- Stack machine.

import Array;
import Array;
import List;
import Fun;
import Collection;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
   case insns of
      {} -> c
   |  head:tail -> 
      case head of
         READ -> case readWorld(world) of [v, w] -> eval (env, [v:stack, state, w], tail) esac
      |  WRITE -> case stack of v:rest -> eval (env, [rest, state, writeWorld(v, world)], tail) esac
      |  BINOP (s) -> case stack of rx:lx:rest ->
            var res = case s of 
                  "+" -> lx + rx    
               |  "-" -> lx - rx    
               |  "*" -> lx * rx    
               |  "/" -> lx / rx    
               |  "%" -> lx % rx    
               |  "<" -> lx < rx    
               |  ">" -> lx > rx    
               |  "<=" -> lx <= rx  
               |  ">=" -> lx >= rx  
               |  "==" -> lx == rx  
               |  "!=" -> lx != rx  
               |  "&&" -> lx && rx  
               |  "!!" -> lx !! rx
            esac;
            eval(env, [res:rest, state, world], tail)
         esac
      |  LD (x) -> eval(env, [state (x):stack, state, world], tail)
      |  ST (x) -> case stack of v:rest -> eval (env, [stack, state <- [x, v], world], tail) esac
      |  CONST (x) -> eval (env, [x:stack, state, world], tail)
      |  LABEL(_) -> eval (env, c, tail)
      |  JMP(lab) -> eval (env, c, fromLabel (env, lab))
      |  CJMP ("z", lab) -> 
        case stack of t:bot -> case t of  
            0 -> eval (env, [bot, state, world], fromLabel (env, lab))
          | _ -> eval (env, [bot, state, world], tail)
        esac esac
      |  CJMP ("nz", lab) -> 
        case stack of t:bot -> case t of  
            0 -> eval (env, [bot, state, world], tail)
          | _ -> eval (env, [bot, state, world], fromLabel (env, lab))
        esac esac
      |  DUP -> eval (env, [hd (stack):stack, state, world], tail)
      |  LDA (x) -> eval (env, [x : stack, state, world], tail)
      |  STI -> 
        case stack of y:x:rest -> 
          eval (env, [y:rest, state <- [x, y], world], tail) 
        esac
      |  DROP -> eval (env, [tl (stack), state, world], tail)
      |  _ -> c
      esac
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var (x) -> singletonBuffer(LD (x))
   |  Const (x) -> singletonBuffer(CONST (x))
   |  Binop (s, lexpr, rexpr) -> compileExpr(lexpr) <+> compileExpr(rexpr) <+ BINOP(s)
   esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Var   (x)      -> [false, env, singletonBuffer (LD (x))]
    | Ref   (x)      -> [false, env, singletonBuffer (LDA (x))]
    | Const (n)      -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)     -> 
        case genLabel(env) of [l1, env] -> case compile(l1, env, e) of [u, env, code] -> 
          [false, env, code <+> label (l1, u) <+ DROP] 
        esac esac
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If  (cond, block1, block2) ->
        case env.genLabel of [elseLab, env] ->
        case compile (lab, env, block1) of [_, env, tb] ->
        case compile (lab, env, block2) of [_, env, eb] ->
            [true, env, compileExpr (cond) <+ CJMP ("z", elseLab) <+> tb <+ JMP (lab) <+ LABEL (elseLab) <+> eb]
        esac esac esac
    | DoWhile (block, cond) ->
        case env.genLabel of [blockLab, env] ->
        case env.genLabel of [condLab, env] ->
        case compile(condLab, env, block) of [clu, env, bc] ->
            [false, env, label (blockLab, true) <+> bc <+> label (condLab, clu) <+> compileExpr(cond) <+ CJMP ("nz", blockLab)]
        esac esac esac
    | While (cond, block) -> 
        compile (lab, env, If (cond, DoWhile (block, cond), Skip))
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
