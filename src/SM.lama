-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of
    {} -> [stack, st, w]
    | head : tail ->
      case head of
        READ ->  
          case readWorld (w) of
            [n, w1] -> eval (env, [n:stack, st, w1], tail)
            | _ -> failure ("EVAL READ: error while read\n")
          esac
      | WRITE -> 
          case stack of
            n:stack1 -> eval (env, [stack1, st, writeWorld (n, w)], tail)
            | _ -> failure ("EVAL WRITE: error while write\n")
          esac
      | BINOP (s) ->
          case stack of
            y:x:stack1 -> eval (env, [evalOp (s, x, y):stack1, st, w], tail)
            | _ -> failure ("EVAL BINOP: no 2 stack elems\n")
          esac
      | LD (x) -> eval (env, [st (x):stack, st, w], tail)
      | LDA (x) -> eval (env, [Ref (x):stack, st, w], tail)
      | ST (x) ->
          case stack of
            n:stack -> eval (env, [stack, st <- [x, n], w], tail)
            | _ -> failure ("EVAL ST: no stack elem\n")
          esac
      | STI ->
          case stack of
            n:Ref (x):stack -> eval (env, [n:stack, st <- [x, n], w], tail)
            | _ -> failure ("EVAL STI: no 2 stack elems\n")
          esac
      | CONST (n) -> eval (env, [n:stack, st, w], tail)
      | LABEL (s) -> eval (env, c, tail)
      | JMP (l) -> eval (env, c, env.fromLabel (l))
      | CJMP (c, l) ->
          case stack of
            n:stack1 ->
              if
                case c of
                  "nz" -> n != 0
                | "z" -> n == 0
                esac
              then
                eval (env, [stack1, st, w], env.fromLabel (l))
              else
                eval (env, [stack1, st, w], tail)
              fi
            | _ -> failure ("EVAL CJMP: no stack elem\n")
          esac
      | DUP ->
          case stack of
            n:stack -> eval (env, [n:n:stack, st, w], tail)
            | _ -> failure ("EVAL DUP: no stack elem\n")
          esac
      | DROP ->
          case stack of
            n:stack -> eval (env, [stack, st, w], tail)
            | _ -> failure ("EVAL DROP: no stack elem\n")
          esac
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (expr) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, expr) {
    case expr of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eLabUsed, env, eCode] -> [false, env,
                eCode <+> label (eLab, eLabUsed) <+ DROP]
            esac
        esac
    | Binop (op, e1, e2) ->
        let [lab1, lab2, env] = env.genLabels (2) in
        let [lab1Used, env, e1Code] = compile (lab1, env, e1) in
        let [lab2Used, env, e2Code] = compile (lab2, env, e2) in
          [false, env,
            e1Code <+> label (lab1, lab1Used) <+>
            e2Code <+> label (lab2, lab2Used) <+
            BINOP (op)]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)         -> 
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eLabUsed, env, eCode] -> [false, env,
                eCode <+> label (eLab, eLabUsed) <+ WRITE]
            esac
        esac
    | Assn  (s1, s2)    ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, s1) of
              [lab1Used, env, s1Code] ->
                case compile (lab2, env, s2) of
                  [lab2Used, env, s2Code] -> [false, env,
                      s1Code <+> label (lab1, lab1Used) <+>
                      s2Code <+> label (lab2, lab2Used) <+
                      STI]
                esac
            esac
        esac
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If    (s0, s1, s2) ->
        case env.genLabels (2) of
          [s0Lab, s2Lab, env] ->
            case compile (lab, env, s0) of
              [s0LabUsed, env, s0Code] ->
                case compile (lab, env, s1) of
                  [labUsed1, env, s1Code] ->
                     case compile (lab, env, s2) of
                       [labUsed2, env, s2Code] -> [true, env,
                         s0Code <+>
                           label (s0Lab, s0LabUsed) <+
                           CJMP ("z", s2Lab) <+>
                           s1Code <+
                           JMP (lab) <+
                           LABEL (s2Lab) <+>
                           s2Code]
                     esac
                esac
            esac
        esac
    | While (e, s)      ->
        case env.genLabels (3) of
          [lab1, lab2, lab3, env] ->
            case compile (lab2, env, s) of
              [lab2used, env, sCode] ->
                case compile (lab3, env, e) of
                  [lab3used, env, eCode] -> [false, env,
                    singletonBuffer (JMP (lab2)) <+
                      LABEL (lab1) <+>
                      sCode <+
                      LABEL (lab2) <+>
                      eCode <+>
                      label (lab3, lab3used) <+
                      CJMP ("nz", lab1)]
                esac
            esac
        esac
    | DoWhile (s, e)   ->
        case env.genLabels (3) of
          [lab1, lab2, lab3, env] ->
            case compile (lab2, env, s) of
              [lab2used, env, sCode] ->
                case compile (lab3, env, e) of
                  [lab3used, env, eCode] -> [false, env,
                    singletonBuffer (LABEL (lab1)) <+>
                      sCode <+>
                      label (lab2, lab2used) <+>
                      eCode <+>
                      label (lab3, lab3used) <+
                      CJMP ("nz", lab1)]
                esac
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, expr) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
