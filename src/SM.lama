-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  case insns of 
    head:tail -> 
      case head of
        CONST (x) -> eval(env, [x:stack, state, w], tail)  
        | READ    -> let [n, newWorld] = readWorld(w) in eval(env, [n:stack, state, newWorld], tail)   
        | WRITE   -> let value:restStack = stack in eval(env, [restStack, state, writeWorld(value, w)], tail) 
        | LD (x)  -> eval(env, [state(x):stack, state, w], tail)
        | LDA (x) -> eval(env, [Ref(x):stack, state, w], tail)
        | ST (x)  -> let value:restStack = stack in eval(env, [restStack, state <- [x, value], w], tail)
        | STI     -> let y:Ref(x):restStack = stack in eval (env, [y:restStack, state <- [x, y], w], tail)
        | BINOP (op) -> let second:first:restStack = stack in eval(env, [evalOp(op, first, second) : restStack, state, w], tail)       
        | LABEL (l)  -> eval(env, c, tail)
        | JMP (l)    -> eval(env, c, fromLabel(env, l))
        | CJMP ("nz", l) -> let first:restStack = stack in 
            eval(env, [restStack, state, w], if first == 0 then tail else fromLabel(env, l) fi)
        | CJMP ("z", l)  -> let first:restStack = stack in 
            eval(env, [restStack, state, w], if first == 0 then fromLabel(env, l) else tail fi)
        | DUP  -> let value:restStack = stack in eval(env, [value:value:restStack, state, w], tail)
        | DROP -> let _:restStack = stack in eval (env, [restStack, state, w], tail)
      esac
    | {} -> c 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e)        -> let [lab2, env, eCode] = compile (lab, env, e) in [false, env, eCode <+> label (lab, lab2) <+ DROP]
    | Binop (op, left, right) ->
        let [lab1, lab2, env] = env.genLabels (2) in
          let [lab1Used, env, leftCode] = compile (lab1, env, left) in
            let [lab2Used, env, rightCode] = compile (lab2, env, right) in
              [false, env, leftCode <+> label (lab1, lab1Used) <+> rightCode <+> label (lab2, lab2Used) <+ BINOP (op)]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)         -> let [labUsed, env, eCode] = compile (lab, env, e) in [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
    | Assn (x, e) ->
        let [xLab, eLab, env] = env.genLabels (2) in
          let [xLabUsed, env, xCode] = compile (xLab, env, x) in
            let [eLabUsed, env, eCode] = compile (eLab, env, e) in
              [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
    | Seq   (s1, s2) ->
        let [s2Lab, env] = env.genLabel in
          let [s2LabUsed, env, s1Code] = compile (s2Lab, env, s1) in
            let [labUsed, env, s2Code] = compile (lab, env, s2) in
              [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
    | If (cond, s1, s2) ->
      let [condLab, elseLab, env] = env.genLabels(2) in
        let [condLabUsed, env, condCode] = compile(condLab, env, cond) in
          let [_, env, thenCode] = compile(lab, env, s1) in
            let [_, env, elseCode] = compile(lab, env, s2) in
              [ true, env,
                condCode <+>
                label (condLab, condLabUsed) <+
                CJMP  ("z", elseLab) <+>
                thenCode <+
                JMP (lab) <+>
                label (elseLab, true) <+>
                elseCode
              ]
    | While (expr, s) ->
        let [condLab, bodyLab, env] = env.genLabels(2) in
          let [_, env, code] = compile (condLab, env, s) in
            let [_, env, exprCode] = compile (bodyLab, env, expr) in
              [ false, env,
                singletonBuffer (JMP (condLab)) <+>
                label (bodyLab, true) <+>
                code <+>
                label (condLab, true) <+>
                exprCode <+
                CJMP  ("nz", bodyLab)
              ]
    | DoWhile (s, expr) ->
        let [condLab, bodyLab, env] = env.genLabels(2) in
          let [_, env, code] = compile (bodyLab, env, s) in
            let [_, env, exprCode] = compile (condLab, env, expr) in
              [ false, env,
                label (bodyLab, true) <+>
                code <+>
                label (condLab, true) <+>
                exprCode <+
                CJMP  ("nz", bodyLab)
              ]
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
