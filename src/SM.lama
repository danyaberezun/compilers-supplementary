-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalCc(cc, value) {
  case cc of 
    "z" -> value == 0
  | "nz" -> value != 0
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  fun evalOnce([ins:insns, c@[stack, s, w]]) {
    case ins of 
      READ         -> let [v, w1] = readWorld (w) in [insns, [v:stack, s, w1]]
    | WRITE        -> let v:stack = stack in [insns, [stack, s, writeWorld (v, w)]]
    | BINOP (op)   -> let v2:v1:stack = stack in [insns, [evalOp (op, v1, v2):stack, s, w]]
    | LD    (x)    -> [insns, [s (x):stack, s, w]]
    | ST    (x)    -> let v:stack = stack in [insns, [stack, s <- [x, v], w]]
    | CONST (n)    -> [insns, [n:stack, s, w]]
    | LABEL (s)    -> [insns, c]
    | JMP   (l)    -> [env.fromLabel (l), c]
    | CJMP  (cc, l) -> let v:stack = stack in [if evalCc (cc, v) then env.fromLabel (l) else insns fi, [stack, s, w]]
    | LDA   (x) -> [insns, [x:stack, s, w]]
    | STI -> let v:x:stack = stack in [insns, [v:stack, s <- [x, v], w]]
    | DROP -> let _:stack = stack in [insns, [stack, s, w]]
    | DUP -> let v:_ = stack in [insns, [v:stack, s, w]]
    esac
  }
  var state = [insns, c];

  while (state[0] != {}) do
    state := evalOnce (state)
  od;
  state[1]
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read    (e)       -> 
        let [eLab, env] = env.genLabel in
        let [eLabUsed, env, eCode] = compile (eLab, env, e) in
          [false, env, eCode <+> label (eLab, eLabUsed) <+ READ <+ STI <+ DROP]
    | Write   (e)       -> 
        let [eLab, env] = env.genLabel in
        let [eLabUsed, env, eCode] = compile (eLab, env, e) in
          [false, env, eCode <+> label (eLab, eLabUsed) <+ WRITE]
    | Assn    (t, e)    ->
        let [tLab, env] = env.genLabel in
        let [tLabUsed, env, tCode] = compile (tLab, env, t) in
        let [eLab, env] = env.genLabel in
        let [eLabUsed, env, eCode] = compile (eLab, env, e) in
        let code = tCode <+> label (tLab, tLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI in
          [false, env, code]
    | Seq     (s1, s2)  ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If      (cond, p, f) -> 
        let [condLab, env] = env.genLabel in
        let [condLabUsed, env, condCode] = compile (condLab, env, cond) in
        let [negLab, env] = env.genLabel in
        let [_, env, posCode] = compile (lab, env, p) in
        let [_, env, negCode] = compile (lab, env, f) in
        let code = condCode <+> label (condLab, condLabUsed) <+ CJMP ("z", negLab) 
                   <+> posCode <+ JMP (lab)  
                   <+ LABEL (negLab) <+> negCode in
          [true, env, code]
    | While   (cond, b) -> compile (lab, env, If (cond, DoWhile (cond, b), Skip))
    | DoWhile (cond, b) ->
        let [condLab, env] = env.genLabel in
        let [condLabUsed, env, condCode] = compile (condLab, env, cond) in
        let [loopLab, env] = env.genLabel in
        let [contLab, env] = env.genLabel in
        let [contLabUsed, env, bCode] = compile (contLab, env, b) in
        let code = label (loopLab, true) <+> bCode 
                   <+> label (contLab, contLabUsed) 
                   <+> condCode <+> label (condLab, condLabUsed) <+ CJMP ("nz", loopLab)  in
          [false, env, code]
    | Binop (op, e1, e2) -> 
        let [e1Lab, env] = env.genLabel in
        let [e1LabUsed, env, e1Code] = compile (e1Lab, env, e1) in
        let [e2Lab, env] = env.genLabel in
        let [e2LabUsed, env, e2Code] = compile (e2Lab, env, e2) in
        let code = e1Code <+> label (e1Lab, e1LabUsed) <+> e2Code <+> label (e2Lab, e2LabUsed) <+ BINOP (op) in
          [false, env, code]
    | Ignore  (e) -> 
        let [eLab, env] = env.genLabel in
        let [eLabUsed, env, eCode] = compile (eLab, env, e) in
          [false, env, eCode <+ DROP]
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
