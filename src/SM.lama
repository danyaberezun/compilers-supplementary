-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of 
     insn : tailInsns -> 
       case c of 
         [stack, st, world] -> 
           case insn of 
             READ -> 
               case readWorld (world) of
                 [value, newWorld] -> 
                   eval (env, [value : stack, st, newWorld], tailInsns)
               esac 
           | WRITE -> 
               case stack of 
                 value : stackTail -> 
                   case writeWorld (value, world) of 
                     newWorld -> 
                       eval (env, [stackTail, st, newWorld], tailInsns)
                   esac
               esac       
           | BINOP (op) -> 
               case stack of 
                 rhs : lhs : stackTail -> 
                   eval (env, [evalBinop (op, lhs, rhs) : stackTail, st, world], tailInsns)
               esac 
           | LD (varName) -> 
               eval (env, [st (varName) : stack, st, world], tailInsns)
           | ST (varName) -> 
               case stack of 
                 value : stackTail -> 
                   eval (env, [stackTail, st <- [varName, value], world], tailInsns)
               esac 
           | CONST (value) -> 
               eval (env, [value : stack, st, world], tailInsns)
           | LABEL (lab) ->
               eval (env, [stack, st, world], tailInsns)
           | JMP (lab) ->
               eval (env, [stack, st, world], fromLabel (env, lab))
          | CJMP ("z", lab) ->
              case stack of 
                value : stackTail ->
                  case value of 
                    0 -> eval (env, [stackTail, st, world], fromLabel (env, lab))
                  | _ -> eval (env, [stackTail, st, world], tailInsns)
                  esac
              esac
          | CJMP ("nz", lab) -> 
              case stack of 
                value : stackTail ->
                  case value of
                    0 -> eval (env, [stackTail, st, world], tailInsns)
                  | _ -> eval (env, [stackTail, st, world], fromLabel (env, lab))
                  esac 
              esac                
           esac
       esac
   | {} -> c
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
       Var  (varName)      -> singletonBuffer(LD (varName))
     | Const(value)        -> singletonBuffer(CONST (value))
     | Binop(op, lhs, rhs) -> compileExpr (lhs) <+> compileExpr (rhs) <+ BINOP (op)
   esac  
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabel of 
          [s2Lab, env] -> 
            case compile (lab, env, s1) of 
              [_, env, s1Code] -> 
                case compile (lab, env, s2) of 
                  [_, env, s2Code] -> 
                    [true, env, 
                    compileExpr (e) <+ 
                    CJMP ("z", s2Lab) <+> 
                    s1Code <+ 
                    JMP (lab) <+ 
                    LABEL (s2Lab) <+> 
                    s2Code <+ 
                    JMP (lab)]
                esac
            esac         
        esac
    | While (e, s) -> 
        case env.genLabel of 
          [eLab, env] ->
            case env.genLabel of 
              [sLab, env] -> 
                case compile (eLab, env, s) of 
                  [_, env, sCode] ->
                    [false, env, 
                    singletonBuffer (JMP (eLab)) <+ 
                    LABEL (sLab) <+> 
                    sCode <+ 
                    LABEL (eLab) <+> 
                    compileExpr (e) <+ 
                    CJMP ("nz", sLab)]
                esac
            esac
        esac
    | DoWhile (s, e) ->
        case env.genLabel of
          [sLab, env] ->
            case env.genLabel of
              [eLab, env] ->
                case compile (eLab, env, s) of 
                  [_, env, sCode] ->
                    [false, env, 
                    singletonBuffer(LABEL (sLab)) <+> 
                    sCode <+ 
                    LABEL (eLab) <+> 
                    compileExpr(e) <+ 
                    CJMP ("nz", sLab)]
                esac
            esac
        esac             
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
