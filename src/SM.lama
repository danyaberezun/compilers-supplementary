-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
   case insns of
     head:tail ->
      case head of
         BINOP(op) ->
            case stack of y:x:rest ->
               eval([evalExpr(st, Binop(op, Const(x), Const(y))) : rest, st, w], tail)
            esac 
         | CONST(x) -> eval([x : stack, st, w], tail)
         | READ -> let [n, newW] = readWorld(w) in eval([n:stack, st, newW], tail)
         | WRITE ->
            case stack of v:rest ->
               eval([rest, st, writeWorld(v, w)], tail)
            esac
         | LD(x) -> eval([st(x) : stack, st, w], tail)
         | ST(x) ->
            case stack of v:rest ->
               eval([rest, st <- [x, v], w], tail) 
            esac
      esac
   | {} -> c
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
     Var(name) -> {LD(name)}
   | Const(n) -> {CONST(n)}
   | Binop(op, left, right) -> compileExpr(left) +++ compileExpr(right) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
     Assn(name, expr) -> compileExpr(expr) +++ {ST(name)}
   | Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
   | Skip -> {}
   | Read(name) -> {READ, ST(name)}
   | Write(expr) -> compileExpr(expr) +++ {WRITE}
   esac
}