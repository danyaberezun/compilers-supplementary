-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, w], insns) {
   case insns of
     i: is -> eval(
      case i of
         READ -> case readWorld(w) of 
            [v, w_] -> [v: stack, state, w_] 
            esac
         | WRITE -> case stack of 
            x: tail -> [tail, state, writeWorld(x, w)] 
            esac
         | BINOP (op) -> case stack of 
            r: l: tail -> [evalBinop(op, l, r): tail, state, w] 
            esac
         | LD (v) -> [state(v) : stack, state, w]
         | ST (v) -> case stack of 
            x: tail -> [tail, state <- [v, x], w] 
            esac
         | CONST (n) -> [n: stack, state, w]
         esac, is
   )
   | _ -> c
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var(x) -> {LD(x)}
      | Const(x) -> {CONST(x)}
      | Binop(op, x, y) -> compileExpr(x) +++ compileExpr(y) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
      Assn(x, e) -> compileExpr(e) +++ {ST(x)}
      | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
      | Read(x) -> {READ, ST(x)}
      | Write(e) -> compileExpr(e) +++ {WRITE}
      | Skip -> {}
   esac
}