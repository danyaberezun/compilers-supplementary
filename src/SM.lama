-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun eval (c@[stack, state, world], insns) {
  case insns of
    i:insns2 -> case i of
               BINOP (op) -> case stack of top1:top2:r -> eval([evalBinop(op, top2, top1):r, state, world], insns2) esac |
               CONST (n) -> eval([n:stack, state, world], insns2) |
               READ -> case readWorld(world) of [value, new_world] -> eval([value:stack, state, new_world], insns2) esac |
               WRITE -> case stack of top:r -> eval([r, state, writeWorld(top, world)], insns2) esac |
               LD (x) -> eval([state(x):stack, state, world], insns2) |
               ST (x) -> case stack of top:r -> eval([r, state <- [x, top], world], insns2) esac
            esac
    | _ -> c -- stop
  esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
    Var (v) -> {LD (v)} |
    Const (n) -> {CONST (n)} |
    Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
  esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip -> [] |
    Assn (v, e) -> compileExpr(e) +++ {ST(v)} |
    Read (v) -> {READ, ST(v)} |
    Write (e) -> compileExpr(e) +++ {WRITE} |
    Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2) 
  esac
}