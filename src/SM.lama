-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun evalOp (op, x, y) {
   case op of 
         "+"  -> x + y
      |  "-"  -> x - y
      |  "*"  -> x * y
      |  "/"  -> x / y 
      |  "%"  -> x % y 
      |  "==" -> x == y 
      |  "!=" -> x != y 
      |  "<"  -> x < y 
      |  "<=" -> x <= y 
      |  ">"  -> x > y 
      |  ">=" -> x >= y 
      |  "&&" -> x && y 
      |  "!!" -> x !! y 
   esac
}
fun eval (c, insns) {
   if 
      insns.size > 0 
   then 
      let stack = c[0] in 
      let st    = c[1] in 
      let w     = c[2] in 
      let ins   = insns.hd in
      case ins of
            READ     -> eval([readWorld(w).fst:stack, st, readWorld(w).snd], insns.tl)
         |  WRITE    -> eval([stack.tl, st, writeWorld(stack.hd, w)], insns.tl)
         |  BINOP(s) -> eval([evalOp(s, stack.tl.hd, stack.hd):stack.tl.tl, st, w], insns.tl)
         |  LD(x)    -> eval([st(x):stack, st, w], insns.tl)
         |  ST(x)    -> eval([stack.tl, st <- [x, stack.hd], w], insns.tl)
         |  CONST(n) -> eval([n:stack, st, w], insns.tl)
      esac
   else
      c
   fi
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of 
         Var   (x)        -> {LD(x)}
      |  Const (n)        -> {CONST(n)}
      |  Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
         Assn  (x, expr) -> compileExpr(expr) +++ {ST(x)}
      |  Seq   (l, r)    -> compileSM(l) +++ compileSM(r)
      |  Read  (x)       -> {READ, ST(x)}
      |  Write (expr)    -> compileExpr(expr) +++ {WRITE}
   esac
}