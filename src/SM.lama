-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
        i:is ->
            case i of
                READ -> case readWorld(w) of [value, w_] 
                     -> eval([value:st, cst, s, w_], is)
                    esac
                | WRITE -> case st of head:tail 
                        -> eval([tail, cst, s, writeWorld(head, w)], is) 
                        esac
                | BINOP (op) -> case st of r:l:tail 
                             -> eval([evalOp(op, l, r):tail, cst, s, w], is) 
                            esac
                | LD (x) -> eval([lookup (s, x):st, cst, s, w], is)
                | ST (x) -> case st of head:_ 
                                -> assign(s, x, head); eval([st, cst, s, w], is) 
                                esac
                | CONST (n) -> eval([n:st, cst, s, w], is)
                | LABEL(_) -> eval(c, is)
                | JMP(s2) -> eval(c, fromLabel(env, s2))
                | CJMP(cond, lab) -> let head:tail = st in
                    eval([tail, cst, s, w], 
                        case cond of 
                        "z" -> 
                            if head == 0 
                            then fromLabel(env, lab) 
                            else is 
                            fi
                        | "nz" -> 
                            if head != 0 
                            then fromLabel(env, lab) 
                            else is
                            fi
                        esac
                    )
                | LDA(x) -> eval([x:st, cst, s, w], is)
                | STI -> case st of head:x:tail 
                      -> assign(s, x, head); eval([head:tail, cst, s, w], is) 
                      esac
                | DROP -> case st of _:tail 
                       -> eval([tail, cst, s, w], is) 
                      esac
                | DUP -> case st of head:_ 
                      -> eval([head:st, cst, s, w], is) 
                      esac
                | GLOBAL (x) -> eval(c, is)
                | CALL (f, _)  -> eval([st, [s, is] : cst, s, w], fromLabel (env, f))
                | BEGIN (f, a, l) -> 
                    case take(st, a) of [st, args] -> 
                    case makeState(a, l) of [_, l] -> 
                        eval([st, cst, [listArray(args), l], w], is) 
                    esac
                    esac
                | END -> 
                    case cst of 
                        [s, is] : cstT -> eval([st, cstT, s, w], is)
                        | {} -> c
                    esac
            esac
        | _ -> c
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

--T06
fun compileExpr (expr) { 
  case expr of
    Var (x) -> emptyBuffer() <+ LD (x)
  | Const (n) -> emptyBuffer() <+ CONST (n)
  | Binop (op, e1, e2) ->
      compileExpr (e1) <+> compileExpr (e2) <+ BINOP (op)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }


  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

  fun addD([env, fs], x) {
    case x of
        Var (ns) -> [addVars (env, ns), fs]
      | Fun (n, args, body) -> 
            case genFunLabel(env, n) of [lab, env] ->
                [addFun (env, n, lab, size(args)), [lab, args, body]: fs]
            esac
    esac
  }  

  fun addGlob(buf, x) {
    case x of 
      Var (ns) -> 
            foldl (fun(b, n) {b <+ GLOBAL(n)}, buf, ns)
      | _ -> buf
    esac
  }

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {e}    -> compile (lab, env, e)
    | e : es ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (x)         -> case env.genLabel of [eLab, env] ->
                           case compile(eLab, env, x) of [labUsed, env, code] -> 
                              [false, env, code <+> label(eLab, labUsed) <+ WRITE]
                           esac
                           esac
    | Assn  (Ref (x), e)-> 
                           case genLabel(env) of [lab, env] ->
                           case compile(lab, env, e) of [lab_, env, block] ->
                               [false, env, block <+> label(lab, lab_) <+ ST (lookupVar(env, x))]
                           esac
                           esac
    | Assn (s, e)       -> case env.genLabels (2) of [varLab, eLab, env] -> 
                           case compile (varLab, env, s) of [varLabUsed, env, varCode] -> 
                           case compile (eLab, env, e) of [eLabUsed, env, eCode] -> 
                             [false, env, varCode <+> label (varLab, varLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
                           esac            
                           esac
                           esac
    | Seq   (s1, s2)    -> case env.genLabel of [s2Lab, env] ->
                           case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
                           case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
                             [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                           esac
                           esac
                           esac
    | Binop (s, e1, e2) -> case genLabel(env) of [lLab, env] ->
                           case genLabel(env) of [rLab, env] ->
                           case compile(lLab, env, e1) of [lLab_, env, block1] ->
                           case compile(rLab, env, e2) of [rLab_, env, block2] ->
                               [false, env, block1 <+> label(lLab, lLab_) <+> block2 <+> label(rLab, rLab_) <+ BINOP(s)]
                           esac
                           esac
                           esac
                           esac
    | If(e, s1, s2)     -> case env.genLabel of [elseLab, env] ->
                           case compile(lab, env, e) of [cb_, env, cb] ->
                           case compile(lab, env, s1) of [_, env, tb] ->
                           case compile(lab, env, s2) of [_, env, eb] ->
                               [true, env, cb <+> label(cb, cb_) <+ CJMP("z", elseLab) <+> tb <+ JMP(lab) <+ LABEL(elseLab) <+> eb <+ JMP(lab)]
                           esac 
                           esac
                           esac 
                           esac
    | DoWhile(s, e)     -> case env.genLabel of [blockLab, env] ->
                           case env.genLabel of [condLab, env] ->
                           case env.genLabel of [startLab, env] ->
                           case compile(blockLab, env, s) of [_, env, bc] ->
                           case compile(condLab, env, e) of [clu, env, cc] ->
                               [false, env, singletonBuffer(LABEL (startLab)) <+> bc <+ LABEL (blockLab) <+> cc <+> label(condLab, clu) <+ CJMP ("nz", startLab)]
                           esac 
                           esac 
                           esac 
                           esac 
                           esac
    | While(e, s)       -> compile (lab, env, If (e, DoWhile (s, e), Skip))
    | Ignore(e)         -> case env.genLabel of [condLab, env] ->
                           case compile (condLab, env, e) of [eLabUsed, env, eCode] -> 
                               [false, env, eCode <+> label (condLab, eLabUsed) <+ DROP]
                           esac
                           esac
    | Scope(d, e)       -> case beginScope(env) of env ->
                           case foldl(addD, [env, {}], d) of [env, funs] ->
                           case foldl(fun (env, [l, a, b]) {rememberFun(env, l, a, b)}, env, funs) of env ->
                           case if isGlobal(env) then foldl(addGlob, emptyBuffer(), d) else emptyBuffer() fi of code ->
                           case compile(lab, env, e) of [elab_, env, ecode] ->
                           case if isGlobal(env) then env else endScope(env) fi of env ->
                               [elab_, env, code <+> ecode]
                           esac
                           esac
                           esac
                           esac
                           esac
                           esac
     | Call (n, es)     -> case foldl(fun ([env, buf], e) {case compile(lab, env, e) of [lab1, env, code1] -> [env, buf <+> code1 <+> label (lab, lab1)] esac }, [env, emptyBuffer()], es) of [env, code] ->
                           case lookupFun(env, n) of Fun (n, e) ->
                               [false, env, code <+ CALL (n, e)]
                           esac
                           esac 
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, args.size, getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}

