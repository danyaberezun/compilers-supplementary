-- Stack machine.
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (instruction) {
  case instruction of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (program_code) {
  map (fun (instr) {showSMInsn (instr) ++ "\n"}, program_code).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, current_config@[sm_stack, current_state, world_obj], instruction_list) {
   case instruction_list of
      {} -> [sm_stack, current_state, world_obj] 
    | current_insn : rest_insns ->
         case current_insn of
            READ -> case world_obj of 
                      [n:i, o] -> case readWorld(world_obj) of
                                    [value, new_world_obj] -> eval (env, [value : sm_stack, current_state, new_world_obj], rest_insns)
                                  esac
                      | _ -> failure("Error. Input is empty!")
                    esac
            | WRITE ->  case sm_stack of 
                          v_val : remaining_stack -> eval (env, [remaining_stack, current_state, writeWorld(v_val, world_obj)], rest_insns)
                          | _ -> failure("Error. Stack is empty!")
                        esac
            | BINOP ("+") ->  case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 + v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("-") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 - v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("*") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 * v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("/") -> case sm_stack of 
                                0 : _ : _ -> failure("Error. Division by zero!")
                                | v2 : v1 : remaining_stack -> eval (env, [(v1 / v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("%") -> case sm_stack of 
                                0 : _ : _ -> failure("Error. Division by zero!")
                                | v2 : v1 : remaining_stack -> eval (env, [(v1 % v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("==") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 == v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP (">=") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 >= v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("<=") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 <= v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP (">") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 > v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("<") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 < v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("!=") -> case sm_stack of 
                                v2 : v1 : remaining_stack -> eval (env, [(v1 != v2) : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("!!") -> case sm_stack of 
                                x : y : remaining_stack -> eval (env, [x !! y : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | BINOP ("&&") -> case sm_stack of 
                                x : y : remaining_stack -> eval (env, [x && y : remaining_stack, current_state, world_obj], rest_insns)
                                | _ -> failure("Error. Stack has not two values!")
                              esac
            | LD (x_name) -> eval (env, [current_state (x_name) : sm_stack, current_state, world_obj], rest_insns)
            | ST (x_name) -> case sm_stack of 
                          v_val : remaining_stack -> eval (env, [remaining_stack, current_state <- [x_name, v_val], world_obj], rest_insns)
                          | _ -> failure("Error. Stack is empty!")
                        esac
            | CONST (n_val) -> eval (env, [n_val : sm_stack, current_state, world_obj], rest_insns)
            | LABEL (l_lab) -> eval (env, current_config, rest_insns)
            | JMP (l_lab) -> eval (env, current_config, fromLabel(env, l_lab))
            | CJMP("z", l_jmp) -> case sm_stack of 
                                v_val : remaining_stack -> if v_val == 0
                                                then eval (env, [remaining_stack, current_state, world_obj], fromLabel(env, l_jmp))
                                              else eval (env, [remaining_stack, current_state, world_obj], rest_insns)
                                              fi
                                | _ -> failure("Error. Stack is empty!")
                              esac
            | CJMP("nz", l_jmp) -> case sm_stack of 
                                v_val : remaining_stack -> if v_val != 0
                                                then eval (env, [remaining_stack, current_state, world_obj], fromLabel(env, l_jmp))
                                              else eval (env, [remaining_stack, current_state, world_obj], rest_insns)
                                              fi
                                | _ -> failure("Error. Stack is empty!")
                              esac
         esac
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (program_input, sm_instructions) {
  eval (initEvalEnv (sm_instructions), [{}, emptyState, createWorld (program_input)], sm_instructions)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr_node) {
  case expr_node of
    Var (x_name) -> singletonBuffer(LD(x_name))
    | Const (n_val) -> singletonBuffer(CONST(n_val))
    | Binop (op_sym, sub_e1, sub_e2) -> compileExpr (sub_e1) <+> compileExpr (sub_e2) <+ BINOP(op_sym)
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt_node) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt_param) {
    case stmt_param of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (var_n)      -> [false, env, singletonBuffer (READ) <+ ST (var_n)]
    | Write (expr_n)      -> [false, env, compileExpr (expr_n) <+ WRITE]
    | Assn  (var_n, expr_n)   -> [false, env, compileExpr (expr_n) <+ ST (var_n)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) ->
        case env.genLabel of
          [elseLab, env] ->
             case compile (lab, env, s1) of
               [labUsedS1, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsedS2, env, s2Code] -> [true, env,
                      (compileExpr(e) <+ CJMP("z", elseLab) <+> s1Code <+
                          JMP(lab)) <+ LABEL (elseLab) <+> s2Code]
                  esac
             esac
        esac
    | While (e, s) ->
        case env.genLabels(2) of
          [condLab, bodyLab, env] ->
            case compile (condLab, env, s) of
              [_, env, stmtCode] ->
                  [false, env,
                      singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> stmtCode <+ LABEL(condLab)
                      <+> compileExpr(e) <+ CJMP("nz", bodyLab)]
            esac
        esac
    | DoWhile (s, e) ->
        case env.genLabels(2) of
          [condLab, bodyLab, env] ->
            case compile (condLab, env, s) of
              [labUsed, env, stmtCode] ->
                  [false, env,
                      singletonBuffer(LABEL(bodyLab)) <+> stmtCode <+> label(condLab, labUsed)
                      <+> compileExpr(e) <+ CJMP("nz", bodyLab)]
            esac
        esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt_node) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
