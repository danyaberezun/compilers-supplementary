-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (config@[stack, cstack, state, world], insns) {
    case insns of
      {} -> config
    | insn:insns ->
      case insn of

      -- == ARITHMETICS ==
        CONST (i) -> eval ([i:stack, cstack, state, world], insns)
      | BINOP (op) -> eval (case stack of
          {} -> failure ("BINOP: stack empty\n")
        | {i} -> failure ("BINOP: stack size is 1\n")
        | i:j:stack -> [evalOp (op, j, i):stack, cstack, state, world]
        esac, insns)
      | DUP -> eval (case stack of
          {} -> failure ("DUP: stack empty\n")
        | i:stack -> [i:i:stack, cstack, state, world]
        esac, insns)
      | DROP -> eval (case stack of
          {} -> failure ("DROP: stack empty\n")
        | _:stack -> [stack, cstack, state, world]
        esac, insns)
      
      -- == MEMORY ==
      | LD (loc) -> eval ([lookup (state, loc):stack, cstack, state, world], insns)
      | LDA (loc) -> eval ([loc:stack, cstack, state, world], insns) -- злоупотребляем динамической типизацией :)
      | ST (loc) -> eval (case stack of
          {} -> failure ("ST: stack empty\n")
        | i:stack -> [stack, cstack, assign (state, loc, i), world]
        esac, insns)
      | STI -> eval (case stack of
          {} -> failure ("STI: stack empty\n")
        | {_} -> failure ("STI: stack size is 1\n")
        | loc:i:stack -> [i:stack, cstack, assign (state, loc, i), world]
        esac, insns)
      | GLOBAL (x) -> eval ([stack, cstack, assign (state, Glb (x), 0), world], insns)
      
      -- == IO ==
      | READ -> eval (let [varRed, newWorld] = readWorld (world) in
                      [varRed:stack, cstack, state, newWorld], insns)
      | WRITE -> eval (case stack of
          {} -> failure( "WRITE: stack empty\n")
        | s:stack -> [stack, cstack, state, writeWorld (s, world)]
        esac, insns)
      
      -- == CONTROL FLOW ==
      | LABEL (l) -> eval (config, insns)
      | JMP (l) -> eval (config, env.fromLabel(l))
      | CJMP (c, l) -> case stack of
          {} -> failure ("CJMP: stack empty\n")
        | i:stack -> eval ([stack, cstack, state, world],
                            if (compare (c, "z") == 0) == (i == 0)
                            then env.fromLabel(l)
                            else insns fi)
        esac
      
      -- == FUNCTIONS ==
      | CALL (f, n) -> eval ([stack, [state, insns]:cstack, [NoState, NoState], world], env.fromLabel (f))
      | BEGIN (f, a, l) ->
          let [stack, args] = take (stack, a) in
          eval ([stack, cstack, [args.listArray, initArray(l, fun (_) {0})], world], insns)
      | END ->
          case cstack of
            [rstate, rinsns]:cstack -> eval ([stack, cstack, rstate, world], rinsns)
          | {} -> config  -- end program
          esac

      -- == OTHER ==
      | _ -> failure ("SM interpreter for instruction %s is not yet implemented\n", insn)
      esac
    esac
  }
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {e}    -> compile (lab, env, e)
    | e : es ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    -- DEBUG
    -- if compare(sysargs[1], "test031.lama") == 0
    -- then failure (stmt.string)
    -- fi;

    case stmt of

    -- == UTIL ==
      Skip               -> [false, env, emptyBuffer ()]
    | Seq (e1, e2)       ->
        let [lab1, env] = env.genLabel in
        let lab2 = lab in
        let [lab1Used, env, code1] = compile (lab1, env, e1) in
        let [lab2Used, env, code2] = compile (lab2, env, e2) in
        [lab2Used, env, code1 <+> label (lab1, lab1Used) <+> code2] -- +lab2?
    | Ignore (e)         ->
        let [lab1, env] = env.genLabel in
        let [lab1Used, env, code] = compile (lab1, env, e) in
        [false, env, code <+> label (lab1, lab1Used) <+ DROP]
    | Scope (defs, body) ->
        let env = env.beginScope in
        let [nFuns, nLocs] = foldl (fun ([nf, nl], def) {
          case def of
            Var (xs) -> [nf, nl + xs.size]
          | Fun (_, _, _) -> [nf + 1, nl]
          esac
        }, [0, 0], defs) in
        let globalDefs = if env.isGlobal then
          foldl (fun (globals, def) {
            case def of
              Var (xs) -> globals <+> foldl (fun (buf, x) { buf <+ GLOBAL (x) }, emptyBuffer (), xs)
            | _ -> globals
            esac
          }, emptyBuffer (), defs)
        else emptyBuffer () fi in
        let [fLabels, env] = foldl (fun ([fLabels, env], def) {
          case def of
            Fun (name, _, _) ->
              let [fLabel, env] = env.genFunLabel (name) in
              [fLabel:fLabels, env]
          | _ -> [fLabels, env]
          esac
        }, [{}, env], defs) in
        let fLabels = fLabels.reverse.listArray in
        -- add all definitions
        let [_, env] = foldl (fun ([fj, env], def) {
          case def of
            Var (xs) -> [fj, env.addVars (xs)]
          | Fun (name, args, body) ->
              [fj + 1, env.addFun (name, fLabels[fj], args.size)]
          esac
        }, [0, env], defs) in
        -- body compilation
        let [_, env, bodyCode] = compile (lab, env, body) in
        let [_, env] = foldl (fun ([fj, env], def) {
          case def of
            Fun (_, args, body) -> [fj + 1, env.rememberFun (fLabels[fj], args, body)]
          | _ -> [fj, env]
          esac
        }, [0, env], defs) in
        -- result
        let code = -- env.compileFunctions (
          emptyBuffer () <+>
          -- globals
          globalDefs <+>
          -- code
          bodyCode <+ JMP (lab)
        -- )
        in
        let env = env.endScope in
        [
          true, env, code
        ]

    -- == ARITHMETICS ==
    | Const (n)          -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, el, er) ->
        let [llab, env] = env.genLabel in
        let [rlab, env] = env.genLabel in
        let [llabUsed, env, lcode] = compile (llab, env, el) in
        let [rlabUsed, env, rcode] = compile (rlab, env, er) in
        [false, env, lcode <+> label (llab, llabUsed) <+> rcode <+> label (rlab, rlabUsed) <+ BINOP (op)]

    -- == MEMORY ==
    | Var (x)            -> [false, env, singletonBuffer (LD (env.lookupVar (x)))]
    | Ref (x)            -> [false, env, singletonBuffer (LDA (env.lookupVar (x)))]
    | Assn (ea, ev)      ->
        -- assignment is evaluated from right to left
        let [vlab, env] = env.genLabel in
        let [alab, env] = env.genLabel in
        let [vlabUsed, env, vcode] = compile (vlab, env, ev) in
        let [alabUsed, env, acode] = compile (alab, env, ea) in
        [false, env, vcode <+> label (vlab, vlabUsed) <+> acode <+> label (alab, alabUsed) <+ STI]

    -- == IO ==
    | Read (x)           -> [false, env, singletonBuffer (READ) <+ ST (env.lookupVar (x))]
    | Write (e)          ->
        let [lab1, env] = env.genLabel in
        let [lab1Used, env, code] = compile (lab1, env, e) in
        [false, env, code <+> label (lab1, lab1Used) <+ WRITE]

    -- == CONTROL FLOW ==
    | If (ec, et, ef)    ->
        let tlab = lab in
        let [flab, env] = env.genLabel in
        let [clab, env] = env.genLabel in
        let [clabUsed, env, ccode] = compile (clab, env, ec) in
        let [_, env, tcode] = compile (tlab, env, et) in
        let [_, env, fcode] = compile (tlab, env, ef) in
        [true, env, ccode <+> label (clab, clabUsed) <+ CJMP ("z", flab) <+> tcode <+ JMP (tlab) <+ LABEL (flab) <+> fcode] -- +tlab
    | While (ec, ed)     ->
        let blab = lab in
        let [rlab, env] = env.genLabel in
        let [clab, env] = env.genLabel in
        let [clabUsed, env, ccode] = compile (clab, env, ec) in
        let [_, env, dcode] = compile (rlab, env, ed) in
        [true, env, label (rlab, true) <+> ccode <+> label (clab, clabUsed) <+ CJMP ("z", blab) <+> dcode <+ JMP (rlab)] -- +blab
    | DoWhile (ed, ec)   ->
        let [rlab, env] = env.genLabel in
        let [clab, env] = env.genLabel in
        let [dlab, env] = env.genLabel in
        let [dlabUsed, env, dcode] = compile (dlab, env, ed) in
        let [clabUsed, env, ccode] = compile (clab, env, ec) in
        [false, env, label (rlab, true) <+> dcode <+> label (dlab, dlabUsed) <+> ccode <+> label (clab, clabUsed) <+ CJMP ("nz", rlab)]

    -- == FUNCTIONS ==
    | Call (fname, aes)   ->
        let aLabs = env.genLabels (aes.size) in
        let Fun (flab, nargs) = env.lookupFun (fname) in
        let [_, env, aCodes] = foldl (fun ([i, env, aCodes], ae) {
          let [aLabUsed, env, aCode] = compile (aLabs[i], env, ae) in
          [i + 1, env, aCodes <+> aCode <+> label (aLabs[i], aLabUsed)]
        }, [0, env, emptyBuffer ()], aes) in
        [false, env, aCodes <+ CALL (flab, nargs)]

    -- == OTHER ==
    | _                  -> failure ("compileSM not implemented\n")
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, args.size, getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}

