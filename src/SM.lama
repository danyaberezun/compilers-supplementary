-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (config@[stack, state, world], insns) {
   case insns of
      insn : restInsns ->
      case insn of
         READ ->
            let [value, newWorld] = readWorld(world) in
            eval([value : stack, state, newWorld], restInsns)
         | WRITE ->
            case stack of
            head : tail ->
                  let newWorld = writeWorld(head, world) in
                  eval([tail, state, newWorld], restInsns)
            | [] -> config
            esac
         | BINOP(op) ->
            case stack of
            y: x : tail ->
                  let result = applyBinaryOperator(op, x, y) in
                  eval([result : tail, state, world], restInsns)
            | _ -> config
            esac
         | LD(x) ->
            let value = state(x) in
            eval([value : stack, state, world], restInsns)
         | ST(x) ->
            case stack of
            head : tail ->
                  eval([tail, state <- [x, head], world], restInsns)
            | [] -> config
            esac
         | CONST(x) ->
            eval([x : stack, state, world], restInsns)
         esac
   | [] -> config
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var(x) -> {LD(x)}
   |  Const(x) -> {CONST(x)}
   |  Binop(op, x, y) -> compileExpr(x) +++ compileExpr(y) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
      Assn(x, expr) -> compileExpr(expr) +++ {ST(x)}
   |  Seq(x, y) -> compileSM(x) +++ compileSM(y)
   |  Skip -> []
   |  Read(x) -> {READ, ST(x)}
   |  Write(expr) -> compileExpr(expr) +++ {WRITE}
   esac
}