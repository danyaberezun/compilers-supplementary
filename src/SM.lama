-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    insn : others ->  case evalOne(env, c, insn, others) of
                        [newC, program] -> eval(env, newC, program)
                      esac
    | _ -> c
  esac
}

fun evalOne (env, c@[stack, state, w], insn, others) {
  case insn of 
    READ -> case w of 
              [n:i, o] -> case readWorld(w) of
                            [value, w2] -> [[value : stack, state, w2], others]
                          esac
              | _ -> failure("Error. Input is empty!")
            esac
    | WRITE ->  case stack of 
                  v : stack2 -> [[stack2, state, writeWorld(v, w)], others]
                  | _ -> failure("Error. Stack is empty!")
                esac
    | BINOP ("+") ->  case stack of 
                        v2 : v1 : stack2 -> [[(v1 + v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("-") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 - v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("*") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 * v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("/") -> case stack of 
                        0 : _ : _ -> failure("Error. Division by zero!")
                        | v2 : v1 : stack2 -> [[(v1 / v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("%") -> case stack of 
                        0 : _ : _ -> failure("Error. Division by zero!")
                        | v2 : v1 : stack2 -> [[(v1 % v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("==") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 == v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP (">=") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 >= v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("<=") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 <= v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP (">") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 > v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("<") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 < v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("!=") -> case stack of 
                        v2 : v1 : stack2 -> [[(v1 != v2) : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("!!") -> case stack of 
                        x : y : stack2 -> [[x !! y : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("&&") -> case stack of 
                        x : y : stack2 -> [[x && y : stack2, state, w], others]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | LD (x) -> [[state (x) : stack, state, w], others]
    | ST (x) -> case stack of 
                  v : _ -> [[stack, state <- [x, v], w], others]
                  | _ -> failure("Error. Stack is empty!")
                esac
    | CONST (n) -> [[n : stack, state, w], others]
    | LABEL (l) -> [c, others]
    | JMP (l) -> [c, fromLabel(env, l)]
    | CJMP("z", l) -> case stack of 
                        v : stack2 -> if v == 0
                                        then [[stack2, state, w], fromLabel(env, l)]
                                      else
                                        [[stack2, state, w], others]
                                      fi
                        | _ -> failure("Error. Stack is empty!")
                      esac
    | CJMP("nz", l) -> case stack of 
                        v : stack2 -> if v != 0
                                        then [[stack2, state, w], fromLabel(env, l)]
                                      else
                                        [[stack2, state, w], others]
                                      fi
                        | _ -> failure("Error. Stack is empty!")
                      esac
    | LDA(x) -> [[Ref (x) : stack, state, w], others]
    | STI ->  case stack of 
                  v : Ref(x) : stack2 -> [[v : stack2, state <- [x, v], w], others]
                  | _ -> failure("Error. Stack has not two values!")
              esac
    | DROP -> case stack of
                  v : stack2 -> [[stack2, state, w], others]
                  | _ -> failure("Error. Stack is empty!")
              esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn  (Ref(x), e)   ->  case env.genLabel of
                                [eLab, env] ->
                                    case compile (eLab, env, e) of
                                      [labUsed, newEnv, code] -> [false, newEnv, code <+ label(eLab, labUsed) <+ ST (x)]
                                    esac
                              esac
    | Assn  (e1, e2)   ->     case env.genLabels(2) of
                                [e1Lab, e2Lab, env] ->
                                    case compile (e1Lab, env, e1) of
                                      [e1LabUsed, env, codeE1] ->
                                        case compile (e2Lab, env, e2) of 
                                         [e2LabUsed, env, codeE2] -> [false, env, (codeE1 <+> label(e1Lab, e1LabUsed) <+> codeE2 <+> label(e2Lab, e2LabUsed)) <+ STI]
                                        esac
                                    esac
                              esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, (s1Code <+> label (s2Lab, s2LabUsed)) <+> s2Code]
                  esac
             esac
        esac
    | If (expr, s1, s2) ->
        case env.genLabels(2) of
          [elseLab, exprLab, env] ->
            case compile(exprLab, env, expr) of
              [labUsedExpr, env, exprCode] ->
                  case compile (lab, env, s1) of
                    [labUsedS1, env, s1Code] ->
                        case compile (lab, env, s2) of
                          [labUsedS2, env, s2Code] -> [true, env,
                            ((exprCode <+> label(exprLab, labUsedExpr)) <+ CJMP("z", elseLab) <+> s1Code <+
                                JMP(lab)) <+ LABEL (elseLab) <+> s2Code]
                        esac
                  esac
            esac
        esac
    | While (expr, stmt) ->
        case env.genLabels(3) of
          [condLab, bodyLab, exprLab, env] ->
            case compile (exprLab, env, expr) of
              [exprLabUsed, env, exprCode] ->
                case compile (condLab, env, stmt) of
                  [_, env, stmtCode] ->
                      [false, env,
                          singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> stmtCode <+ LABEL(condLab)
                          <+> exprCode <+> label(exprLab, exprLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
    | DoWhile (stmt, expr) ->
        case env.genLabels(3) of
          [condLab, bodyLab, exprLab, env] ->
            case compile (exprLab, env, expr) of
              [exprLabUsed, env, exprCode] ->
                case compile (condLab, env, stmt) of
                  [labUsed, env, stmtCode] ->
                      [false, env,
                          singletonBuffer(LABEL(bodyLab)) <+> stmtCode <+> label(condLab, labUsed)
                          <+> exprCode <+> label(exprLab, exprLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
    | Binop (s, e1, e2) -> case env.genLabel(2) of
                            [e1Lab, e2Lab, env] ->
                              case compile (e1Lab, env, e1) of
                                [e1LabUsed, env, e1Code] ->
                                    case compile (e2Lab, env, e2) of
                                      [e2LabUsed, env, e2Code] -> [false, env, (((e1Code <+> label (e1Lab, e1LabUsed)) <+> e2Code)
                                                                    <+> label (e2Lab, e2LabUsed)) <+ Binop(s)]
                                    esac
                              esac
                          esac
    | Ignore(e) ->  case env.genLabel of
                      [eLab, env] ->
                        case compile (eLab, env, e) of
                          [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
                        esac
                    esac
    | _                 ->  failure ("unknown instruction\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
