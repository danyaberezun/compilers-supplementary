-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
   case insns of
     i: is -> eval(case i of
           READ -> case readWorld(world) of 
                     [value, new_world] -> [value: stack, state, new_world] 
                   esac
         | WRITE -> case stack of 
                     head: tail -> [tail, state, writeWorld(head, world)] 
                    esac
         | BINOP (operation) -> case stack of 
                           y: x: tail -> [applyBinop(operation, x, y): tail, state, world] 
                         esac
         | LD (variable) -> [state(variable) : stack, state, world]
         | ST (variable) -> case stack of 
                               head: tail -> [tail, state <- [variable, head], world] 
                            esac
         | CONST (var) -> [var: stack, state, w]
         esac, is)
     | _ -> c
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
         Var(name) -> {LD(name)}
      |  Const(n) -> {CONST(n)}
      |  Binop(operation, op1, op2) -> compileExpr(op1) +++ compileExpr(op2) +++ {BINOP(operation)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
         Assn(name, expr) -> compileExpr(expr) +++ { ST (name) }
      |  Seq(first, second) -> compileSM (first) +++ compileSM(second)
      |  Skip -> []
      |  Read(var) -> { READ, ST(var) }
      |  Write(expr) -> compileExpr(expr) +++ { WRITE }
   esac
}