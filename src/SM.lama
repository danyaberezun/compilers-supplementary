-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

public fun evalBinop(binop, l, r) {
  case binop of
    "+" -> l + r
  | "-" -> l - r
  | "*" -> l * r
  | "/" -> l / r
  | "%" -> l % r
  | "<" -> l < r
  | ">" -> l > r
  | "<=" -> l <= r
  | ">=" -> l >= r
  | "==" -> l == r
  | "!=" -> l != r
  | "&&" -> l && r
  | "!!" -> l !! r
  esac
}

fun evalOne(c, ins) {
  case c of
    [s, st, w] -> case ins of 
      READ         -> case readWorld (w) of
        [z, w] -> [z:s, st, w]
      esac
    | WRITE        -> case s of
        z:s -> [s, st, writeWorld (z, w)]
      esac
    | BINOP (op)   -> case s of
        y:x:s -> [evalBinop (op, x, y):s, st, w]
      esac
    | LD    (x)    -> [st(x):s, st, w]
    | ST    (x)    -> case s of
        z:s -> [s, st <- [x, z], w]
      esac
    | CONST (z)    -> [z:s, st, w]
    | _            -> c
    esac
  esac
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of 
    {} -> c
  | head:tail -> case head of 
      JMP (l)     -> eval (env, c, env.fromLabel (l))
    | CJMP (t, l) -> case c of 
        [x:s, st, w] -> 
          var pred = case t of 
            "z"  -> x == 0
          | "nz" -> x != 0
          esac;
          eval (env, [s, st, w], if pred then JMP (l) : tail else tail fi)
      esac
    | _ -> eval (env, evalOne (c, head), tail)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> singletonBuffer(LD(x))
    | Const (const_val) -> singletonBuffer(CONST(const_val))
    | Binop (s, e1, e2) -> compileExpr (e1) <+> compileExpr (e2) <+ BINOP(s)
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (expr, s1, s2) ->
        case env.genLabel of
          [elseLab, env] ->
             case compile (lab, env, s1) of
               [labUsedS1, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsedS2, env, s2Code] -> [true, env,
                      (compileExpr(expr) <+ CJMP("z", elseLab) <+> s1Code <+
                          JMP(lab)) <+ LABEL (elseLab) <+> s2Code]
                  esac
             esac
        esac
    | While (expr, stmt) ->
        case env.genLabels(2) of
          [condLab, bodyLab, env] ->
            case compile (condLab, env, stmt) of
              [_, env, stmtCode] ->
                  [false, env,
                      singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> stmtCode <+ LABEL(condLab)
                      <+> compileExpr(expr) <+ CJMP("nz", bodyLab)]
            esac
        esac
    | DoWhile (stmt, expr) ->
        case env.genLabels(2) of
          [condLab, bodyLab, env] ->
            case compile (condLab, env, stmt) of
              [labUsed, env, stmtCode] ->
                  [false, env,
                      singletonBuffer(LABEL(bodyLab)) <+> stmtCode <+> label(condLab, labUsed)
                      <+> compileExpr(expr) <+ CJMP("nz", bodyLab)]
            esac
        esac
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
