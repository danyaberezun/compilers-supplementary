-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun assignArgs(state, args) {
    fun place(i, a) {
      assign(state, Arg (i), a);
      i + 1
    }
    foldl (place, 0, args)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval(conf@[stack, ctrlStack, state, world], insns) {
--       failure("%s", insns.string);
    case insns of
        { }              -> conf
      | instruct : other ->
        case instruct of
            CONST (n)  -> eval([n:stack, ctrlStack, state, world], other)
          | READ       -> case readWorld(world) of
            [v, nworld] -> eval([v:stack, ctrlStack, state, nworld], other)
          esac
          | WRITE      -> case stack of
            v : st -> eval([st, ctrlStack, state, writeWorld(v, world)], other)
          esac
          | BINOP (s)  -> case stack of
            r : l : st -> eval([evalOp(s, l, r):st, ctrlStack, state, world], other)
          esac
          | LD    (v)  -> eval([lookup(state, v):stack, ctrlStack, state, world], other)
          | ST    (s)  -> case stack of
            v : st -> assign(state, s, v); eval(conf, other)
          esac
          | LABEL  (s) -> eval(conf, other)
          | JMP    (s) -> eval(conf, fromLabel(env, s))
          | CJMP(0, s) -> case stack of v : st -> if (v == 0) then eval([st, ctrlStack, state, world], fromLabel(env, s))
            else eval([st, ctrlStack, state, world], other) fi esac
          | CJMP(1, s) -> case stack of v : st -> if (v != 0) then eval([st, ctrlStack, state, world], fromLabel(env, s))
            else eval([st, ctrlStack, state, world], other) fi esac
          | LDA (s)    -> eval([Ref(s):stack, ctrlStack, state, world], other)
--           | STI        -> case stack of v : s : st ->
--             assign(state, s, v); eval([v:st, ctrlStack, state, world], other)
--           esac
          | STA        ->
            case stack of
              v : Ref(x) : st -> assign(state, x, v); eval([v : st, ctrlStack, state, world], other)
              | v : i : arr : st -> arr[i] := v; eval([v : st, ctrlStack, state, world], other)
            esac
          | DROP       -> case stack of v : st -> eval([st, ctrlStack, state, world], other) esac
          | DUP        -> case stack of v : st -> eval([v:v:st, ctrlStack, state, world], other) esac
          | GLOBAL (x) -> assign(state, Glb(x), 0); eval(conf, other)
          | CALL (funLabel, argAmount) -> eval([stack, [state, other]:ctrlStack, state, world], fromLabel(env, funLabel))
          | BUILTIN (funName, argAmount) -> case take(stack, argAmount) of
            [stack, taken] -> case evalBuiltin(funName, taken, world) of
              [result, world] -> eval([result : stack, ctrlStack, state, world], other) esac
          esac
          | BEGIN (f, argAmount, locs) -> case take(stack, argAmount) of
            [stack, argsValues] -> case makeState(argAmount, locs) of
              state -> assignArgs(state, argsValues); eval([stack, ctrlStack, state, world], other)
            esac
          esac
          | END -> case ctrlStack of
              {} -> conf
            | [state, other]:ctrlStack -> eval([stack, ctrlStack, state, world], other)
          esac
          | STRING (s) -> eval([s:stack, ctrlStack, state, world], other)
          | ELEM -> case stack of i : arr : st ->
            case arr of
                Sexp(tag, arr) -> eval([arr[i] : st, ctrlStack, state, world], other)
              | _ -> eval([arr[i] : st, ctrlStack, state, world], other)
            esac
          esac
          | ARRAY (n) -> case take(stack, n) of
            [stack, taken] -> eval([listArray(taken) : stack, ctrlStack, state, world], other)
          esac
          | SEXP (tag, n) -> case take(stack, n) of
            [stack, taken] -> eval([Sexp(tag, listArray(taken)) : stack, ctrlStack, state, world], other)
          esac
        esac
    esac
  }
  
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
        Loc (i, true) -> Loc (i)
      | Glb (x, true) -> Glb (x)
      | Arg (i)       -> Arg (i) -- Keine Ahnung
      | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

fun addDef([env, globals, funs], def) {
  case def of
      Var (s) ->
        [
          env.addVars(s),
          if (env.isGlobal()) then s else {} +++ globals fi,
          funs
        ]
    | Fun(name, argNames, body) ->
        case env.genFunLabel(name) of
          [funLabel, env1] ->
            [
              env1.addFun(name, funLabel, size(argNames)),
              globals,
              Fun (funLabel, argNames, body) : funs
            ]
        esac
  esac
}

fun addAllDefs (env, defs) {
  fun newGlobals(env, globals, names) {
    if env.isGlobal then
      foldl(fun(defs, name) {
        defs <+ GLOBAL (name)
      }, globals, names)
      else
        globals
    fi
  }

  foldl(
    fun ([env, funs, globalDefs], def) {
      case def of
          Var(names) -> [addVars(env, names), funs, newGlobals(env, globalDefs, names)]
        | f@Fun(name, args, body) -> case genFunLabel(env, name) of
          [lab, env] -> [addFun(env, name, lab, size(args)), [lab, args, body]: funs, globalDefs]
        esac
      esac
    },
    [env, {}, emptyBuffer()],
    defs
  )
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
        Skip               -> [false, env, emptyBuffer()]
      | Var    (x)         -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)         -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Const  (n)         -> [false, env, singletonBuffer(CONST(n))]
      | Assn (e1, e2)      -> case env.genLabels(2) of
        [afterE1, afterE2, env1] -> case compile(afterE1, env1, e1) of
          [afterE1Used, env2, e1Code] -> case compile(afterE2, env2, e2) of
            [afterE2Used, env3, e2Code] -> [false, env3, e1Code <+> label(afterE1, afterE1Used) <+> e2Code <+> label(afterE2, afterE2Used) <+ STA]
          esac
        esac
      esac
      | Seq (e1, e2)       -> case env.genLabel of
        [s2Lab, env] ->
          case compile(s2Lab, env, e1) of
            [s2LabUsed, env, s1Code] ->
              case compile(lab, env, e2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label(s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
      esac
      | If (e, e1, e2)     -> case env.genLabels(2) of
        [afterE, onFalse, env] ->
          case compile(afterE, env, e) of
            [afterEUsed, env, eCode] ->
              case compile(lab, env, e1) of
                [_, env, s1Code] ->
                  case compile(lab, env, e2) of
                    [_, env, s2Code] ->
                      [true, env, eCode <+> label(afterE, afterEUsed) <+ CJMP(0, onFalse) <+> s1Code <+ JMP(lab) <+> label(onFalse, true) <+> s2Code]
                  esac
              esac
          esac
      esac
      | While (e, e1)      ->
        case env.genLabels(2) of
          [lBegin, afterE, env] ->
            case compile(afterE, env, e) of
              [afterEUsed, env, eCode] ->
                case compile(lBegin, env, e1) of
                  [lBeginUsed, env, e1Code] -> [true, env, label(lBegin, true) <+> (eCode <+> label(afterE, afterEUsed) <+ CJMP(0, lab)) <+> (e1Code <+ JMP(lBegin))]
                esac
            esac
        esac
      | DoWhile (e1, e)    ->
        case env.genLabels(2) of
          [afterE, rightAfterS, env] ->
            case compile(afterE, env, e) of
              [afterEUsed, env, eCode] ->
                case compile(rightAfterS, env, e1) of
                  [rightAfterSUsed, env, e1Code] ->
                    case env.genLabel of
                      [lBegin, env] -> [true, env, label(lBegin, true) <+> e1Code <+> label(rightAfterS, rightAfterSUsed) <+> eCode <+> label(afterE, afterEUsed) <+ CJMP(0, lab) <+ JMP(lBegin)]
                    esac
                esac
            esac
        esac
      | Binop (st, e1, e2) -> case env.genLabels(2) of
        [afterE1, afterE2, env1] -> case compile(afterE1, env1, e1) of
          [afterE1Used, env2, e1Code] -> case compile(afterE2, env2, e2) of
            [afterE2Used, env3, e2Code] -> [false, env3, e1Code <+> label(afterE1, afterE1Used) <+> e2Code <+> label(afterE2, afterE2Used) <+ BINOP(st)]
          esac
        esac
      esac
      | Ignore (e1)        -> case env.genLabel of
        [afterE1, env1] -> case compile(afterE1, env1, e1) of
          [afterE1Used, env2, e1Code] -> [false, env2, e1Code <+> label(afterE1, afterE1Used) <+ DROP]
        esac
      esac
      | Scope(defs, expr) ->
        case beginScope(env) of
          env -> case addAllDefs(env, defs) of
            [env, funs, globalScope] -> case foldl(
              fun (env, f) {
                case f of
                  [lab, args, body] -> rememberFun(env, lab, args, body)
                esac
              }, env, funs) of
              env -> case compile(lab, env, expr) of
                [used, env, code] -> [used, leaveScope(env), globalScope <+> code]
              esac
            esac
          esac
        esac
      | Call (funName, args) -> case env.lookupFun(funName) of
        Fun (funLabel, argsAmount) ->  case env.genLabel of
          [argsLabel, env] -> case compile(argsLabel, env, foldl(fun (expr, arg) {Seq(expr, arg) }, Skip, args)) of
            [argsLabelUsed, env, argsCode] -> if (funLabel[0] == '$') then
              [false, env, argsCode <+> label(argsLabel, argsLabelUsed) <+ BUILTIN(funName, argsAmount)]
              else
                [false, env, argsCode <+> label(argsLabel, argsLabelUsed) <+ CALL(funLabel, argsAmount)]
            fi
          esac
        esac
      esac
      | Set (x, e) -> compile(lab, env, Assn(Ref(x), e))
      | String  (s)         -> [false, env, singletonBuffer(STRING(s))]
      | ElemRef (arrExpr, indExpr) -> case env.genLabel of
        [afterArrayLabel, env] -> case compile(afterArrayLabel, env, arrExpr) of
          [afterArrayLabelUsed, env, arrayCode] -> case env.genLabel of
            [afterIndLabel, env] -> case compile(afterIndLabel, env, indExpr) of
              [afterIndLabelUsed, env, indCode] -> [false, env, arrayCode <+> label(afterArrayLabel, afterArrayLabelUsed) <+> indCode <+> label(afterIndLabel, afterIndLabelUsed)]
            esac
          esac
        esac
      esac
      | Elem (arrExpr, indExpr) -> case env.genLabels(2) of
        [afterArrayLabel, afterIndLabel, env] -> case compile(afterArrayLabel, env, arrExpr) of
          [afterArrayLabelUsed, env, arrayCode] -> case compile(afterIndLabel, env, indExpr) of
            [afterIndLabelUsed, env, indCode] -> [false, env, arrayCode <+> label(afterArrayLabel, afterArrayLabelUsed) <+> indCode <+> label(afterIndLabel, afterIndLabelUsed) <+ ELEM]
          esac
        esac
      esac
      | Array (arrExprs) ->
        case foldl(fun([env, compiledElementsCode], arrayElem) { case compile(lab, env, arrayElem) of [_, env, arrayElemCompiled] -> [env, compiledElementsCode <+> arrayElemCompiled] esac }, [env, emptyBuffer ()], arrExprs) of
          [env, code] -> [false, env, code <+ ARRAY (size (arrExprs))]
        esac
      | Sexp (tag, arrExprs) ->
        case foldl(fun([env, compiledElementsCode], arrayElem) { case compile(lab, env, arrayElem) of [_, env, arrayElemCompiled] -> [env, compiledElementsCode <+> arrayElemCompiled] esac }, [env, emptyBuffer ()], arrExprs) of
          [env, code] -> [false, env, code <+ SEXP (tag, size (arrExprs))]
        esac
      | _ -> failure("Compile is not implemented for intruction %s", stmt.string)
    esac
  }

  fun appendFunctions(env, code) {
    fun generate(env, f@Fun(flabel, args, body, state)) {
      case genLabel(addArgs(beginFun(env, state), args)) of
        [lbl, env] -> case compile(lbl, env, body) of
          [used, env, code] ->
            appendFunctions(env,
              singletonBuffer(LABEL (flabel))
                <+  BEGIN(flabel, size(args), getLocals(env))
                <+> code
                <+> label(lbl, used)
                <+  END
            )
        esac
      esac
    }
    case getFuns(env) of
      [funs, env] ->
        foldl(fun(code, f){ code <+> generate(env, f) }, code, funs)
    esac
  }

  case initCompEnv ().beginScope.addFun ("read"  , "$read"  , 0)
                                .addFun ("write" , "$write" , 1)
                                .addFun ("length", "$length", 1).genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          var mainCode =
            singletonBuffer(LABEL("main"))
              <+  BEGIN("main", 0, getLocals(env))
              <+> code
              <+> label(endLab, endLabUsed)
              <+  END;
          getBuffer $ appendFunctions(env, mainCode)
      esac
  esac
}