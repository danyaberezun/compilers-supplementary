-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
   case insns of 
      {} -> c
      | READ : t -> case readWorld (c[2]) of [res, w] -> eval ([res : c[0], c[1], w], t) esac
      | WRITE : t -> case c[0] of e: stT -> eval ([stT, c[1], writeWorld (e, c[2])], t) esac
      | BINOP (op) : t -> case c[0] of top : pretop : stT -> eval ([evalBinop(op, pretop, top) : stT, c[1], c[2]], t) esac
      | LD (varname) : t -> eval([c[1] (varname) : c[0], c[1], c[2]], t)
      | ST (varname) : t -> case c[0] of top : stT -> eval([stT, c[1] <- [varname, top], c[2]], t) esac
      | CONST (n) : t -> eval([n : c[0], c[1], c[2]], t)
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of 
      Var (name) -> {LD (name)}
      | Const (value) -> {CONST (value)}
      | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of 
      Assn (varname, varexpr) ->  compileExpr(varexpr) +++ {ST (varname)}
      | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
      | Skip -> {}
      | Read (varname) -> {READ, ST (varname)}
      | Write (expr1) -> compileExpr(expr1) +++ {WRITE}
   esac
}