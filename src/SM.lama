-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun eval (c@[stack, state, world], insns) {
   case insns of
      {} -> c
   |  head:tail ->
      case head of
         READ ->
            let [value, new_world] = readWorld(world) in
            eval([value:stack, state, new_world], tail)
      |  WRITE ->
            let value:end = stack in
            eval([end, state, writeWorld(value, world)], tail)
      |  BINOP(operation) ->
            let op2:op1:end = stack in
            eval([evalBinop(operation, op1, op2) : end, state, world], tail)
      |  LD(x) -> eval([state(x) : stack, state, world], tail)
      |  ST(name) ->
            let value:end = stack in
            eval([end, state <- [name, value], world], tail)
      |  CONST(const) -> eval([const : stack, state, world], tail)
      esac
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
   case expr of
      Var(name) -> {LD(name)}
   |  Const(const) -> {CONST(const)}
   |  Binop(operation, op1, op2) -> compileExpr(op1) +++ compileExpr(op2) +++ {BINOP(operation)}
   esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
   case stmt of
      Assn(name, expr) -> compileExpr(expr) +++ {ST(name)}
   |  Seq(first, second) -> compileSM(first) +++ compileSM(second)
   |  Skip -> {}
   |  Read(var) -> {READ, ST(var)}
   |  Write(expr) -> compileExpr(expr) +++ {WRITE}
   esac
}