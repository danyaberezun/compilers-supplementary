-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration

fun evalInsn ([stack, states, world], insn) {
  case insn of
    CONST (n) -> [n:stack, states, world]
  | ST (x) -> [snd (stack), states <- [x, fst (stack)], world]
  | READ -> [fst (readWorld(world)):stack, states, snd (readWorld(world))]
  | LD (x) -> [states(x):stack, states, world]
  | WRITE -> [snd (stack), states, writeWorld (fst (stack), world)]
  | BINOP (op) -> case stack of
                    r:l:tail -> [evalOp(op, l, r):tail, states, world]
                  esac
  esac
}

fun eval (c, insns) {
  case insns of
    {} -> c
  | head:tail -> eval(evalInsn(c, head), tail)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (n) -> {CONST (n)}
  | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Read (x) -> {READ, ST (x)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  | Seq (l, r) -> compileSM(l) +++ compileSM(r)
  | Assn (x, e) -> compileExpr(e) +++ {ST (x)}
  | Skip -> {}
  esac
}