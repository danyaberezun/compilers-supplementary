-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
   let [stack, st, w] = c in 
      case insns of 
         s:t -> case s of 
            READ      -> let [value, w2] = readWorld(w) in eval([value:stack, st, w2], t)
          | WRITE     -> let value:stack2 = stack in 
              eval([stack2, st, writeWorld(value, w)], t)
          | BINOP (s) -> let value1:value2:stack2 = stack in 
              eval([evalExpr(st, Binop(s, Const(value2), Const(value1))):stack2, st, w], t)
          | LD    (x) -> eval([st(x):stack, st, w], t)
          | ST    (x) -> let value:stack2 = stack in 
              eval([stack2, st <- [x, value], w], t)
          | CONST (n) -> eval([n:stack, st, w], t)
            esac
       | {}  -> c
         esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var   (name)             -> { LD (name) }
    | Const (value)            -> { CONST (value) }
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP (op) }
      esac  
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
      Assn  (name, expr)   -> compileExpr(expr) +++ { ST(name) }
    | Seq   (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip                 -> {}
    | Read  (name)         -> { READ, ST(name) }
    | Write (expr)         -> compileExpr(expr) +++ { WRITE  }
      esac
}
