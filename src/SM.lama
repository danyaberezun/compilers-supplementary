-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
   case insns of
     {}         -> c
   | head: tail -> case head of
                     READ      -> case readWorld(world) of
                                    [data, newWorld] -> eval([data : stack, state, newWorld], tail)
                                  esac
                   | WRITE     -> case stack of
                                    data: stack -> eval([stack, state, writeWorld(data, world)], tail)
                                  esac
                   | BINOP(op) -> case stack of
                                    y: x: rest -> var res = case op of
                                                        "+"  -> x + y
                                                      | "-"  -> x - y
                                                      | "*"  -> x * y
                                                      | "/"  -> x / y
                                                      | "%"  -> x % y
                                                      | "<"  -> x < y
                                                      | ">"  -> x > y
                                                      | "<=" -> x <= y
                                                      | ">=" -> x >= y
                                                      | "==" -> x == y
                                                      | "!=" -> x != y
                                                      | "&&" -> x && y
                                                      | "!!" -> x !! y
                                                      esac;
                                                  
                                                  eval([res : rest, state, world], tail)
                                  esac
                   | LD(lable) -> eval([state(lable) : stack, state, world], tail)
                   | ST(lable) -> case stack of
                                    value: rest -> eval([rest, state <- [lable, value], world], tail)
                                  esac
                   | CONST(n)  -> eval([n : stack, state, world], tail)
                   esac
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   failure("compileExpr not implemented\n")
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   failure("compileSM not implemented\n")
}