-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
    case insns of
          BINOP(op):insns_rest -> let y:x:stack_rest = stack in eval([evalBinop(op, x, y):stack_rest, st, w], insns_rest) 
        | CONST(x):insns_rest -> eval([x:stack, st, w], insns_rest) 
        | READ:insns_rest -> let [inp, new_w] = readWorld(w) in eval([inp:stack, st, new_w], insns_rest)
        | WRITE:insns_rest -> let out:stack_rest = stack in eval([stack_rest, st, writeWorld(out, w)], insns_rest)
        | LD(x):insns_rest -> eval([st(x):stack, st, w], insns_rest)
        | ST(x):insns_rest -> let y:stack_rest = stack in eval([stack_rest, st <- [x, y], w], insns_rest)
        | _ -> c
    esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
          Var(x) -> {LD(x)}
        | Const(x) -> {CONST(x)}
        | Binop(op, x, y) -> compileExpr(x) +++ compileExpr(y) +++ {BINOP(op)}
    esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of 
          Assn(x, e) -> compileExpr(e) +++ {ST(x)}
        | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
        | Read(x) -> {READ, ST(x)}
        | Write(e) -> compileExpr(e) +++ {WRITE}
        | Skip -> {}
    esac
}
