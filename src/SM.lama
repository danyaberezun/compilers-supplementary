-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    fun varity (f) {
      if f then "var" else "val" fi
    }
    
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      insn : others ->  case evalDefault(c, insn, others) of
                          [newC, program] -> eval(newC, program)
                        esac
      | _ -> c
    esac
  }

  fun evalDefault(c@[stack, cst, state, w], insn, others) {
    case insn of 
      CONST(n) -> [[n : stack, cst, state, w], others] |
      BINOP(op) -> let top1:top2:new_stack = stack in [[evalOp(op, top2, top1):new_stack, cst, state, w], others] |
      LD(x) -> [[lookup(state, x) : stack, cst, state, w], others] |
      ST(x) -> let v:_ = stack in assign(state, x, v); [[stack, cst, state, w], others] | 
      LABEL(l) -> [c, others] |
      JMP(l) -> [c, fromLabel(env, l)] |
      LDA(x) -> [[Ref (x) : stack, cst, state, w], others] |
      CJMP("z", l) -> let uv:new_stack = stack in [[new_stack, cst, state, w], if uv == 0 then fromLabel(env, l) else others fi] |
      CJMP("nz", l) -> let uv:new_stack = stack in [[new_stack, cst, state, w], if uv != 0 then fromLabel(env, l) else others fi] |
      DROP -> let v:stack2 = stack in [[stack2, cst, state, w], others] |
      DUP -> let v : stack2 = stack in [[v : v : stack2, cst, state, w], others] |
      END ->  case cst of 
                [new_state, prog] : cst -> [[stack, cst, new_state, w], prog] |
                {} -> [c, {}]
              esac |
      BEGIN(_, a, l) -> let [s, new_state] = createLoc(stack, a, l) in [[s, cst, new_state, w], others] |
      CALL(f, _) -> [[stack, [state, others] : cst, state, w], fromLabel(env, f)] |
      GLOBAL(x) -> assign(state, Glb(x), 0); [c, others] |
      STRING(s) -> [[s : stack, cst, state, w], others] |
      ARRAY(n) -> let [_ : new_stack, lst] = take(stack, n) in [[listArray(lst) : new_stack, cst, state, w], others] |
      STA -> case stack of
               v : (i@#val) : (arr@#array) : stack -> arr[i] := v; [[v : stack, cst, state, w], others] |
               v : (i@#val) : (arr@#str) : stack -> arr[i] := v; [[v : stack, cst, state, w], others] |
               v : (i@#val) : (arr@Sexp(s, a)) : stack -> a[i] := v; [[v : stack, cst, state, w], others] |
               v : Ref(x) : Ref(_) : stack -> assign(state, x, v); [[v : stack, cst, state, w], others]
             esac |
      ELEM -> let (i@#val) : u : new_stack = stack in (
          case u of
            (arr@#array) -> [[arr[i] : new_stack, cst, state, w], others] |
            (arr@#str) -> [[arr[i] : new_stack, cst, state, w], others] |
            (arr@Sexp(s, a)) -> [[a[i] : stack, cst, state, w], others]
          esac
        ) |
      BUILTIN(f, n) ->
        let [new_stack, lst]  = take(stack, n) in (
          let [v, w]  = evalBuiltin(f, lst, w) in (
            [[v : new_stack, cst, state, w], others]
          )
        ) |
      SEXP(s, n) -> let [_ : new_stack, lst] = take(stack, n) in [[Sexp(s, listArray(lst)) : new_stack, cst, state, w], others]
    esac
  }

  fun createLoc(s, na, nl) {
    let [r, took] = take(s, na) in [r, [listArray(took), initArray(nl, fun (_) {0})]]
  }
  
  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, true)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, true)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a value in the scope
  fun addVal (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name, false)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals, false)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Loc (i, true) -> Loc (i)
    | Glb (x, true) -> Glb (x)
    | _             -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    esac
  }

  -- Lookups value
  fun lookupVal (name) {
    case lookup (state, name) of
      Loc (i, _) -> Loc (i)
    | Glb (x, _) -> Glb (x)
    | Arg (i)    -> Arg (i)
    | _          -> error (sprintf ("the name ""%s"" does not designate a value", name), getLoc (name))
    esac
  }
  
  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   addVal,
   beginFun,
   getFuns,
   lookupVar,
   lookupVal,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun addVal (env, name) {
  env [6] (name)
}

fun beginFun (env, state) {
  env [7] (state)
}

fun getFuns (env) {
  env [8] ()
}

fun lookupVar (env, name) {
  env [9] (name)
}

fun lookupVal (env, name) {
  env [10] (name)
}

fun lookupFun (env, name) {
  env [11] (name)
}

fun getLocals (env) {
  env [12] ()
}

fun genFunLabel (env, name) {
  env [13] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [14] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [15] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals values
fun addVals (env, names) {
  foldl (fun (env, name) {addVal (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany(lab, env, exps) {
    case exps of
      {e}    -> compile (lab, env, e)
    | e : es ->
        let [lab1, env] = genLabel(env) in (
          let [eu, env, ecd] = compile(lab1, env, e) in (
            let [lab2, env, escd] = compileMany(lab, env, es) in (
              [lab2, env, ecd <+> label (lab1, eu) <+> escd]
            )
          )
        )
    esac
  }

fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVal(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x))) <+ DUP]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Assn  (Ref(x), e)   ->          let [lab1, env] = genLabel(env) in (
                                        let [lab2, new_env, cd] = compile (lab1, env, e) in (
                                          [false, new_env, cd <+> label(lab1, lab2) <+ ST (lookupVar(env, x))]
                                        )
                                      )
    | Assn  (er, e)   ->          let [lab1, env] = genLabel(env) in (
                                    let [lab2, new_env, cd] = compileMany (lab1, env, {er, e}) in (
                                      [false, new_env, (cd <+> label(lab1, lab2)) <+ STA]
                                    )
                                  )
    | Seq   (s1, s2)    -> let [lab1, env] = genLabel(env) in (
                             let [lab2, env, code1] = compile(lab1, env, s1) in (
                               let [lab3, env, code2] = compile(lab, env, s2) in
                                 [lab3, env, (code1 <+> label(lab1, lab2)) <+> code2]
                             )
                           )
    | If (expr, s1, s2) -> let [lab1, lab2, env] = genLabels(env, 2) in (
                             let [lab3, env, code1] = compile(lab2, env, expr) in (
                               let [_, env, code2] = compile(lab, env, s1) in (
                                 let [_, env, code3] = compile(lab, env, s2) in
                                   [true, env, ((code1 <+> label(lab2, lab3)) <+ CJMP("z", lab1) <+> code2 <+ JMP(lab)) <+ LABEL (lab1) <+> code3]
                               )
                             )
                           )
    | While (expr, stmt) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                              let [lab4, env, code1] = compile(lab3, env, expr) in (
                                let [_, env, code2] = compile(lab1, env, stmt) in
                                  [false, env, singletonBuffer(JMP(lab1)) <+ LABEL(lab2) <+> code2 <+ LABEL(lab1) <+> code1 <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                              )
                            )
    | DoWhile (stmt, expr) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                                let [lab4, env, exprCode] = compile(lab3, env, expr) in (
                                  let [lab5, env, stmtCode] = compile(lab1, env, stmt) in
                                    [false, env, singletonBuffer(LABEL(lab2)) <+> stmtCode <+> label(lab1, lab5) <+> exprCode <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                                )
                              )
    | Binop (s, e1, e2) -> case genLabels(env, 2) of
                            [e1Lab, e2Lab, env] ->
                              case compile (e1Lab, env, e1) of
                                [e1LabUsed, env, e1Code] ->
                                    case compile (e2Lab, env, e2) of
                                      [e2LabUsed, env, e2Code] -> [false, env, (((e1Code <+> label (e1Lab, e1LabUsed)) <+> e2Code)
                                                                    <+> label (e2Lab, e2LabUsed)) <+ BINOP(s)]
                                    esac
                              esac
                          esac
    | Ignore(e) ->  case genLabel(env) of
                      [eLab, env] ->
                        case compile (eLab, env, e) of
                          [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
                        esac
                    esac
    | Scope (dfns, expr) ->
                          var code = emptyBuffer();
                          env := beginScope(env);
                          env := foldl(fun(env, dfn) {
                            case dfn of
                              Fun(name, args, body) -> (let [fLab, env] = genFunLabel(env, name) in addFun(env, name, fLab, size(args))) |
                              Var(xs) ->  addVars(env, xs)
                            esac
                          }, env, dfns);
                          env := foldl(fun(env, dfn) {
                            case dfn of
                              Fun(name, args, body) -> (let [fLab, _] = genFunLabel(env, name) in rememberFun(env, fLab, args, body)) |
                              Var(_) -> env
                            esac
                          }, env, dfns);
                          code := if isGlobal(env)
                                  then foldl(fun(code, dfn) {
                                      case dfn of
                                        Var(xs) ->  foldl(fun(code, x) {code <+ GLOBAL(x)}, code, xs)
                                        | _ -> code
                                      esac
                                    },
                                    code, dfns)
                                  else code
                                  fi;
                          let [lab2, env, cd] = compile(lab, env, expr) in [lab2, endScope(env), code <+> cd]
    | Call(name, args) -> case args of
                            {} -> let Fun(fLabel, nArgs) = lookupFun(env, name) in (
                                    if size(args) == nArgs
                                    then [false, env, singletonBuffer(CALL(fLabel, nArgs))]
                                    else failure ("size(args) != nArgs\n")
                                    fi
                                  )
                            | _ ->    let [lab1, env] = genLabel(env) in (
                                        let [lab2, env, cd] = compileMany(lab1, env, args) in (
                                          let Fun(fLabel, nArgs) = lookupFun(env, name) in (
                                            if size(args) == nArgs
                                            then [false, env, (cd <+> label(lab1, lab2)) <+ CALL(fLabel, nArgs)]
                                            else failure("size(args) != nArgs\n")
                                            fi
                                          )
                                        )
                                      )
                          esac
    | String (s) -> [false, env, singletonBuffer(STRING(s))]
    | Array (exps) ->
                      case exps of
                        {} -> [false, env, singletonBuffer(CONST(0)) <+ ARRAY(0)] |
                        _ ->
                          var sz = size(exps);
                          let [lab1, env1] = genLabel(env) in (
                            let [lab2, env2, cd] = compileMany(lab1, env1, exps) in (
                              [false, env2, (singletonBuffer(CONST(sz)) <+> cd <+> label (lab1, lab2)) <+ ARRAY(sz)]
                            )
                          )
                      esac
    | Sexp (name, exps) ->
                      case exps of
                        {} -> [false, env, singletonBuffer(CONST(0)) <+ SEXP(name, 0)] |
                        _ ->
                          var sz = size(exps);
                          let [lab1, env1] = genLabel(env) in (
                            let [lab2, env2, cd] = compileMany(lab1, env1, exps) in (
                              [false, env2, (singletonBuffer(CONST(sz)) <+> cd <+> label(lab1, lab2)) <+ SEXP(name, sz)]
                            )
                          )
                      esac
    | Elem (e_array, e_index) -> let [lab1, env1] = genLabel(env) in (
                                  let [lab2, env2, cd] = compileMany(lab1, env1, {e_array, e_index}) in (
                                    [false, env2, (cd <+> label(lab1, lab2)) <+ ELEM]
                                  )
                                )
    | ElemRef (e_array, e_index) ->  let [lab1, env1] = genLabel(env) in (
                                      let [lab2, env2, cd] = compileMany(lab1, env1, {e_array, e_index}) in (
                                        [false, env2, (cd <+> label(lab1, lab2))]
                                      )
                                    )
    | Builtin (f, args) -> case args of
                            {} -> [false, env, singletonBuffer(BUILTIN(f, 0))] |
                            _ ->
                                  let [lab1, env1] = genLabel(env) in (
                                    let [lab2, env2, cd] = compileMany(lab1, env1, args) in (
                                      [false, env2, (cd <+> label(lab1, lab2)) <+ BUILTIN(f, size(args))]
                                    )
                                  )
                          esac
    esac
  }

  fun compileFuns(env, main) {
    fun iterate(env, flist) {
      case flist of
        {} -> case getFuns(env) of
                [{}, env1] -> emptyBuffer() |
                [fns, env1] -> iterate(env1, fns)
              esac |
        Fun (f, args, body, state) : fs ->
          let [lab1, env] = genLabel(addArgs(beginFun(env, state), args)) in (
            let [lab4, env, code] = compile(lab1, env, body) in (
              singletonBuffer(LABEL(f)) <+ BEGIN(f, size(args), getLocals(env)) <+> code <+> label(lab1, lab4) <+ END <+> iterate(env, fs)
            )
          )
      esac
    }

    main <+> iterate(env, {})
  }


  let [end1, env] = genLabel(beginScope(initCompEnv ())
                      .addFun("read"  , "$read"  , 0)
                      .addFun("write" , "$write" , 1)
                      .addFun("length", "$length", 1)) in (
    let [end2, env, cd] = compile(end1, env, stmt) in (
      getBuffer $ compileFuns(env, singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> cd <+> label(end1, end2) <+ END)
    )
  )
}
