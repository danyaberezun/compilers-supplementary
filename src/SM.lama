-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval ([stack, state, world], insns) {
  case insns of
    {} -> [stack, state, world]
  | insn:insnsT -> eval (
    case insn of
      READ -> let [varRed, newWorld] = readWorld (world)
                in [varRed:stack, state, newWorld]
    | WRITE -> case stack of
        {} -> failure( "WRITE: stack empty\n")
      | s:stackT -> [stackT, state, writeWorld (s, world)]
      esac
    | BINOP (op) -> case stack of
        {} -> failure ("BINOP: stack empty\n")
      | {i} -> failure ("BINOP: stack size is 1\n")
      | i:j:stackT -> [applyBinop (op, j, i):stackT, state, world]
      esac
    | LD (x) -> [state (x):stack, state, world]
    | ST (x) -> case stack of
        {} -> failure ("ST: stack empty")
      | i:stackT -> [stackT, state <- [x, i], world]
      esac
    | CONST (i) -> [i:stack, state, world]
    esac, insnsT)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
-- NOTE: This function returns reversed list.
-- This is needed for ability to conveniently add one operation
-- to its beginning during construction.
fun compileExprRev (expr) {
  case expr of
    Var (x) -> {LD (x)}
  | Const (i) -> {CONST (i)}
  | Binop (op, e1, e2) -> BINOP (op) : (compileExprRev (e2) +++ compileExprRev (e1))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
-- NOTE: This function returns reversed list.
fun compileSMRev (stmt) {
  case stmt of
    Assn (x, e)  -> ST (x) : compileExprRev (e)
  | Seq (s1, s2) -> compileSMRev (s2) +++ compileSMRev (s1)
  | Skip         -> {}
  | Read (x)     -> ST (x) : {READ}
  | Write (e)    -> WRITE : compileExprRev (e)
  esac
}

public fun compileSM (stmt) {
  reverse (compileSMRev (stmt))
}