-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
   case insns of
      i:is -> eval(
         case i of
            READ -> let [x, w] = readWorld(world) in [x:stack, state, w]
         |  WRITE -> let x:s = stack in [s, state, writeWorld(x, world)]
         |  BINOP(op) -> let y:x:s = stack in [evalBinop(op, x, y):s, state, world]
         |  LD(x) -> [state(x):stack, state, world]
         |  ST(x) -> let y:s = stack in [s, state <- [x, y], world]
         |  CONST(n) -> [n:stack, state, world]
         esac,
         is)
   |  {} -> c
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var (s) -> {LD (s)}
   |  Const (n) -> {CONST (n)}
   |  Binop (s, e1, e2) -> compileExpr (e1) +++ compileExpr(e2) +++ {BINOP (s)}
  esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
      Assn (s, e) -> compileExpr(e) +++ {ST(s)}
   |  Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
   |  Skip -> {}
   |  Read (s) -> {READ, ST(s)}
   |  Write (e) -> compileExpr(e) +++ {WRITE}
   esac
}