-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
   let [stack, st, w] = c in 
      case insns of 
         s:t -> case s of 
            READ         -> let [value, w2] = readWorld(w) in eval(env, [value:stack, st, w2], t)
          | WRITE        -> let value:stack2 = stack in 
              eval(env, [stack2, st, writeWorld(value, w)], t)
          | BINOP (s)    -> let value1:value2:stack2 = stack in 
              eval(env, [evalExpr(st, Binop(s, Const(value2), Const(value1))):stack2, st, w], t)
          | LD    (x)    -> eval(env, [st(x):stack, st, w], t)
          | ST    (x)    -> let value:stack2 = stack in 
              eval(env, [stack2, st <- [x, value], w], t)
          | CONST (n)    -> eval(env, [n:stack, st, w], t)
          | LABEL (x)    -> eval(env, c, t)
          | JMP   (x)    -> eval(env, c, fromLabel (env, x))
          | CJMP  (e, x) -> let value:stack2 = stack in
              let go = 
                case e of
                   "z"  -> if value == 0 then true else false fi
                 | "nz" -> if value != 0 then true else false fi
                esac 
              in if go then eval (env, [stack2, st, w], fromLabel (env, x)) else eval (env, [stack2, st, w], t) fi
         esac
       | {}  -> c
      esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var   (name)             -> { LD (name) }
    | Const (value)            -> { CONST (value) }
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP (op) }
      esac  
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip                -> [false, env, emptyBuffer ()]
    | Read    (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write   (e)         -> [false, env, compileExpr (e) <+ WRITE]
    | Assn    (x, e)      -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq     (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env]    ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If      (c, s1, s2) -> let [l, env] = env.genLabel in
       let [_, env, code1] = compile (lab, env, s1) in
          let [_, env, code2] = compile (lab, env, s2) in
             [true, env, compileExpr(c) <+ CJMP ("z", l) <+> code1 <+ JMP (lab) <+ LABEL (l) <+> code2 <+ JMP (lab)]
    | While   (c, s)      -> let [lc, env] = env.genLabel in
       let [ls, env] = env.genLabel in
          let [lUsed, env, code] = compile (lc, env, s) in
             [false, env, {JMP(lc)} <+ LABEL (ls) <+> code <+ LABEL (lc) <+> compileExpr(c) <+ CJMP ("nz", ls)]
    | DoWhile (s, c)      -> let [lc, env] = env.genLabel in
       let [ls, env] = env.genLabel in
          let [lUsed, env, code] = compile (lc, env, s) in
             [false, env, {LABEL (ls)} <+> code <+ LABEL (lc) <+> compileExpr(c) <+ CJMP ("nz", ls)]
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
