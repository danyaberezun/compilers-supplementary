-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, world], insns) {
   case insns of
     i:is -> eval(
        case i of 
          READ 
               -> case readWorld(world) of [value, w_] 
               -> [value:stack, st, w_] 
               esac
        | WRITE 
                -> case stack of head:tail 
                -> [tail, st, writeWorld(head, world)] 
                esac
        | BINOP (op)
                -> case stack of r:l:tail 
                -> [evalBinop(op, l, r):tail, st, world] 
                esac
        | LD (x) 
                -> [st(x):stack, st, world]
        | ST (x) 
               -> case stack of head:tail 
               -> [tail, st <- [x, head], world] 
               esac
        | CONST (n) 
               -> [n:stack, st, world]
               esac
      , is)
    | _ -> c
    esac
     
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var(x) -> {LD(x)}
      | Const(n) -> {CONST(n)}
      | Binop(op, e1, e2) ->
         let v1 = compileExpr(e1) in
         let v2 = compileExpr(e2) in
         v1 +++ v2 +++ {BINOP(op)}
      esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
      Assn(x, e) -> compileExpr(e) +++ {ST(x)}
      | Seq(l, r) -> compileSM(l) +++ compileSM(r)
      | Skip -> {}
      | Read(x) -> {READ, ST(x)}
      | Write(e) -> compileExpr(e) +++ {WRITE}
   esac
}