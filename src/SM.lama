-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | SEXP   (t, n)    -> sprintf ("SEXP %s %d", t, n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun getArr (e) {
     case e of 
        Sexp (_, a) -> a 
      | _ -> e 
     esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, cst, st, w], insns) {
     case insns of 
        s:t -> case s of 
           READ              -> let [value, w2] = readWorld(w) in eval ([value:stack, cst, st, w2], t)
         | WRITE             -> let value:stack2 = stack in eval([stack2, cst, st, writeWorld(value, w)], t)
         | BINOP  (op)       -> let value1:value2:stack = stack in eval([evalOp (op, value2, value1):stack, cst, st, w], t)
         | LD     (x)        -> eval ([lookup (st, x):stack, cst, st, w], t)
         | ST     (x)        -> let value:stack = stack in assign (st, x, value); eval([stack, cst, st, w], t)
         | CONST  (n)        -> eval ([n:stack, cst, st, w], t)
         | LABEL  (x)        -> eval (c, t)
         | JMP    (x)        -> eval (c, fromLabel (env, x))
         | CJMP   (e, x)     -> let value:stack2 = stack in
            let go = 
               case e of
                  "z"  -> if value == 0 then true else false fi
                | "nz" -> if value != 0 then true else false fi
               esac 
            in if go then eval ([stack2, cst, st, w], fromLabel (env, x)) else eval ([stack2, cst, st, w], t) fi
         | LDA    (x)        -> eval ([x:stack, cst, st, w], t)
         | STI               -> let value:name:stack2 = stack in assign (st, name, value); eval ([value:stack2, cst, st, w], t)
         | DROP              -> let _:stack2 = stack in eval ([stack2, cst, st, w], t)
         | DUP    (x)        -> let value:_ = stack in eval ([value:stack, cst, st, w], t)
         | GLOBAL (x)        -> eval (c, t)
         | BEGIN  (f, a, nL) -> let [stack, nP] = take (stack, a) in eval ([stack, cst, [listArray (nP), initArray (nL, fun (_) {0})], w], t)
         | END               ->
            case cst of
               {} -> eval (c, {})
             | [tail, st2]:cst2 -> eval ([stack, cst2, st2, w], tail)
            esac
         | CALL   (f, n)     -> eval ([stack, [t, st]:cst, st, w], fromLabel (env, f))
         | STRING (x)        -> eval ([x:stack, cst, st, w], t)
         | ARRAY  (n)        -> let [stack, elems] = take (stack, n) in eval ([listArray (elems):stack, cst, st, w], t)
         | SEXP   (e, n)     -> let [stack, elems] = take (stack, n) in eval ([Sexp (e, listArray (elems)):stack, cst, st, w], t)
         | STA               -> let value:ind:arr:stack = stack in
               getArr (arr)[ind] := value; eval ([value:stack, cst, st, w], t)
         | ELEM              -> let ind:arr:stack = stack in eval ([getArr (arr)[ind]:stack, cst, st, w], t)
         | BUILTIN (f, n)    -> let [stack, nP] = take (stack, n) in
            let [value, w] = evalBuiltin (f, nP, w) in eval ([value:stack, cst, st, w], t)
        esac
     | {}  -> c
     esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if isGlobal ()
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }
  
  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 2, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if isGlobal ()
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi 
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 2
  }
  
  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code foargs, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).
*)

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {}     -> [false, env, emptyBuffer ()]
    | {e}    -> compile (lab, env, e)
    | e : es ->
        case genLabel (env) of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }


  fun compileArgs (env, args) {
     case args of
        arg:tail -> let [la, env] = genLabel (env) in
           let [laUsed, env, acode] = compile (la, env, arg) in
              let [env, argscode] = compileArgs (env, tail) in
                 [env, acode <+> label (la, laUsed) <+> argscode]
      | {}       -> [env, emptyBuffer ()]
     esac
  }

  fun addDefs (env, defs, code, funs) {
     case defs of
        def:t ->
           case def of 
              Fun (f, a, b) -> let [lf, env] = genFunLabel (env, f) in
                 addDefs (addFun (env, f, lf, size (a)), t, code, Fun (lf, a, b) : funs)
            | Var (ns) -> 
                 addDefs (addVars (env, ns), t, if isGlobal (env) then listBuffer (map (fun (n) { GLOBAL (n) }, ns)) else code fi, funs)
           esac
      | {} -> [env, code, funs]
      esac
  }

  fun rememberFuns (env, funs) {
     case funs of
        Fun (f, a, b):t -> rememberFuns (rememberFun (env, f, a, b), t)
      | {} -> env
     esac
  }

  fun getAssignInsn (x) {
     fun equalST(e1, e2) {
        case e1 of
           STI -> case e2 of STI -> true | STA -> false esac
         | STA -> case e2 of STA -> true | STI -> false esac
        esac
     }

     case x of
        Ref     (_)           -> STI
      | ElemRef (_, _)        -> STA
      | If      (_, e1, e2) -> 
         let r1 = getAssignInsn (e1) in
            let r2 = getAssignInsn (e2) in
               if equalST (r1, r2) then r1 else failure ("Bad assignment with Ref and ElemRef") fi
      | Seq     (_, y)        -> getAssignInsn (y)
     esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip                 -> [false, env, emptyBuffer ()]
    | Var     (x)          -> [false, env, singletonBuffer (LD (lookupVar (env, x)))]
    | Ref     (x)          -> [false, env, singletonBuffer (LDA (lookupVar (env, x)))]
    | Const   (n)          -> [false, env, singletonBuffer (CONST (n))]
    | Assn    (x, e)       -> let [lx, env] = genLabel (env) in
       let [lxUsed, env, xcode] = compile (lx, env, x) in
          let [le, env] = genLabel (env) in
             let [leUsed, env, ecode] = compile (le, env, e) in 
                [false, env, xcode <+> label (lx, lxUsed) <+> ecode <+> label (le, leUsed) <+ getAssignInsn (x)]
    | Seq     (s1, s2)     ->
        case genLabel (env) of
          [s2Lab, env]     ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If      (c, s1, s2)  -> let [lc, env] = genLabel (env) in
       let [lcUsed, env, codec] = compile (lc, env, c) in
          let [lelse, env] = genLabel (env) in
             let [_, env, code1] = compile (lab, env, s1) in
                let [_, env, code2] = compile (lab, env, s2) in
                   [true, env, codec <+> label (lc, lcUsed) <+ CJMP ("z", lelse) <+> code1 <+ JMP (lab) <+ LABEL (lelse) <+> code2]
    | While   (c, s)        -> let [lc, env] = genLabel (env) in
       let [ls, env] = genLabel (env) in
          let [le, env] = genLabel (env) in
             let [leUsed, env, codec] = compile (le, env, c) in
                let [lcUsed, env, codes] = compile (lc, env, s) in
                   [false, env, singletonBuffer(JMP(lc)) <+ LABEL (ls) <+> codes <+ LABEL (lc) <+> codec <+> label (le, leUsed)<+ CJMP ("nz", ls)]
    | DoWhile (c, s)        -> let [lc, env] = genLabel (env) in
       let [ls, env] = genLabel (env) in
          let [le, env] = genLabel (env) in
             let [leUsed, env, codec] = compile (le, env, c) in
                let [lcUsed, env, codes] = compile (lc, env, s) in
                   [false, env, singletonBuffer(LABEL (ls)) <+> codes <+> label (lc, lcUsed) <+> codec <+> label (le, leUsed) <+ CJMP ("nz", ls)]
    | Binop   (op, e1, e2)  -> let [le1, env] = genLabel (env) in
       let [le2, env] = genLabel (env) in
          let [le1Used, env, code1] = compile (le1, env, e1) in
             let [le2Used, env, code2] = compile (le2, env, e2) in
                [false, env, code1 <+> label (le1, le1Used) <+> code2 <+> label (le2, le2Used) <+ BINOP (op)]
    | Ignore  (e)           -> let [le, env] = genLabel (env) in
       let [leUsed, env, code] = compile (le, env, e) in
          [false, env, code <+ DROP]
    | Call    (f, a)        -> let Fun (lf, p) = lookupFun (env, f) in
       let [env, acode] = compileArgs (env, a) in 
          case lf of
             Builtin -> [false, env, acode <+ BUILTIN (f, size (a))]
           | _       -> [false, env, acode <+ CALL (lf, size (a))]
          esac
    | Scope   (defs, e)     -> let [env, code, funs] = addDefs (beginScope (env), defs, {}, {}) in
       let env = rememberFuns (env, funs) in 
          let [labUsed, env, ecode] = compile (lab, env, e) in
             [labUsed, endScope (env), code <+> ecode]
    | String  (x)           -> [false, env, singletonBuffer (STRING (x))]
    | Array   (es)          -> let [l, env] = genLabel (env) in
       let [lUsed, env, code] = compileMany (l, env, es) in
          [false, env, code <+> label (l, lUsed) <+ ARRAY (size (es))]
    | Elem    (a, ind)      -> let [la, env] = genLabel (env) in
       let [li, env] = genLabel (env) in
          let [laUsed, env, acode] = compile (la, env, a) in
             let [liUsed, env, icode] = compile (li, env, ind) in
                [false, env, acode <+> label (la, laUsed) <+> icode <+> label (li, liUsed) <+ ELEM]
    | ElemRef    (a, ind)   -> let [la, env] = genLabel (env) in
       let [li, env] = genLabel (env) in
          let [laUsed, env, acode] = compile (la, env, a) in
             let [liUsed, env, icode] = compile (li, env, ind) in
                [false, env, acode <+> label (la, laUsed) <+> icode <+> label (li, liUsed)]
    | Sexp       (t, es)    -> let [l, env] = genLabel (env) in 
       let [lUsed, env, code] = compileMany (l, env, es) in
          [false, env, code <+> label (l, lUsed) <+ SEXP (t, size (es))]
    | Builtin    (x, es)    -> let [l, env] = genLabel (env) in
       let [lUsed, env, code] = compileMany (l, env, es) in
          [false, env, code <+> label (l, lUsed) <+ BUILTIN (x, size (es))]
    esac
  }  

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, size (args), getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
  
  let env = beginScope (initCompEnv ()) in
  let env = addFun (env, "read", Builtin, 0) in
  let env = addFun (env, "write", Builtin, 1) in
  let env = addFun (env, "length", Builtin, 2) in
  case genLabel (env) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}
