-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
    case insns of
        i:is -> case i of 
              READ -> case readWorld(w) of [value, w_] -> eval(env, [value:stack, state, w_], is) esac
            | WRITE -> case stack of head:tail -> eval(env, [tail, state, writeWorld(head, w)], is) esac
            | BINOP (op) -> case stack of r:l:tail -> eval(env, [evalOp(op, l, r):tail, state, w], is) esac
            | LD (variable) -> eval(env, [state(variable):stack, state, w], is)
            | ST (variable) -> case stack of head:_ -> eval(env, [stack, state <- [variable, head], w], is) esac
            | CONST (n) -> eval(env, [n:stack, state, w], is)
            | LABEL(_) -> eval(env, c, is)
            | JMP(lab) -> eval(env, c, fromLabel(env, lab))
            | CJMP(cond, lab) -> let head:tail = stack in
                eval(env, [tail, state, w], 
                    case cond of 
                      "z" -> 
                        if head == 0 
                        then fromLabel(env, lab) 
                        else is 
                        fi
                    | "nz" -> 
                        if head != 0 
                        then fromLabel(env, lab) 
                        else is
                        fi
                    esac
                )
            | LDA(x) -> eval(env, [Ref(x):stack, state, w], is)
            | STI -> case stack of head:Ref(x):tail -> eval(env, [head:tail, state <- [x, head], w], is) esac
            | DROP -> case stack of _:tail -> eval(env, [tail, state, w], is) esac
        esac
        | _ -> c
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

fun compileExpr (expr) {
    case expr of
      Var(x) -> emptyBuffer() <+ LD(x)
    | Const(x) -> emptyBuffer() <+ CONST(x)
    | Binop(op, x, y) -> compileExpr(x) <+> compileExpr(y) <+ BINOP(op)
    esac
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> 
        [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write  (x)      -> 
        case genLabel(env) of [xLab, env] ->
        case compile(xLab, env, x) of [xLab_, env, block] ->
            [false, env, block <+> label(xLab, xLab_) <+ WRITE]
        esac
        esac
    | Assn  (x, e)      -> 
        case genLabel(env) of [lab1, env] ->
        case compile(lab1, env, x) of [lab1_, env, block1] ->
        case genLabel(env) of [lab2, env] ->
        case compile(lab2, env, e) of [lab2_, env, block2] ->
            [false, env, block1 <+> label(lab1, lab1_) <+> block2 <+> label(lab2, lab2_) <+ STI]
        esac
        esac
        esac
        esac
    | Binop (s, l, r) -> 
        case genLabel(env) of [lLab, env] ->
        case genLabel(env) of [rLab, env] ->
        case compile(lLab, env, l) of [lLab_, env, block1] ->
        case compile(rLab, env, r) of [rLab_, env, block2] ->
            [false, env, block1 <+> label(lLab, lLab_) <+> block2 <+> label(rLab, rLab_) <+ BINOP(s)]
        esac
        esac
        esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of [s2Lab, env] ->
        case compile (s2Lab, env, s1) of [s2LabUsed, env, s1Code] ->
        case compile (lab, env, s2) of [labUsed, env, s2Code] -> 
            [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
        esac
        esac
        esac
    | If(cond, block1, block2) ->
        case env.genLabel of [elseLab, env] ->
        case compile(lab, env, block1) of [_, env, tb] ->
        case compile(lab, env, block2) of [_, env, eb] ->
            [true, env, compileExpr(cond) <+ CJMP("z", elseLab) <+> tb <+ JMP(lab) <+ LABEL(elseLab) <+> eb]
        esac esac esac
    | DoWhile(block, cond) ->
        case env.genLabel of [blockLab, env] ->
        case env.genLabel of [condLab, env] ->
        case compile(condLab, env, block) of [clu, env, bc] ->
            [false, env, label(blockLab, true) <+> bc <+> label(condLab, clu) <+> compileExpr(cond) <+ CJMP("nz", blockLab)]
        esac esac esac
    | While(cond, block) -> 
        compile (lab, env, If (cond, DoWhile (block, cond), Skip))
    | Ignore(e) -> 
        case genLabel(env) of [l1, env] ->
        case compile(l1, env, e) of [l2, env, c] ->
            [false, env, c <+> label(l1, l2) <+ DROP]
        esac esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
