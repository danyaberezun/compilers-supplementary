-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[c0, c1, c2], insns) {
  case insns of
    head:tail -> eval(
        case head of
          READ      -> let [x, w] = readWorld(c2) in [x : c0, c1, w]
        | WRITE     -> let x : s = c0 in [s, c1, writeWorld(x, c2)]
        | BINOP(op) ->
              let b:a:s = c0 in
              let res =
                case op of
                    "+"  -> a + b
                |  "-"  -> a - b
                |  "*"  -> a * b
                |  "/"  -> a / b
                |  "%"  -> a % b
                |  "<"  -> a < b
                |  "<=" -> a <= b
                |  ">"  -> a > b
                |  ">=" -> a >= b
                |  "==" -> a == b
                |  "!=" -> a != b
                |  "&&" -> a && b
                |  "!!" -> a !! b
                esac
              in [res : s, c1, c2]
        | LD(x)     -> [c1(x) : c0, c1, c2]
        | ST(x)     -> let z:s = c0 in [s, c1 <- [x, z], c2]
        | CONST(n)  -> [n : c0, c1, c2]
        esac, tail)
  |  {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(x) -> {LD(x)}
  |  Const(n) -> {CONST(n)}
  |  Binop(op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(x, e)  -> compileExpr(e) +++ {ST(x)}
  |  Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
  |  Skip        -> {}
  |  Read(x)     -> {READ, ST(x)}
  |  Write(e)    -> compileExpr(e) +++ {WRITE}
  esac
}
