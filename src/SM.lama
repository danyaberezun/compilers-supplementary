-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn ([stack, state, world], insn) {
  case insn of
    READ ->
      case readWorld(world) of
        [value, world] -> [value:stack, state, world]
      | _ -> failure ("could not read world")
      esac
  | WRITE ->
      case stack of
        value:stack -> [stack, state, writeWorld(value, world)]
      | _ -> failure ("could not read stack")
      esac
  | BINOP (s) ->
      case stack of
        y:x:stack -> [evalOp(s, x, y):stack, state, world]
      | _ -> failure ("could not read stack")
      esac
  | LD (x) -> [state(x):stack, state, world]
  | ST (x) ->
      case stack of
        value:stack -> [stack, state <- [x, value], world]
      | _ -> failure ("could not read stack")
      esac
  | CONST (n) -> [n:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
  | insn:rest -> eval(evalInsn(c, insn), rest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (s) -> {LD (s)}
  | Const (n) -> {CONST (n)}
  | Binop (s, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP (s)}
  | _ -> failure("could not compile expression")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  var value;
  case stmt of
    Assn (s, expr) -> compileExpr(expr) +++ {ST (s)}
  | Seq (st1, st2) -> compileSM(st1) +++ compileSM(st2)
  | Skip -> {}
  | Read (s) -> {READ, ST(s)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
