-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, hd (list) : acc, tl (list))
      fi
    }

    inner (n, {}, list)
  }

  fun assignArgs (newState, lst) {
    foldl (fun (acc, x) {
      assign (newState, Arg (acc), x);
      acc + 1
    }, 0, lst)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[st, cst, s, w], insns) {
    case insns of 
      head:tail -> 
        case head of
          CONST (x) -> eval ([x:st, cst, s, w], tail)
          | READ  -> let [n, newWorld] = readWorld (w) in eval ([n:st, cst, s, newWorld], tail)
          | WRITE -> let value:restStack = st in eval ([restStack, cst, s, writeWorld (value, w)], tail) 
          | LD (x)  -> eval ([lookup (s, x):st, cst, s, w], tail)
          | LDA (x) -> eval ([x:st, cst, s, w], tail)
          | ST (x)  -> let value:restStack = st in
              assign (s, x, value); eval (c, tail) 
          | STI     -> let y:x:restStack = st in
              assign (s, x, y); eval ([y:restStack, cst, s, w], tail)
          | BINOP (op) -> let second:first:restStack = st in
              eval ([evalOp (op, first, second):restStack, cst, s, w], tail)
          | LABEL (l)  -> eval (c, tail) 
          | JMP (l)    -> eval (c, fromLabel (env, l))
          | CJMP ("z", l)  -> let first:restStack = st in
              eval ([restStack, cst, s, w], if first == 0 then fromLabel (env, l) else tail fi)
          | CJMP ("nz", l) -> let first:restStack = st in
              eval ([restStack, cst, s, w], if first == 0 then tail else fromLabel (env, l) fi)
          | DUP -> let value:restStack = st in eval ([value:value:restStack, cst, s, w], tail)
          | DROP -> eval ([tl (st), cst, s, w], tail)
          | BEGIN (f, nargs, nlocals) ->
            let [restStack, argsList] = take (st, nargs) in
              let newState = makeState (nargs, nlocals) in
                assignArgs (newState, argsList); 
                eval ([restStack, cst, newState, w], tail)
          | GLOBAL (x) -> assign (s, Glb(x), 0); eval(c, tail)
          | CALL (f, _) -> eval ([st, [s, tail]:cst, s, w], fromLabel (env, f))
          | END -> 
            case cst of 
              [s, insns] : cst -> eval ([st, cst, s, w], insns)
              | {} -> c
            esac
        esac
      | {} -> c 
    esac
  }

  getOutput (eval ([{}, {}, makeState (0, 0), w], insns) [3])
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {} -> [false, env, emptyBuffer ()]
    | {e}    -> compile (lab, env, e)
    | e : es ->
        case genLabel(env) of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip          -> [false, env, emptyBuffer ()]
      | Var (x)     -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
      | Ref (x)     -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
      | Const (n)   -> [false, env, singletonBuffer (CONST (n))]
      | Ignore (e)  -> let [lab2, env, eCode] = compile (lab, env, e) in [false, env, eCode <+> label (lab, lab2) <+ DROP]
      | Binop (op, left, right) ->
          let [lab1, lab2, env] = genLabels (env, 2) in
            let [lab1Used, env, leftCode] = compile (lab1, env, left) in
              let [lab2Used, env, rightCode] = compile (lab2, env, right) in
                [false, env, leftCode <+> label (lab1, lab1Used) <+> rightCode <+> label (lab2, lab2Used) <+ BINOP (op)]
      | Read  (x)    -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
      | Write (e)    -> let [labUsed, env, eCode] = compile (lab, env, e) in [false, env, eCode <+> label (lab, labUsed) <+ WRITE]
      | Assn (x, e) ->
          let [xLab, eLab, env] = genLabels (env, 2) in
            let [xLabUsed, env, xCode] = compile (xLab, env, x) in
              let [eLabUsed, env, eCode] = compile (eLab, env, e) in
                [false, env, xCode <+> label (xLab, xLabUsed) <+> eCode <+> label (eLab, eLabUsed) <+ STI]
      | Seq (s1, s2) ->
          let [s2Lab, env] = genLabel (env) in
            let [s2LabUsed, env, s1Code] = compile (s2Lab, env, s1) in
              let [labUsed, env, s2Code] = compile (lab, env, s2) in
                [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
      | If (cond, s1, s2) ->
          let [condLab, elseLab, env] = genLabels (env, 2) in
            let [condLabUsed, env, condCode] = compile (condLab, env, cond) in
              let [_, env, thenCode] = compile (lab, env, s1) in
                let [_, env, elseCode] = compile (lab, env, s2) in
                  [ true, env,
                    condCode <+>
                    label (condLab, condLabUsed) <+
                    CJMP  ("z", elseLab) <+>
                    thenCode <+
                    JMP (lab) <+>
                    label (elseLab, true) <+>
                    elseCode
                  ]
      | While (expr, s) ->
          let [condLab, bodyLab, env] = genLabels (env, 2) in
            let [_, env, code] = compile (condLab, env, s) in
              let [_, env, exprCode] = compile (bodyLab, env, expr) in
                [ false, env,
                  singletonBuffer (JMP (condLab)) <+>
                  label (bodyLab, true) <+>
                  code <+>
                  label (condLab, true) <+>
                  exprCode <+
                  CJMP  ("nz", bodyLab)
                ]
      | DoWhile (s, expr) ->
          let [condLab, bodyLab, env] = genLabels(env, 2) in
            let [_, env, code] = compile (bodyLab, env, s) in
              let [_, env, exprCode] = compile (condLab, env, expr) in
                [ false, env,
                  label (bodyLab, true) <+>
                  code <+>
                  label (condLab, true) <+>
                  exprCode <+
                  CJMP  ("nz", bodyLab)
                ]
      | Call (f, exprs) -> 
          let func@Fun (fLabel, arity) = lookupFun (env, f) in
            let [labUsed, env2, argsCode] = compileMany (lab, env, exprs) in
              [labUsed, env2, argsCode <+ CALL (fLabel, arity)]
      | Scope (defs, expr) ->
          let env0 = beginScope (env) in

          let [env1, globalsBuf, funAcc] =
              foldl (
                fun ([eAcc, gBuf, fAcc], d) {
                  case d of
                    Var (names) ->
                      let eAcc = addVars (eAcc, names) in
                      let gBuf =
                        if isGlobal (env0)
                        then foldl (fun (b, n) { b <+ GLOBAL (n) }, gBuf, names)
                        else gBuf fi
                      in
                      [eAcc, gBuf, fAcc]
                    | Fun (name, args, fBody) ->
                        let [lbl, eAcc] = genFunLabel (eAcc, name) in
                          let eAcc = addFun (eAcc, name, lbl, size(args)) in
                            [eAcc, gBuf, [lbl, args, fBody]:fAcc]
                  esac
                },
                [env0, emptyBuffer (), {}],
                defs
              )
          in

          let env2 =
              foldl (fun (eAcc, fInfo) { 
                  let [lbl, args, fBody] = fInfo in rememberFun (eAcc, lbl, args, fBody)
                },
                env1, funAcc
              )
          in
          
          let [labUsed, env3, bodyCode] = compile (lab, env2, expr) in
          
          let env4 = endScope (env3) in
          [labUsed, env4, globalsBuf <+> bodyCode]
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, size(args), getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case genLabel (initCompEnv ()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}

