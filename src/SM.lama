-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }
  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of
      Some (insns) -> insns
      | _ -> failure("not found: %s\n", l.string) --////
      esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

var cnt = 80000; --////

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, hd(list) : acc, tl(list))
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      insn : others ->  case evalOne(c, insn, others) of
                          [newC, program] -> eval(newC, program)
                        esac
      | _ -> c
    esac
  }

  fun evalOne (c@[stack, cst, state, w], insn, others) {
    if cnt == 0 then failure("%s\n", insn.string) else cnt := cnt - 1 fi; --////
    printf("%s\n", showSMInsn(insn)); --////
    case insn of 
      READ -> case w of 
                [n:i, o] -> case readWorld(w) of
                              [value, w2] -> [[value : stack, cst, state, w2], others]
                            esac
                | _ -> failure("Error. Input is empty!")
              esac
      | WRITE ->  case stack of 
                    v : stack2 -> [[v : stack2, cst, state, writeWorld(v, w)], others]
                    | _ -> failure("WRITE Error. Stack is empty!")
                  esac
      | BINOP ("+") ->  case stack of 
                          v2 : v1 : stack2 -> [[(v1 + v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("-") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 - v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("*") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 * v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("/") -> case stack of 
                          0 : _ : _ -> failure("Error. Division by zero!")
                          | v2 : v1 : stack2 -> [[(v1 / v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("%") -> case stack of 
                          0 : _ : _ -> failure("Error. Division by zero!")
                          | v2 : v1 : stack2 -> [[(v1 % v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("==") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 == v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP (">=") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 >= v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("<=") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 <= v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP (">") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 > v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("<") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 < v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("!=") -> case stack of 
                          v2 : v1 : stack2 -> [[(v1 != v2) : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("!!") -> case stack of 
                          x : y : stack2 -> [[x !! y : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | BINOP ("&&") -> case stack of 
                          x : y : stack2 -> [[x && y : stack2, cst, state, w], others]
                          | _ -> failure("Error. Stack has not two values!")
                        esac
      | LD (x) -> [[lookup(state, x) : stack, cst, state, w], others]
      | ST (x) -> case stack of 
                    v : _ -> assign(state, x, v); [[stack, cst, state, w], others]
                    | _ -> failure("ST Error. Stack is empty!")
                  esac
      | CONST (n) -> [[n : stack, cst, state, w], others]
      | LABEL (l) -> [c, others]
      | JMP (l) -> [c, fromLabel(env, l)]
      | CJMP("z", l) -> case stack of 
                          v : stack2 -> if v == 0
                                          then [[stack2, cst, state, w], fromLabel(env, l)]
                                        else
                                          [[stack2, cst, state, w], others]
                                        fi
                          | _ -> failure("CJMP Error. Stack is empty!")
                        esac
      | CJMP("nz", l) -> case stack of 
                          v : stack2 -> if v != 0
                                          then [[stack2, cst, state, w], fromLabel(env, l)]
                                        else
                                          [[stack2, cst, state, w], others]
                                        fi
                          | _ -> failure("CJMP Error. Stack is empty!")
                        esac
      | LDA(x) -> [[Ref (x) : stack, cst, state, w], others]
      | STI ->  case stack of 
                    v : Ref(x) : stack2 -> assign(state, x, v); [[v : stack2, cst, state, w], others]
                    | _ -> failure("STI Error. Stack has not two values!")
                esac
      | DROP -> case stack of
                    v : stack2 -> [[stack2, cst, state, w], others]
                    | _ -> failure("DROP Error. Stack is empty!")
                esac
      | END ->  case cst of 
                  {} -> [c, others]
                  | [state, program] : cst -> [[stack, cst, state, w], program]
                esac
      | BEGIN(_, a, l) ->   case createLocal(s, a, l) of 
                              [s, new_state] -> [[s, cst, new_state, w], others]
                            esac
      | CALL(f, _) -> [[s, [state, others] : cst, state, w], fromLabel(env, f)]
      | GLOBAL (x) -> assign(state, Glb(x), 0); [c, others]
    esac
  }

  fun createLocal(s, na, nl) {
    case take(s, na) of
      [rem, taken] -> [rem, [listArray(taken), initArray (nl, fun (_) {0})]]
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s_", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {e}    -> compile (lab, env, e)
    | e : es ->
        case genLabel(env) of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (e)      ->   case genLabel(env) of
                                [eLab, env] ->
                                  case compile(eLab, env, e) of
                                    [labUsed, env, code] -> [false, env, code <+> label(eLab, labUsed) <+ WRITE <+ DROP]
                                  esac
                          esac
    | Assn  (Ref(x), e)   ->  case genLabel(env) of
                                [eLab, env] ->
                                    case compile (eLab, env, e) of
                                      [labUsed, newEnv, code] -> [false, newEnv, code <+> label(eLab, labUsed) <+ ST (lookupVar(env, x))]
                                    esac
                              esac
    | Assn  (e1, e2)   ->     case genLabels(env, 2) of
                                [e1Lab, e2Lab, env] ->
                                    case compile (e1Lab, env, e1) of
                                      [e1LabUsed, env, codeE1] ->
                                        case compile (e2Lab, env, e2) of 
                                         [e2LabUsed, env, codeE2] -> [false, env, (codeE1 <+> label(e1Lab, e1LabUsed) <+> codeE2 <+> label(e2Lab, e2LabUsed)) <+ STI]
                                        esac
                                    esac
                              esac
    | Seq   (s1, s2) ->
        case genLabel(env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, (s1Code <+> label (s2Lab, s2LabUsed)) <+> s2Code]
                  esac
             esac
        esac
    | If (expr, s1, s2) ->
        case genLabels(env, 2) of
          [elseLab, exprLab, env] ->
            case compile(exprLab, env, expr) of
              [labUsedExpr, env, exprCode] ->
                  case compile (lab, env, s1) of
                    [labUsedS1, env, s1Code] ->
                        case compile (lab, env, s2) of
                          [labUsedS2, env, s2Code] -> [true, env,
                            ((exprCode <+> label(exprLab, labUsedExpr)) <+ CJMP("z", elseLab) <+> s1Code <+
                                JMP(lab)) <+ LABEL (elseLab) <+> s2Code]
                        esac
                  esac
            esac
        esac
    | While (expr, stmt) ->
        case genLabels(env, 3) of
          [condLab, bodyLab, exprLab, env] ->
            case compile (exprLab, env, expr) of
              [exprLabUsed, env, exprCode] ->
                case compile (condLab, env, stmt) of
                  [_, env, stmtCode] ->
                      [false, env,
                          singletonBuffer(JMP(condLab)) <+ LABEL(bodyLab) <+> stmtCode <+ LABEL(condLab)
                          <+> exprCode <+> label(exprLab, exprLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
    | DoWhile (stmt, expr) ->
        case genLabels(env, 3) of
          [condLab, bodyLab, exprLab, env] ->
            case compile (exprLab, env, expr) of
              [exprLabUsed, env, exprCode] ->
                case compile (condLab, env, stmt) of
                  [labUsed, env, stmtCode] ->
                      [false, env,
                          singletonBuffer(LABEL(bodyLab)) <+> stmtCode <+> label(condLab, labUsed)
                          <+> exprCode <+> label(exprLab, exprLabUsed) <+ CJMP("nz", bodyLab)]
                esac
            esac
        esac
    | Binop (s, e1, e2) -> case genLabels(env, 2) of
                            [e1Lab, e2Lab, env] ->
                              case compile (e1Lab, env, e1) of
                                [e1LabUsed, env, e1Code] ->
                                    case compile (e2Lab, env, e2) of
                                      [e2LabUsed, env, e2Code] -> [false, env, (((e1Code <+> label (e1Lab, e1LabUsed)) <+> e2Code)
                                                                    <+> label (e2Lab, e2LabUsed)) <+ BINOP(s)]
                                    esac
                              esac
                          esac
    | Ignore(e) ->  case genLabel(env) of
                      [eLab, env] ->
                        case compile (eLab, env, e) of
                          [eLabUsed, env, eCode] -> [false, env, eCode <+> label (eLab, eLabUsed) <+ DROP]
                        esac
                    esac
    | Scope(defs, expr) ->
                          var code = emptyBuffer ();
                          env := beginScope(env);
                          env := foldl(fun(env, def) {
                            case def of
                              Var(xs) ->  addVars(env, xs)
                              | Fun(name, args, body) ->  case genFunLabel(env, name) of
                                                            [fLab, env] -> addFun(env, name, fLab, size(args))
                                                          esac
                            esac
                          },
                          env, defs);
                          env := foldl(fun(env, def) {
                            case def of
                              Var(_) ->  env
                              | Fun(name, args, body) ->  case genFunLabel(env, name) of
                                                            [fLab, _] -> rememberFun(env, fLab, args, body)
                                                          esac
                            esac
                          },
                          env, defs);
                          code := if isGlobal(env)
                            then foldl(fun(code, def) {
                                case def of
                                  Var(xs) ->  foldl(fun(code, x) {
                                                code <+ GLOBAL (x)
                                              }, code, xs)
                                  | _ -> code
                                esac
                              },
                              code, defs)
                            else code
                          fi;
                          case compile (lab, env, expr) of
                            [eLabUsed, env, eCode] -> [eLabUsed, endScope(env), code <+> eCode]
                          esac
    | Call(name, args) -> case args of
                            {} -> case lookupFun(env, name) of
                                    Fun(fLabel, nArgs) ->   if size(args) == nArgs
                                                              then [false, env, singletonBuffer(CALL(fLabel, nArgs))]
                                                            else
                                                              failure ("size(args) != nArgs\n")
                                                            fi
                                  esac
                            | _ ->
                                case genLabel(env) of
                                  [eLab, env] ->
                                    case compileMany(eLab, env, args) of
                                      [eLabUsed, env, eCode] ->
                                        case lookupFun(env, name) of
                                          Fun(fLabel, nArgs) ->   if size(args) == nArgs
                                                                    then [false, env, (eCode
                                                                      <+> label (eLab, eLabUsed)) <+ CALL(fLabel, nArgs)]
                                                                  else
                                                                    failure ("size(args) != nArgs\n")
                                                                  fi
                                        esac
                                    esac
                                esac
                          esac
                          
    | _                 -> failure ("Invalid instruction!\n")
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, size(args), getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case genLabel(initCompEnv ()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}

