-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    insn : tailInsns -> 
      case c of 
        [stack, st, world] -> 
          case insn of 
            READ -> 
              case readWorld (world) of 
                [value, newWorld] -> 
                  eval ([value : stack, st, newWorld], tailInsns)
              esac 
          | WRITE -> 
              case stack of 
              value : stackTail -> 
                case writeWorld (value, world) of 
                  newWorld -> 
                    eval ([stackTail, st, newWorld], tailInsns)
                esac
              esac       
          | BINOP (op) -> 
              case stack of 
                rhs : lhs : stackTail -> 
                  eval ([evalBinop (lhs, rhs, op) : stackTail, st, world], tailInsns)
              esac 
          | LD (varName) -> 
              eval ([st (varName) : stack, st, world], tailInsns)
          | ST (varName) -> 
              case stack of 
                value : stackTail -> 
                  eval ([stackTail, st <- [varName, value], world], tailInsns)
              esac 
          | CONST (value) -> 
              eval ([value : stack, st, world], tailInsns)
          esac
      esac
  | {} -> c
  esac           
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
      Var  (varName)      -> {LD (varName)}
    | Const(value)        -> {CONST (value)}
    | Binop(op, lhs, rhs) -> compileExpr (lhs) +++ compileExpr (rhs) +++ {BINOP (op)}
  esac  
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
     Assn (varName, expr)         -> compileExpr (expr) +++ {ST (varName)}
   | Seq  (firstStmt, secondStmt) -> compileSM (firstStmt) +++ compileSM (secondStmt)
   | Skip                         -> {}
   | Read (varName)               -> {READ, ST (varName)}
   | Write(expr)                  -> compileExpr (expr) +++ {WRITE}
   esac
}
