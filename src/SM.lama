-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, w], insns) {
  case insns of
    {} -> c
  | READ : rest ->
    let [value, w] = readWorld(w) in
    eval([value:stack, state, w], rest)
  | WRITE : rest ->
    let top:stack = stack in
    let w = writeWorld(top, w) in
    eval([stack, state, w], rest)
  | BINOP(op) : rest ->
    let y:stack = stack in
    let x:stack = stack in
    let value = case op of
      "+" -> x + y
    | "-" -> x - y
    | "*" -> x * y
    | "/" -> x / y
    | "%" -> x % y
    | "<" -> x < y
    | ">" -> x > y
    | "<=" -> x <= y
    | ">=" -> x >= y
    | "==" -> x == y
    | "!=" -> x != y
    | "&&" -> x && y
    | "!!" -> x !! y
    esac in
    eval([value:stack, state, w], rest)
  | LD(v) : rest ->
    eval([state(v) : stack, state, w], rest)
  | ST(v) : rest ->
    let top:stack = stack in
    eval([stack, state <- [v, top], w], rest)
  | CONST(v) : rest ->
    eval([v : stack, state, w], rest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (v) -> {LD(v)}
  | Const (x) -> {CONST(x)}
  | Binop (op, lhs, rhs) ->
      compileExpr(lhs) +++
      compileExpr(rhs) +++
      {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(x, e) -> compileExpr(e) +++ {ST(x)}
  | Seq(stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Read(x) -> {READ, ST(x)}
  | Write(e) -> compileExpr(e) +++ {WRITE}
  | Skip -> {}
  esac
}
