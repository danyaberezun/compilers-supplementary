-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of
    first : others ->  let [new_c, new_others] = evalDefault(env, c, first, others) in eval(env, new_c, new_others)
    | _ -> c
  esac
}

fun evalDefault(env, c@[stack, state, world], instr, others) {
  case instr of 
    CONST (n) -> [[n:stack, state, world], others] |
    READ -> let [value, new_world] = readWorld(world) in [[value:stack, state, new_world], others] |
    WRITE -> let uv:new_stack = stack in [[new_stack, state, writeWorld(uv, world)], others] |
    BINOP (op) -> case stack of top1:top2:new_stack -> [[evalBinop(op, top2, top1):new_stack, state, world], others] esac |
    LD (x) -> [[state(x):stack, state, world], others] |
    ST (x) -> let uv:_ = stack in [[stack, state <- [x, uv], world], others] |
    LABEL (l) -> [c, others] |
    JMP (l) -> [c, fromLabel(env, l)] |
    LDA(x) -> [[Ref(x):stack, state, world], others] |
    CJMP("z", l) -> let uv:new_stack = stack in [[new_stack, state, world], if uv == 0 then fromLabel(env, l) else others fi] |
    CJMP("nz", l) -> let uv:new_stack = stack in [[new_stack, state, world], if uv != 0 then fromLabel(env, l) else others fi] |
    STI ->  let uv:Ref(x):new_stack = stack in [[uv:new_stack, state <- [x, uv], world], others] |
    DROP -> let _:new_stack = stack in [[new_stack, state, world], others]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (s, e1, e2) -> let [lab1, lab2, env] = genLabels(env, 2) in (
                          let [lab3, env, code1] = compile(lab1, env, e1) in (
                            let [lab4, env, code2] = compile(lab2, env, e2) in
                              [false, env, (((code1 <+> label(lab1, lab3)) <+> code2) <+> label(lab2, lab4)) <+ BINOP(s)]
                          )
                        )
    | Ignore(e) -> let [lab1, env] = genLabel(env) in (
                  let [lab2, env, code1] = compile(lab1, env, e) in
                    [false, env, code1 <+> label(lab1, lab2) <+ DROP]
                )                    
    | Read   (x)        -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write  (e)        ->  let [lab1, env] = genLabel(env) in (
                              let [lab2, env, code] = compile(lab1, env, e) in [false, env, code <+> label(lab1, lab2) <+ WRITE]
                            )
    | Assn   (Ref(x), e) -> let [lab1, env] = genLabel(env) in (
                              let [lab2, new_env, code] = compile(lab1, env, e) in
                              [false, new_env, code <+> label(lab1, lab2) <+ ST(x)]
                            )
    | Assn   (e1, e2)   -> let [lab1, lab2, env] = genLabels(env, 2) in (
                             let [lab3, env, code1] = compile(lab1, env, e1) in (
                               let [lab4, env, code2] = compile(lab2, env, e2) in
                                 [false, env, (code1 <+> label(lab1, lab3) <+> code2 <+> label(lab2, lab4)) <+ STI]
                             )
                           )
    | Seq   (s1, s2)    -> let [lab1, env] = genLabel(env) in (
                             let [lab2, env, code1] = compile(lab1, env, s1) in (
                               let [lab3, env, code2] = compile(lab, env, s2) in
                                 [lab3, env, (code1 <+> label(lab1, lab2)) <+> code2]
                             )
                           )
    | If (expr, s1, s2) -> let [lab1, lab2, env] = genLabels(env, 2) in (
                             let [lab3, env, code1] = compile(lab2, env, expr) in (
                               let [_, env, code2] = compile(lab, env, s1) in (
                                 let [_, env, code3] = compile(lab, env, s2) in
                                   [true, env, ((code1 <+> label(lab2, lab3)) <+ CJMP("z", lab1) <+> code2 <+ JMP(lab)) <+ LABEL (lab1) <+> code3]
                               )
                             )
                           )
    | While (expr, stmt) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                              let [lab4, env, code1] = compile(lab3, env, expr) in (
                                let [_, env, code2] = compile(lab1, env, stmt) in
                                  [false, env, singletonBuffer(JMP(lab1)) <+ LABEL(lab2) <+> code2 <+ LABEL(lab1) <+> code1 <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                              )
                            )
    | DoWhile (stmt, expr) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                                let [lab4, env, exprCode] = compile(lab3, env, expr) in (
                                  let [lab5, env, stmtCode] = compile(lab1, env, stmt) in
                                    [false, env, singletonBuffer(LABEL(lab2)) <+> stmtCode <+> label(lab1, lab5) <+> exprCode <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                                )
                              )
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
