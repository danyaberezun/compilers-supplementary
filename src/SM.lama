-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (l) : tl -> rec ([addMap (m, l, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, l) {
  env [0] (l)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
    case insns of
        {} -> c
      | head_insns:tail_insns ->
      case head_insns of
          READ ->
            let [value, new_world] = readWorld(world) in
            eval(env, [value:stack, state, new_world], tail_insns)
        | WRITE ->
            let value:stack_tail = stack in
            eval(env, [stack_tail, state, writeWorld(value, world)], tail_insns)
        | BINOP(operation) ->
            let y:x:stack_tail = stack in
            eval(env, [evalOp(operation, x, y) : stack_tail, state, world], tail_insns)
        | LD(x) -> eval(env, [state(x) : stack, state, world], tail_insns)
        | ST(x) ->
            let v:stack_rest = stack in
            eval(env, [stack, state <- [x, v], world], tail_insns)
        | CONST(x) -> eval(env, [x:stack, state, world], tail_insns)
        | LABEL(_) -> eval(env, c, tail_insns)
        | JMP(label) -> eval(env, c, fromLabel(env, label))
        | CJMP(c, label) ->
            let x:stack = stack in
            if case c of "nz" -> x != 0 | "z" -> x == 0 esac then
              eval(env, [stack, state, world], fromLabel(env, label))
            else
              eval(env, [stack, state, world], tail_insns)
            fi
        | DROP ->
            let _:stack_rest = stack in
            eval(env, [stack_rest, state, world], tail_insns)
        | LDA(x) -> eval(env, [Ref(x):stack, state, world], tail_insns)
        | STI ->
            let v:Ref(x):stack_rest = stack in
            eval(env, [v:stack_rest, state <- [x, v], world], tail_insns)
      esac
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [l, env] -> l : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (l, lUsed) {
    if lUsed
    then singletonBuffer (LABEL (l))
    else emptyBuffer ()
    fi
  }

  fun compile (l, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->  let [l1, env] = genLabel(env) in
                    let [l2, env, ec] = compile(l1, env, e) in
                    [false, env, ec <+> label(l1, l2) <+ WRITE]
    | Assn (x, e) ->    let [l1, env] = genLabel(env) in
                        let [l2, new_env, xc] = compile(l1, env, x) in
                        let [l3, env] = genLabel(env) in
                        let [l4, new_env, ec] = compile(l1, env, e) in
                        [false, new_env, xc <+> label (l1, l2) <+> ec <+> label (l3, l4) <+ STI]
    | Binop (s, l, r) ->    let [l1, l2, env] = genLabels(env, 2) in
                            let [l3, env, lc] = compile(l1, env, l) in
                            let [l4, env, rc] = compile(l2, env, r) in
                            [false, env, lc <+> label(l1, l3) <+> rc <+> label(l2, l4) <+ BINOP(s)]
    | Seq (s1, s2) ->   let [l1, env] = genLabel(env) in
                        let [l2, env, c1] = compile(l1, env, s1) in
                        let [l3, env, c2] = compile(l, env, s2) in
                        [l3, env, c1 <+> label(l1, l2) <+> c2]
    | If (con, t, f) -> let [l1, l2, env] = genLabels(env, 2) in
                        let [l3, env, ccon] = compile(l2, env, con) in
                        let [_, env, ct] = compile(l, env, t) in
                        let [_, env, cf] = compile(l, env, f) in
                        [true, env, ccon <+> label(l2, l3) <+ CJMP("z", l1) <+> ct <+ JMP(l) <+ LABEL (l1) <+> cf]
    | While (con, b) -> compile (l, env, If (con, DoWhile (b, con), Skip))
    | DoWhile (b, con) ->   let [l1, l2, l3, env] = genLabels(env, 3) in
                            let [l4, env, ccon] = compile(l3, env, con) in
                            let [l5, env, cb] = compile(l1, env, b) in
                            [false, env, label(l2, true) <+> cb <+> label(l1, l5) <+> ccon <+> label(l3, l4) <+ CJMP("nz", l2)]
    | Ignore(e) ->  let [l1, env] = genLabel(env) in
                    let [l2, env, c] = compile(l1, env, e) in
                    [false, env, c <+> label(l1, l2) <+ DROP]
    esac
  }


  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed)
       esac
  esac
}
