-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    insn : others -> eval(evalOne(c, insn), others)
    | _ -> c
  esac
}

fun evalOne (c@[stack, state, w], insn) {
  case insn of 
    READ -> case w of 
              [n:i, o] -> case readWorld(w) of
                            [value, w2] -> [value : stack, state, w2]
                          esac
              | _ -> failure("Error. Input is empty!")
            esac
    | WRITE ->  case stack of 
                  v : stack2 -> [stack2, state, writeWorld(v, w)]
                  | _ -> failure("Error. Stack is empty!")
                esac
    | BINOP ("+") ->  case stack of 
                        v2 : v1 : stack2 -> [(v1 + v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("-") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 - v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("*") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 * v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("/") -> case stack of 
                        0 : _ : _ -> failure("Error. Division by zero!")
                        | v2 : v1 : stack2 -> [(v1 / v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("%") -> case stack of 
                        0 : _ : _ -> failure("Error. Division by zero!")
                        | v2 : v1 : stack2 -> [(v1 % v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("==") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 == v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP (">=") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 >= v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("<=") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 <= v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP (">") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 > v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("<") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 < v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("!=") -> case stack of 
                        v2 : v1 : stack2 -> [(v1 != v2) : stack2, state, w]
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("!!") -> case stack of 
                        1 : 1 : stack2 -> [1 : stack2, state, w]
                        | 1 : 0 : stack2 -> [1 : stack2, state, w]
                        | 0 : 1 : stack2 -> [1 : stack2, state, w]
                        | 0 : 0 : stack2 -> [0 : stack2, state, w]
                        | _ : _ : _ -> failure("Error. !! with values, that are not zero!")
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | BINOP ("&&") -> case stack of 
                        1 : 1 : stack2 -> [1 : stack2, state, w]
                        | 1 : 0 : stack2 -> [0 : stack2, state, w]
                        | 0 : 1 : stack2 -> [0 : stack2, state, w]
                        | 0 : 0 : stack2 -> [0 : stack2, state, w]
                        | _ : _ : _ -> failure("Error. && with values, that are not zero!")
                        | _ -> failure("Error. Stack has not two values!")
                      esac
    | LD (x) -> [state (x) : stack, state, w]
    | ST (x) -> case stack of 
                  v : stack2 -> [stack2, state <- [x, v], w]
                  | _ -> failure("Error. Stack is empty!")
                esac
    | CONST (n) -> [n : stack, state, w]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> {LD(x)}
    | Const (const_val) -> {CONST(const_val)}
    | Binop (s, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP(s)}
    | _ -> failure ("Error. Unknown expression!\n")
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (variable, expr) -> compileExpr(expr) +++ {ST(variable)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (variable) -> {READ, ST(variable)}
    | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
