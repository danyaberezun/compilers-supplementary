-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
   case insns of
     {} -> c
     | head:tail -> 
        case head of 
          READ -> let [value, nw] = readWorld(world)
                  in eval(env, [value:stack, state, nw], tail)
          | WRITE -> let value:stack_tail = stack
                      in eval(env, [stack_tail, state, writeWorld(value, world)], tail)
          | BINOP (op) -> let y:x:stack_tail = stack
                          in eval(env, [evalOp(op, x, y):stack_tail, state, world], tail)
          | LD (x) -> eval(env, [state(x):stack, state, world], tail)
          | LDA (x) -> eval(env, [Ref(x):stack, state, world], tail)
          | ST (name) -> let value:stack_tail = stack in 
              eval (env, [value:stack_tail, state <- [name, value], world], tail)
          | STI -> let value:Ref(name):stack_tail = stack
                     in eval (env, [value:stack_tail, state <- [name, value], world], tail)
          | CONST (int) -> eval(env, [int:stack, state, world], tail)
          | LABEL (x) -> eval(env, c, tail)
          | JMP   (x) -> eval(env, c, fromLabel (env, x))
          | CJMP  (e, x) -> let value:rest = stack in
              let go = 
                case e of
                  "z"  -> if value == 0 then true else false fi
                | "nz" -> if value != 0 then true else false fi
                esac 
              in if go then eval (env, [rest, state, world], fromLabel (env, x)) else eval (env, [rest, state, world], tail) fi
          | DUP -> let v:_ = stack in eval(env, [v:stack, state, world  ], tail)
          | DROP -> let _:stack_tail = stack in eval(env, [stack_tail, state, world], tail)
        esac
   esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->
        case env.genLabel of 
          [lab, env] ->
            case compile (lab, env, e) of 
              [labUsed, env, code] ->
                [false, env, code <+> label (lab, labUsed) <+ WRITE]
            esac
        esac 
    | Assn (name, e) ->
        case env.genLabels (2) of 
          [varLab, eLab, env] ->
            case compile (varLab, env, name) of
              [varLabUsed, env, varCode] ->
                case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] ->
                    [false, env, varCode <+> 
                                 label (varLab, varLabUsed) <+> 
                                 eCode <+>
                                 label (eLab, eLabUsed) <+
                                 STI
                    ]
                esac            
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
            case compile (s2Lab, env, s1) of
              [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> 
                    [labUsed, env, s1Code <+> 
                                   label (s2Lab, s2LabUsed) <+> 
                                   s2Code
                    ]
                esac
            esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabels(2) of 
          [eLab, elseLbl, env] -> 
            case compile(eLab, env, e) of
              [eLabUsed, env, eCode] -> 
                case compile (lab, env, s1) of 
                  [_, env, s1Code] -> 
                    case compile(lab, env, s2) of 
                      [_, env, s2Code] -> 
                        [true, env, eCode <+> 
                                    label (eCode, eLabUsed) <+ 
                                    CJMP ("z", elseLbl) <+> 
                                    s1Code <+ 
                                    JMP (lab) <+ 
                                    LABEL (elseLbl) <+> 
                                    s2Code <+ 
                                    JMP (lab)
                        ]
                    esac
                esac         
            esac
        esac
      | While (e, s) ->
          case env.genLabels (2) of
            [eLab, sLab , env] ->
              case compile (sLab, env, e) of
                [sLabUsed, env, eCode] ->
                  case compile (eLab, env, s) of
                    [_, env, sCode] ->
                      [true, env, label (eLab, true) <+> 
                                  eCode <+ 
                                  CJMP ("z", lab) <+> 
                                  label (sLab, sLabUsed) <+> 
                                  sCode <+ 
                                  JMP (eLab)
                      ]
                  esac
              esac
          esac
      | DoWhile (e, s) ->
          case genLabels (env, 2) of
            [eLab, sLab, env] ->
              case compile(eLab, env, s) of
                [sLabUsed, env, sCode] ->
                  case compile(sLab, env, e) of
                    [_, env, eCode] ->
                      [false, env, label (eLab, true) <+> 
                                  eCode <+> 
                                  label (sLab, sLabUsed) <+> 
                                  sCode <+ 
                                  CJMP ("nz", eLab)
                    ]
                  esac
              esac
          esac
      | Binop (op, lhs, rhs) ->
          case env.genLabels(2) of
            [lLab, rLab, env] ->
              case compile (lLab, env, lhs) of 
                [lLabUsed, env, lCode] ->
                  case compile (rLab, env, rhs) of 
                    [rLabUsed, env, rCode] ->
                      [false, env, lCode <+>
                                  label (lLab, lLabUsed) <+>
                                  rCode <+>
                                  label (rLab, rLabUsed) <+
                                  BINOP (op)
                      ]
                  esac
              esac
          esac   
    | Ignore (e) ->
        case compile (lab, env, e) of 
          [labUsed, env, code] -> 
             [false, env, code <+> 
                          label(lab, labUsed) <+ 
                          DROP
             ]
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
