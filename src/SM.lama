-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, w], insns) {
    case insns of
      i:is -> eval(
        case i of 
          READ -> case readWorld(w) of [value, w_] -> [value:stack, state, w_] esac
        | WRITE -> case stack of head:tail -> [tail, state, writeWorld(head, w)] esac
        | BINOP (op) -> case stack of r:l:tail -> [applyBinop(op, l, r):tail, state, w] esac
        | LD (variable) -> [state(variable):stack, state, w]
        | ST (variable) -> case stack of head:tail -> [tail, state <- [variable, head], w] esac
        | CONST (n) -> [n:stack, state, w]
        esac
      , is)
    | _ -> c
    esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
    case expr of
      Var (variable) -> { LD (variable) }
    | Const (n) -> { CONST (n) }
    | Binop (op, l, r) -> compileExpr(l) +++ compileExpr(r) +++ { BINOP (op) }
    esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
      Assn (variable, expr) -> compileExpr(expr) +++ { ST (variable) }
    | Seq (l, r) -> compileSM(l) +++ compileSM(r) 
    | Skip -> []
    | Read (variable) -> { READ, ST (variable) }
    | Write (expr) -> compileExpr(expr) +++ { WRITE }
    esac
}