-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  case insns of 
    {} -> c
    | head:tail -> 
      case head of 
        JMP (l) -> eval (env, c, fromLabel (env, l))
        | CJMP (t, l) ->
          case c of [x:s, st, w] -> 
            var pred = case t of 
              "z"  -> x == 0
              | "nz" -> x != 0
            esac;
            eval (env, [s, st, w], if pred then JMP (l) : tail else tail fi)
          esac
        | READ -> 
          case c of [s, st, w] -> 
            case readWorld(w) of [z, w1] -> 
              eval(env, [z:s, st, w1], tail)
            esac
          esac
        | WRITE -> 
          case c of [z:s, st, w] -> 
            eval(env, [s, st, writeWorld(z, w)], tail)
          esac
        | WRITE : t -> case c[0] of e: stT -> eval (env, [stT, c[1], writeWorld (e, c[2])], t) esac
        | DROP : t -> case c[0] of top : stT -> eval(env, [stT, c[1], c[2]], t) esac
        | BINOP(op) ->
          case c of 
            [v:x:s, st,w] ->
              eval(env,  [evalOp(op, x, v) : s, st, w],tail)
          esac
        | LD(x) -> 
          case c of [s, st, w] -> 
            eval(env, [st(x):s, st, w], tail)
          esac
        | ST(x) -> 
          case c of [z:s, st, w] -> 
            eval(env, [s, st <- [x, z], w], tail)
          esac
        | CONST(z) -> 
          case c of [s, st, w] -> 
            eval(env, [z:s, st, w], tail)
          esac
        | LDA(x) ->
          case c of [s, st, w] ->
            eval(env, [Ref(x):s, st, w], tail)
          esac
        | STI ->
            case c of 
                [v : Ref(x) : s, st, w] ->
                    eval(env, [v : s, st <- [x, v], w], tail)
            esac
        | DUP ->
          case c of [x:s, st, w] ->
            eval(env, [x:x:s, st, w], tail)
          esac
        | DROP ->
          case c of [_:s, st, w] ->
            eval(env, [s, st, w], tail)
          esac
        | LABEL(x) -> eval(env, c, tail)
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) -> 
      case env.genLabel of 
        [lab, x] ->
          case compile (lab, x, e) of 
            [used, y, c] -> 
              [false, y, c <+> label(lab, used) <+ WRITE]
          esac
      esac
    | Assn (x, e) ->
      case env.genLabels(2) of
        [xlab, elab, x] ->
          case compile(xlab, x, x) of
            [xused, y, cx] ->
              case compile(elab, y, e) of
                [eused, z, ce] -> [false, z, cx <+> label(xlab, xused) <+> ce <+> label(elab, eused) <+> STI]
              esac
          esac
      esac
    | Seq   (a, b) ->
        case env.genLabel of
          [bLab, env] ->
             case compile (lab, env, a) of
               [bUsed, env, aCode] ->
                  case compile (lab, env, b) of
                    [used, env, bCode] -> [used, env, aCode <+> label (bLab, bUsed) <+> bCode]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
      case env.genLabels(2) of
        [condLab, elseLab, env1] ->
          case compile(condLab, env1, e) of
            [condUsed, env2, condCode] ->
              case compile(lab, env2, s1) of
                [_, env3, s1Code] ->
                  case compile(lab, env3, s2) of
                    [_, env4, s2Code] ->
                      [true, env4, condCode <+> label(condLab, condUsed) 
                      <+> CJMP("z", elseLab)
                      <+> s1Code <+> JMP(lab) <+> LABEL(elseLab) <+> s2Code]
                  esac
              esac
          esac
      esac
    | While (e, s) -> compile (lab, env, If (e, DoWhile (s, e), Skip))
    | DoWhile (s, e) ->
      case env.genLabels(3) of
          [lLab, condLab, rLab, env1] -> 
              case compile(condLab, env1, s) of 
                  [bodyLabUsed, env2, bodyCode] -> 
                      case compile(rLab, env2, e) of
                          [condLabUsed, env3, condCode] -> 
                              [false, env3,
                              LABEL(lLab)
                              <+> bodyCode
                              <+> label(condLab, bodyLabUsed)
                              <+> condCode
                              <+> label(rLab, condLabUsed)
                              <+> CJMP("nz", lLab)]
                      esac
              esac
      esac
    | Ignore (e) -> case compile(lab, env, e) of 
        [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
      esac
    | Binop (op, l, r) -> case env.genLabel of
        [rLab, env] -> case env.genLabel of
          [opLab, env] -> case compile (rLab, env, l) of
            [rLabUsed, env, lCode] -> case compile (opLab, env, r) of
              [used, env, rCode] -> [false, env, lCode <+> label(rLab, rLabUsed) <+> 
                                                rCode <+> label(opLab, used) <+ BINOP(op)]
            esac
          esac
        esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
