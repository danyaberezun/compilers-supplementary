-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
    case insns of
      insn : others ->  case evalDefault(c, insn, others) of
                          [newC, program] -> eval(newC, program)
                        esac
      | _ -> c
    esac
  }

  fun evalDefault(c@[stack, cst, state, w], insn, others) {
    case insn of
      CONST (n) -> [[n : stack, cst, state, w], others] |
      READ -> let [value, new_world] = readWorld(w) in [[value:stack, cst, state, new_world], others] |
      WRITE -> let uv:new_stack = stack in [[uv:new_stack, cst, state, writeWorld(uv, w)], others] |
      BINOP (op) -> let top1:top2:new_stack = stack in [[evalOp(op, top2, top1):new_stack, cst, state, w], others] |
      LD (x) -> [[lookup(state, x) : stack, cst, state, w], others] |
      ST (x) -> let v:_ = stack in assign(state, x, v); [[stack, cst, state, w], others] | 
      LABEL (l) -> [c, others] |
      JMP (l) -> [c, fromLabel(env, l)] |
      LDA(x) -> [[Ref (x) : stack, cst, state, w], others] |
      CJMP("z", l) -> let uv:new_stack = stack in [[new_stack, cst, state, w], if uv == 0 then fromLabel(env, l) else others fi] |
      CJMP("nz", l) -> let uv:new_stack = stack in [[new_stack, cst, state, w], if uv != 0 then fromLabel(env, l) else others fi] |
      STI -> let v:Ref(x):stack2 = stack in assign(state, x, v);
                                   [[v : stack2, cst, state, w], others] |
      DROP -> let v:stack2 = stack in [[stack2, cst, state, w], others] |
      END ->  case cst of 
                [state, program] : cst -> [[stack, cst, state, w], program] |
                {} -> [c, {}]
              esac |
      GLOBAL (x) -> assign(state, Glb(x), 0);
                    [c, others] |
      BEGIN(_, a, l) -> let [s, new_state] = createLoc(stack, a, l) in [[s, cst, new_state, w], others] |
      CALL(f, _) -> [[stack, [state, others] : cst, state, w], fromLabel(env, f)]
    esac
  }

  fun createLoc(s, na, nl) {
     let [r, took] = take(s, na) in [r, [listArray(took), initArray(nl, fun (_) {0})]]
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compileMany (lab, env, exprs) {
    case exprs of
      {e}    -> compile (lab, env, e)
    | e : es ->
        case env.genLabel of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eUsed, env, eCode] ->
                 case compileMany (lab, env, es) of
                   [labUsed, env, esCode] -> [labUsed, env, eCode <+> label (eLab, eUsed) <+> esCode]
                 esac
            esac
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD(lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA(lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST(n))]
    | Binop (s, e1, e2) -> let [lab1, lab2, env] = genLabels(env, 2) in (
                          let [lab3, env, code1] = compile(lab1, env, e1) in (
                            let [lab4, env, code2] = compile(lab2, env, e2) in
                              [false, env, (((code1 <+> label(lab1, lab3)) <+> code2) <+> label(lab2, lab4)) <+ BINOP(s)]
                          )
                        )
    | Ignore (e) -> let [lab1, env] = genLabel(env) in (
                  let [lab2, env, code1] = compile(lab1, env, e) in
                    [false, env, code1 <+> label(lab1, lab2) <+ DROP]
                ) 
    | Read (x) -> [false, env, singletonBuffer(READ) <+ ST(lookupVar(env, x)) <+ DROP]
    | Write (e) -> let [lab1, env1] = genLabel(env) in (
                     let [lab2, env2, code] = compile(lab1, env1, e) in [false, env2, code <+> label(lab1, lab2) <+ WRITE <+ DROP]
                   )
    | Assn  (Ref(x), e) -> let [lab1, env1] = genLabel(env) in (
                            let [lab2, env2, code] = compile (lab1, env1, e) in [false, env2, code <+> label(lab1, lab2) <+ ST (lookupVar(env2, x))]
                           )
    | Assn   (e1, e2)   -> let [lab1, lab2, env] = genLabels(env, 2) in (
                             let [lab3, env, code1] = compile(lab1, env, e1) in (
                               let [lab4, env, code2] = compile(lab2, env, e2) in
                                 [false, env, (code1 <+> label(lab1, lab3) <+> code2 <+> label(lab2, lab4)) <+ STI]
                             )
                           )
    | Seq   (s1, s2)    -> let [lab1, env] = genLabel(env) in (
                             let [lab2, env, code1] = compile(lab1, env, s1) in (
                               let [lab3, env, code2] = compile(lab, env, s2) in
                                 [lab3, env, (code1 <+> label(lab1, lab2)) <+> code2]
                             )
                           )
    | If (expr, s1, s2) -> let [lab1, lab2, env] = genLabels(env, 2) in (
                             let [lab3, env, code1] = compile(lab2, env, expr) in (
                               let [_, env, code2] = compile(lab, env, s1) in (
                                 let [_, env, code3] = compile(lab, env, s2) in
                                   [true, env, ((code1 <+> label(lab2, lab3)) <+ CJMP("z", lab1) <+> code2 <+ JMP(lab)) <+ LABEL (lab1) <+> code3]
                               )
                             )
                           )
    | While (expr, stmt) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                              let [lab4, env, code1] = compile(lab3, env, expr) in (
                                let [_, env, code2] = compile(lab1, env, stmt) in
                                  [false, env, singletonBuffer(JMP(lab1)) <+ LABEL(lab2) <+> code2 <+ LABEL(lab1) <+> code1 <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                              )
                            )
    | DoWhile (stmt, expr) -> let [lab1, lab2, lab3, env] = genLabels(env, 3) in (
                                let [lab4, env, exprCode] = compile(lab3, env, expr) in (
                                  let [lab5, env, stmtCode] = compile(lab1, env, stmt) in
                                    [false, env, singletonBuffer(LABEL(lab2)) <+> stmtCode <+> label(lab1, lab5) <+> exprCode <+> label(lab3, lab4) <+ CJMP("nz", lab2)]
                                )
                              )
    | Scope (defs, expr) -> 
        let [code1, env] = foldl (
          fun ([buf, scope], exp) {
            case exp of
              Var (name) -> [
                if isGlobal(scope)
                then foldl ( fun (buf, n1) { buf <+ GLOBAL (n1) }, buf, name )
                else buf
                fi,
                addVars (scope, name)
              ]
              | _ -> [buf, scope]
            esac
          }, [
            emptyBuffer(),
            beginScope(env)
          ], defs
        ) in (
          let [env, fs] = foldl (
            fun ([env, funs], expr) {
              case expr of
                Fun (f_name, args, body) ->
                  let [lab, env] = genFunLabel(env, f_name) in [addFun(env, f_name, lab, size(args)), [lab, args, body] : funs]
                | _ -> [env, funs]
              esac
            }, [env, {}], defs
          ) in (
              let env = foldl (
                fun (env, [l, a, b]) {
                  rememberFun(env, l, a, b)
                }, env, fs
                ) in ( 
                let [used, env, code2] = compile(lab, env, expr) in [used, endScope(env), code1 <+> code2]
              )
          )
        )
    | Call (name, exprs) -> 
          let [env, code] = foldl(
            fun ([env, buf], expr) {
              let [lab1, env, code1] = compile(lab, env, expr) in [env, buf <+> code1 <+> label (lab, lab1)]
            }, [env, emptyBuffer()], exprs
          ) in (
            let Fun (name, expr) = lookupFun(env, name) in 
               [
                false, env, 
                code <+ case name of
                          Builtin (name) -> BUILTIN (name, expr)
                          | _ -> CALL (name, expr)
                        esac
              ]
          )
    esac
  }

  fun compileFunctions (env, main) {
    fun iterate (env, funList) {
      case funList of
        {}     -> case getFuns (env) of
                    [{}, env] -> emptyBuffer ()
                  | [fs, env] -> iterate (env, fs)
                  esac
      | Fun (f, args, body, state) : fs ->
          case genLabel (addArgs (beginFun (env, state), args)) of
            [endLab, env] ->
               case compile (endLab, env, body) of
                 [endUsed, env, code] -> 
                    singletonBuffer (LABEL (f)) <+
                    BEGIN (f, args.size, getLocals (env)) <+>
                    code <+>
                    label (endLab, endUsed) <+
                    END <+>
                    iterate (env, fs)
               esac
          esac          
      esac
    }
    
    main <+> iterate (env, {})
  }
    
  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
            getBuffer $
            compileFunctions (env, 
                              singletonBuffer (LABEL ("main")) <+
                              BEGIN ("main", 0, getLocals (env)) <+>
                              code <+>
                              label (endLab, endLabUsed) <+
                              END 
                             )            
       esac
  esac
}

