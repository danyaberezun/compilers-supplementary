-- Stack machine.
import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
   case i of
     READ     -> sprintf("READ")
   | WRITE    -> sprintf("WRITE")
   | BINOP(s) -> sprintf("BINOP %s", s)
   | LD(x)    -> sprintf("LD %s", x)
   | ST(x)    -> sprintf("ST %s", x)
   | CONST(n) -> sprintf("CONST %d", n)
   esac
}
public fun showSM (prg) {
   map(fun (i) {showSMInsn(i) ++ "\n"}, prg).stringcat
}
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, st, w], insns) {
   case insns of
      {} -> [stack, st, w]
      | head : tail ->
         case head of
            READ ->  
               case readWorld(w) of
                  [n, w1] -> eval([n:stack, st, w1], tail)
                  | _ -> failure("EVAL READ: error while read\n")
               esac
            | WRITE -> 
               case stack of
                  n:stack1 -> eval([stack1, st, writeWorld(n, w)], tail)
                  | _ -> failure("EVAL WRITE: error while write\n")
               esac
            | BINOP(s) ->
               case stack of
                  y:x:stack1 -> eval([evalBinop(s, x, y):stack1, st, w], tail)
                  | _ -> failure("EVAL BINOP: no 2 stack elems\n")
               esac
            | LD(x) -> eval([st(x):stack, st, w], tail)
            | ST(x) ->
               case stack of
                  n:stack1 -> eval([stack1, st <- [x, n], w], tail)
                  | _ -> failure("EVAL ST: no stack elem\n")
               esac
            | CONST(n) -> eval([n:stack, st, w], tail)
         esac
   esac
}
-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
   eval([{}, emptyState, createWorld(input)], insns)[2].getOutput
}
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
   case expr of
      Var(s) -> {LD(s)}
      | Const(n) -> {CONST(n)}
      | Binop(op, e1, e2) -> compileExpr(e1) +++ compileExpr(e2) +++ {BINOP(op)}
   esac
}
-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
   case stmt of
   Assn(s, e) -> compileExpr(e) +++ {ST(s)}
   | Seq(st1, st2) -> compileSM(st1) +++ compileSM(st2)
   | Skip -> {}
   | Read(s) -> {READ, ST(s)}
   | Write(e) -> compileExpr(e) +++  {WRITE} 
   esac
}

-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |