-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, st, w], insns) {
  case insns of
    {} -> [stack, st, w]
    | head : tail ->
      case head of
        READ ->  
          case readWorld (w) of
            [n, w1] -> eval (env, [n:stack, st, w1], tail)
            | _ -> failure ("EVAL READ: error while read\n")
          esac
      | WRITE -> 
          case stack of
            n:stack1 -> eval (env, [stack1, st, writeWorld (n, w)], tail)
            | _ -> failure ("EVAL WRITE: error while write\n")
          esac
      | BINOP (s) ->
          case stack of
            y:x:stack1 -> eval (env, [evalBinop (s, x, y):stack1, st, w], tail)
            | _ -> failure ("EVAL BINOP: no 2 stack elems\n")
          esac
      | LD (x) -> eval (env, [st (x):stack, st, w], tail)
      | ST (x) ->
          case stack of
            n:stack1 -> eval (env, [stack1, st <- [x, n], w], tail)
            | _ -> failure ("EVAL ST: no stack elem\n")
          esac
      | CONST (n) -> eval (env, [n:stack, st, w], tail)
      | LABEL (s) -> eval (env, c, tail)
      | JMP (l) -> eval (env, c, env.fromLabel (l))
      | CJMP (c, l) ->
          case stack of
            n:stack1 ->
              if
                case c of
                  "nz" -> n != 0
                | "z" -> n == 0
                esac
              then
                eval (env, [stack1, st, w], env.fromLabel (l))
              else
                eval (env, [stack1, st, w], tail)
              fi
            | _ -> failure ("EVAL CJMP: no stack elem\n")
          esac
      esac
 esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
   case expr of
        Var(s) -> singletonBuffer (LD (s))
      | Const(n) -> singletonBuffer (CONST (n))
      | Binop(op, e1, e2) -> compileExpr (e1) <+> compileExpr (e2) <+ BINOP(op)
   esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the lebel is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)         -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)      -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2)    ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If    (e, s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (lab, env, s1) of
               [labUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [true, env,
                      compileExpr(e) <+
                        CJMP ("z", s2Lab) <+>
                        s1Code <+
                        JMP (lab) <+
                        LABEL (s2Lab) <+>
                        s2Code]
                  esac
             esac
        esac
    | While (e, s)      ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab2, env, s) of
              [lab2used, env, sCode] -> [false, env,
                singletonBuffer (JMP (lab2)) <+
                  LABEL (lab1) <+>
                  sCode <+
                  LABEL (lab2) <+>
                  compileExpr (e) <+
                  CJMP ("nz", lab1)]
            esac
        esac
    | DoWhile (s, e)   ->
        case env.genLabels (2) of
          [lab1, lab2, env] ->
            case compile (lab2, env, s) of
              [lab2used, env, sCode] -> [false, env,
                singletonBuffer (LABEL (lab1)) <+>
                  sCode <+>
                  label (lab2, lab2used) <+>
                  compileExpr (e) <+
                  CJMP ("nz", lab1)]
            esac
        esac
    | _                -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $  code <+> label (endLab, endLabUsed)
       esac
  esac
}
