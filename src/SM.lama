-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, w], insns) {
  case insns of
    {} -> c
  | READ : rest ->
    let [value, w] = readWorld(w) in
    eval(env, [value:stack, state, w], rest)
  | WRITE : rest ->
    let top:stack = stack in
    let w = writeWorld(top, w) in
    eval(env, [stack, state, w], rest)
  | BINOP(op) : rest ->
    let y:stack = stack in
    let x:stack = stack in
    let value = case op of
      "+" -> x + y
    | "-" -> x - y
    | "*" -> x * y
    | "/" -> x / y
    | "%" -> x % y
    | "<" -> x < y
    | ">" -> x > y
    | "<=" -> x <= y
    | ">=" -> x >= y
    | "==" -> x == y
    | "!=" -> x != y
    | "&&" -> x && y
    | "!!" -> x !! y
    esac in
    eval(env, [value:stack, state, w], rest)
  | LD(v@#str) : rest ->
    eval(env, [state(v) : stack, state, w], rest)
  | ST(v@#str) : rest ->
    let top:stack = stack in
    eval(env, [top:stack, state <- [v, top], w], rest)
  | CONST(v) : rest ->
    eval(env, [v : stack, state, w], rest)
  | JMP(l) : _ ->
    eval(env, c, fromLabel(env, l))
  | CJMP(c, l) : rest ->
    let x:stack = stack in
    if case c of "z" -> x == 0 | "nz" -> x != 0 esac then
      eval(env, [stack, state, w], fromLabel(env, l))
    else
      eval(env, [stack, state, w], rest)
    fi
  | LABEL(_) : rest ->
    eval(env, c, rest)
  | LDA(v) : rest ->
    eval(env, [VarRef(v) : stack, state, w], rest)
  | STI : rest ->
    let (v@#val):VarRef(name):stack = stack in
    eval(env, [v:stack, state <- [name, v], w], rest)
  | DROP : rest ->
    let v:stack = stack in
    eval(env, [stack, state, w], rest)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      ->
        let [lab, env] = genLabel(env) in
        let [labUsed, env, e] = compile(lab, env, e) in
        [false, env, e <+> label(lab, labUsed) <+ WRITE]
    | Assn(Var(x), e)   ->
        let [lab, env] = genLabel(env) in
        let [labUsed, env, e] = compile(lab, env, e) in
        [false, env, e <+> label(lab, labUsed) <+ ST (x)]
    | Assn(lvalue, e)   ->
        let [lhsLab, env] = genLabel(env) in
        let [lhsLabUsed, env, lhs] = compile(lhsLab, env, lvalue) in
        let [lab, env] = genLabel(env) in
        let [labUsed, env, e] = compile(lab, env, e) in
        [false, env, lhs <+> label(lhsLab, lhsLabUsed) <+> e <+> label(lab, labUsed) <+ STI]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If(cond, th, els) ->
        let [postCond, env] = env.genLabel in
        let [elseLabel, env] = env.genLabel in
        let [postCondUsed, env, cond] = compile(postCond, env, cond) in
        let [_, env, thenBody] = compile(lab, env, th) in
        let [_, env, elseBody] = compile(lab, env, els) in
        [true, env, cond
          <+> label(postCond, postCondUsed)
          <+ CJMP("z", elseLabel)
          <+> thenBody
          <+ JMP(lab)
          <+ LABEL(elseLabel)
          <+> elseBody
        ]
    | DoWhile(s, x) ->
        let [loopLabel, env] = env.genLabel in
        let [condLabel, env] = env.genLabel in
        let [condLabelUsed, env, body] = compile(condLabel, env, s) in
        let [beforeCmp, env] = env.genLabel in
        let [beforeCmpUsed, env, cond] = compile(beforeCmp, env, x) in
        [false, env, singletonBuffer(LABEL(loopLabel))
          <+> body
          <+> label(condLabel, condLabelUsed)
          <+> cond
          <+> label(beforeCmp, beforeCmpUsed)
          <+ CJMP("nz", loopLabel)]
    | While(x, s) ->
        let [loopLabel, env] = env.genLabel in
        let [beforeCmp, env] = env.genLabel in
        let [beforeCmpUsed, env, cond] = compile(beforeCmp, env, x) in
        let [condLabel, env] = env.genLabel in
        let [_, env, body] = compile(condLabel, env, s) in
        [false, env, singletonBuffer(JMP(condLabel)) 
          <+ LABEL(loopLabel)
          <+> body
          <+ LABEL(condLabel)
          <+> cond
          <+> label(beforeCmp, beforeCmpUsed)
          <+ CJMP("nz", loopLabel)]
    | Var(x) -> [false, env, singletonBuffer(LD(x))]
    | Ref(x) -> [false, env, singletonBuffer(LDA(x))]
    | Const(x) -> [false, env, singletonBuffer(CONST(x))]
    | Binop (op, lhs, rhs) ->
        let [e1lab, env] = genLabel(env) in
        let [e1labUsed, env, lhs] = compile(e1lab, env, lhs) in
        let [e2lab, env] = genLabel(env) in
        let [e2labUsed, env, rhs] = compile(e2lab, env, rhs) in
        [false, env, lhs
          <+> label(e1lab, e1labUsed)
          <+> rhs
          <+> label(e2lab, e2labUsed)
          <+ BINOP(op)]
    | Ignore(expr) ->
        let [beforeDrop, env] = genLabel(env) in
        let [beforeDropUsed, env, expr] = compile(beforeDrop, env, expr) in
        [false, env, expr <+ DROP]
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
