-- X86 codegeneration interface
-- We use stack machine programs as intermediate representation
import SM;
import Collection;
import List;
import Buffer;
import Fun;
import Manifest;

-- Assembler language interface
-- The registers:
  
var regs = ["%rbx", "%rcx", "%rsi", "%rdi",
            "%r8" , "%r9" , "%r10", "%r11",
	    "%r12", "%r13", "%r14", "%r15",
	    "%rax", "%rdx", "%rbp", "%rsp"];

-- We can not freely operate with all register; only with 4 by now
var nRegs = length (regs) - 5;

-- For convenience we define the following synonyms for the registers: 
var rbx = R (0),
    rcx = R (1),
    rsi = R (2),
    rdi = R (3),
    r8  = R (4),
    r9  = R (5),
    r10 = R (6),
    r11 = R (7),
    r12 = R (8),
    r13 = R (9),
    r14 = R (10),
    r15 = R (11),
    rax = R (12),
    rdx = R (13),
    rbp = R (14),
    rsp = R (15);

-- Lama 1.3: crash after start if al, ah, dl, dh are directly initialized by string literals
var regs8 = ["%al", "%ah", "%dl", "%dh"];
var al = regs8[0],
    ah = regs8[1],
    dl = regs8[2],
    dh = regs8[3];

-- We need to know the word size to calculate offsets correctly
var wordSize = 8;

-- We need to distinguish the following operand types: 
--    R (int)       -- hard register                    
--    S (int)       -- a position on the hardware stack 
--    M (string)    -- a named memory location          
--    L (int)       -- an immediate operand             
--    I (int, opnd) -- an indirect operand with offset

-- Some x86 instruction (we do not need all of them):
--   Mov   (opnd, opnd)         -- copies a value from the first to the second operand  
--   Lea   (opnd, opnd)         -- loads an address of the first operand into the second
--   Binop (string, opnd, opnd) -- makes a binary operation; note, the first operand   
--                                 designates x86 operator, not the source language one
--   IDiv  (opnd)               -- x86 integer division, see instruction set reference 
--   Cltd                       -- see instruction set reference           
--   Set   (string, string)     -- sets a value from flags; the first operand is the   
--                                 suffix, which determines the value being set, the
--                                 the second --- (sub)register name
--   Jmp   (string)             -- unconditional jump to a label
--   CJmp  (string, string)     -- conditional jump to a label
--   Label (string)             -- a label
--   Push  (opnd)               -- pushes the operand on the hardware stack
--   Pop   (opnd)               -- pops from the hardware stack to the operand
--   Call  (string)             -- calls a function by its name 
--   Ret                        -- returns from a function
--   Meta  (string)             -- metainformation (declarations, etc.)
                                                               
-- Machine instruction printer
fun insnString (insn) {
  
  fun binopString (op) {
    case op of
      "+"   -> "addq"
    | "-"   -> "subq"
    | "*"   -> "imulq"
    | "&&"  -> "andq"
    | "!!"  -> "orq" 
    | "^"   -> "xorq"
    | "cmp" -> "cmpq"
    esac
  }

  fun opndString (opnd) {
    case opnd of
      R (i)    -> regs [i]
    | S (i)    -> sprintf ("-%d(%%rbp)", (i+1) * wordSize)
    | M (x)    -> sprintf ("%s(%rip)", x)
    | L (i)    -> sprintf ("$%d", i)
    | I (0, x) -> sprintf ("(%s)", opndString (x))
    | I (n, x) -> sprintf ("%d(%s)", n, opndString (x))
    esac
  }
  
  case insn of
    Cltd               -> "\tcqo\n"
  | Set   (suf, s)     -> sprintf ("\tset%s\t%s\n", suf, s)
  | Sal   (s)          -> sprintf ("\tsalq\t%s\n", s)
  | IDiv  (s1)         -> sprintf ("\tidivq\t%s\n", opndString (s1))
  | Binop (op, s1, s2) -> sprintf ("\t%s\t%s,\t%s\n", binopString (op), opndString (s1), opndString (s2))
  | Mov   (s1, s2)     -> sprintf ("\tmovq\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Lea   (s1, s2)     -> sprintf ("\tleaq\t%s,\t%s\n", opndString (s1), opndString (s2))
  | Push  (s)          -> sprintf ("\tpushq\t%s\n", opndString (s))
  | Pop   (s)          -> sprintf ("\tpopq\t%s\n", opndString (s))
  | Ret                -> "\tret\n"
  | Call  (p)          -> sprintf ("\tcall\t%s\n", p)
  | Label (l)          -> sprintf ("%s:\n", l)
  | Jmp   (l)          -> sprintf ("\tjmp\t%s\n", l)
  | CJmp  (c, l)       -> sprintf ("\tj%s\t%s\n", c, l)
  | Meta  (m)          -> m
  esac
}

-- Environment for symbolic interpreter
-- An environment holds
--    a symbolic stack
--    a maximal stack depth reached so far
--    a set of global variable names
--    a barrier condition (set up right after an unconditional jump is interpreter)
--    a stack map which maps labels to symbolic stacks

fun makeEnv (stack, stackSlots, globals, barrier, stackMap) {
  -- Returns an internal name for a global variable
  fun globalName (name) {
    "global_" ++ name
  }

  -- Returns a string representation of the environment
  fun envString () {
    sprintf ("Stack     : %s\nStackSlots: %d\nGlobals   : %s\n", string (stack), stackSlots, string (elements (globals)))
  }
  
  -- Allocates a new position on the symbolic stack;
  -- returns a pair: a location for allocated item and
  -- an updated environment
  fun allocate () {
    case
      case stack of
        {}        -> [rbx, 0]
      | S (n) : _ -> [S (n+1), n+2]
      | R (n) : _ -> if n < nRegs then [R (n+1), stackSlots] else [S (0), 1] fi
      | _         -> [S (0), 1]
      esac
    of [x, n] -> [x, makeEnv (x : stack, if n > stackSlots then n else stackSlots fi, globals, barrier, stackMap)]esac
  }

  -- Pushes an item on the symbolic state; returns an updated envirtonment
  fun push (y) {
    makeEnv (y : stack, stackSlots, globals, barrier, stackMap)
  }

  -- Pops one item from the symbolic stack; returns a pair: a popped
  -- item and an updated environment
  fun pop () {
    case stack of
      x : stack -> [x, makeEnv (stack, stackSlots, globals, barrier, stackMap)]
    esac
  }

  -- Pops two items from the symbolic stack; returns a triple:
  -- popped items and an undated environment
  fun pop2 () {
    case stack of
      x : y : stack -> [x, y, makeEnv (stack, stackSlots, globals, barrier, stackMap)]
    esac
  }

  -- Peeks the top of the symbolic stack
  fun peek () {
    fst (stack)
  }
  
  -- Adds a global variable; returns an updated environment
  fun addGlobal (name) {
    makeEnv (stack, stackSlots, addSet (globals, globalName (name)), barrier, stackMap)
  }

  -- References a global variable
  fun loc (name) {
    M (globalName (name))
  }
  
  -- Gets a list of global variables from the environment
  fun getGlobals () {
    elements (globals)
  }

  -- Gets a maximal stack size from the environment
  fun getStackSize () {
    stackSlots
  }

  -- Gets barrier condition
  fun isBarrier () {
    barrier
  }

  -- Sets barrier condition
  fun setBarrier () {
    makeEnv (stack, stackSlots, globals, true, stackMap)
  }

  -- Associates the current symbolic state with a label
  fun setStack (l) {
    makeEnv (stack, stackSlots, globals, false, addMap (stackMap, l, stack))
  }

  -- Retrieves a stack for a label
  fun retrieveStack (l) {
    case findMap (stackMap, l) of
      None         -> makeEnv (stack, stackSlots, globals, false, stackMap)
    | Some (stack) -> makeEnv (stack, stackSlots, globals, false, stackMap)
    esac
  }

  -- Returns list of registers in stack which may be corrupted by callee function
  -- x86_64: also adds padding reg if required
  fun regsToSave () {
    fun checkCell (cell) { 
      case cell of
        R (x) -> x > 0 && x < 8
      | _ -> false
      esac
    }
    
    let buf = if size (stack) >= 8 
      then {rcx, rsi, rdi, r8, r9, r10, r11}
      else filter (checkCell, stack) 
      fi in if size (buf) % 2 == 0 then buf else buf +++ {rax} fi
}

  [envString,
   allocate,
   push,
   pop,
   pop2,
   addGlobal,
   loc,
   getGlobals,
   getStackSize,
   peek,
   isBarrier,
   setBarrier,
   setStack,
   retrieveStack,
   regsToSave]
}

-- Exported accessors
fun envString (env) {
  env [0] ()
}

fun allocate (env) {
  env [1] ()
}

fun push (env, x) {
  env [2] (x)
}

fun pop (env) {
  env [3] ()
}

fun pop2 (env) {
  env [4] ()
}

fun addGlobal (env, name) {
  env [5] (name)
}

fun loc (env, name) {
  env [6] (name)
}

fun getGlobals (env) {
  env [7] ()
}

fun getStackSize (env) {
  env [8] ()
}

fun peek (env) {
  env [9] ()
}

fun isBarrier (env) {
  env [10] ()
}

fun setBarrier (env) {
  env [11] ()
}

fun setStack (env, l) {
  env [12] (l)
}

fun retrieveStack (env, l) {
  env [13] (l)
}

fun regsToSave (env) {
  env [14] ()
}

-- Creates an initial environment
fun initEnv () {
  makeEnv ({}, 0, emptySet (compare), false, emptyMap (compare))
}


-- Codegeneration helper functions
-- Generates code section
fun codeSection (text) {
  singletonBuffer (Meta ("\t.text\n")) <+> text
}

-- Generates data section
fun dataSection (text) {
  singletonBuffer (Meta ("\t.data\n")) <+> text
}

-- Generates data definition
fun dataDef (name) {
  Meta (sprintf ("%s:\t.quad\t0\n", name))
}

-- Generates function prologue
fun prologue (size) {
  singletonBuffer (Push (rbp)) <+
  Mov   (rsp, rbp) <+
  Binop ("-", L ((wordSize+1)/2*2*size), rsp)
}

-- Generates function epilogue
fun epilogue () {
  singletonBuffer (Mov (rbp, rsp)) <+
  Pop   (rbp) <+
  Binop ("^", rax, rax) <+
  Ret
}

-- Checks if an operand resides on a stack
fun stackOpnd (opnd) {
  case opnd of
    S (_) -> true
  | _     -> false
  esac      
}

-- Checks if an operand resides in memory
fun memOpnd (opnd) {
  case opnd of
    S (_) -> true
  | M (_) -> true
  | I (_, _) -> true
  | _     -> false
  esac
}

-- Generates a move between locations, using
-- intermediate register if needed
fun move (from, to) {
  if memOpnd (from) && memOpnd (to)
  then singletonBuffer (Mov (from, rax)) <+ Mov (rax, to)
  else singletonBuffer (Mov (from, to))
  fi
}

-- Gets a suffix for Set instruction from
-- source language comparison operator
fun suffix (op) {
  case op of
    "<"  -> "l"
  | "<=" -> "le"
  | "==" -> "e"
  | "!=" -> "ne"
  | ">=" -> "ge"
  | ">"  -> "g"
  esac
}

 fun genCallF (env, func_name, regsToSave, push_args_code, addl_code) {
  emptyBuffer() 
    <+> listBuffer (map (fun (r) { Push (r) }, regsToSave))
    <+> push_args_code
    <+  Call (func_name)
    <+> addl_code
    <+> listBuffer (map (fun (r) { Pop (r) }, reverse (regsToSave)))
}

fun addGlobalAllocate (env, x) {
  let env = addGlobal (env, x) in
    allocate (env)
}

fun addGlobalPop (env, x) {
  let env = addGlobal (env, x) in
    pop (env)
} 

fun setStackBarrier (env, l) {
  let env = setStack (env, l) in
    setBarrier (env)
}

-- Compiles stack machine code into a list of x86 instructions. Takes an environment
-- and stack machine code, returns an updated environment and x86 code.
fun compile (env, code) {
  foldl (
    fun ([env, scode], i) {
      var code = scode <+ Meta ("# " ++ showSMInsn (i) ++ "\n");
        
      case i of
        READ ->
          let regs = regsToSave (env) in 
          let [s, env] = allocate (env) in
            [env, code <+> genCallF (env, "Lread", regs, emptyBuffer (), singletonBuffer (Mov (rax, s)))]           
      | WRITE ->
          let [s, env] = pop (env) in
          let regs = regsToSave (env) in
            [env, code <+> genCallF (env, "Lwrite", regs, singletonBuffer (Mov (s, rdi)), emptyBuffer ())]
      | LD (x) ->
          let [s, env] = addGlobalAllocate (env, x) in [env, code <+> move (loc (env, x), s)]
      | ST (x) ->
          let [s, env] = addGlobalPop (env, x) in [env, code <+> move (s, loc (env, x))]
      | CONST (x) ->
          let [s, env] = allocate (env) in [env, code <+> move (L (x), s)]
      | LABEL (l) -> let env = if isBarrier (env) then retrieveStack (env, l) else env fi in [env, code <+ Label (l)]
      | JMP (l) -> [setStackBarrier (env, l), code <+ Jmp (l)]
      | CJMP (cc, l) -> let [s, env] = pop (env) in [setStackBarrier (env, l), code <+ Binop ("cmp", L (0), s) <+ CJmp (cc, l)]
      | BINOP (op) ->
          let [y, x, env] = pop2 (env) in
            if memOpnd (x) && memOpnd (y) && op != "/" && op != "%" && op != "*" then 
              code := code <+ Mov (y, rax);
              y := rax
            fi;
            
            code := code <+> case op of
              "+"  -> singletonBuffer (Binop ("+", y, x))
            | "-"  -> singletonBuffer (Binop ("-", y, x))
            | "*"  -> 
              if memOpnd (x) then 
                singletonBuffer (Mov (x, rax)) <+ Binop ("*", y, rax) <+ Mov (rax, x)
              else 
                singletonBuffer (Binop ("*", y, x)) 
              fi
            | "&&" ->
              singletonBuffer (Binop ("^", rax, rax)) -- rax = 0
                <+ Binop ("^", rdx, rdx)              -- rdx = 0
                <+ Binop ("cmp", L (0), x)            -- flags = compare(0, x)
                <+ Set (suffix ("!="), al)            -- rax[7:0] = (0 != x)
                <+ Binop ("cmp", L (0), y)            -- flags = compare(0, y)
                <+ Set (suffix ("!="), ah)            -- rax[15:8] = (0 != y)
                <+ Binop ("cmp", L (257), rax)        -- flags = compare(0x0101, rax)
                <+ Set (suffix ("=="), dl)            -- rdx[7:0] = (0x0101 == rax)
                <+ Mov (rdx, x)                       -- x = rdx
            | "!!" ->
              singletonBuffer (Binop ("^", rax, rax)) -- rax = 0
                <+ Binop ("^", rdx, rdx)              -- rdx = 0
                <+ Binop ("cmp", L (0), x)            -- flags = compare(0, x)
                <+ Set (suffix ("!="), al)            -- rax[7:0] = (0 != x)
                <+ Binop ("cmp", L (0), y)            -- flags = compare(0, y)
                <+ Set (suffix ("!="), ah)            -- rax[15:8] = (0 != y)
                <+ Binop ("cmp", L (0), rax)          -- flags = compare(0, rax)
                <+ Set (suffix ("!="), dl)            -- rdx[7:0] = (0 != rax)
                <+ Mov (rdx, x)                       -- x = rdx
            | "/"  -> singletonBuffer (Mov (x, rax)) <+ Cltd <+ IDiv (y) <+ Mov (rax, x)
            | "%"  -> singletonBuffer (Mov (x, rax)) <+ Cltd <+ IDiv (y) <+ Mov (rdx, x)
            | _    ->
              singletonBuffer (Binop ("^", rax, rax))
                <+ Binop ("cmp", y, x)
                <+ Set (suffix (op), al)
                <+ Mov (rax, x)
            esac;
            
            [push (env, x), code]
      | LDA (x) -> let [s, env] = addGlobalAllocate (env, x) in [env, code <+ Lea (loc (env, x), s)]
      | STI -> 
        let [v, ref, env] = pop2 (env) in
        let [vNew, env] = allocate (env) in 
          if memOpnd (ref) then
            [env, code <+> move (ref, rdx) <+> move (v, I (0, rdx)) <+> move (v, vNew)]
          else 
           [env, code <+> move (v, I (0, ref)) <+> move (v, vNew)]
          fi
      | DROP -> let [_, env] = pop (env) in [env, code]
      | DUP -> 
          let [x, env] = peek (env) in 
          let [s, env] = allocate (env) in
            [env, code <+> move (s, x)]
      | _ -> failure ("codegeneration for instruction %s is not yet implemented\n", string (i))
      esac
    }, [env, emptyBuffer ()], code)
}

-- A top-level codegeneration function. Takes a driver's environment and a stack machine program,
-- compiles the program into machine code, and compiles the machine code into an executable
public fun compileX86 (args, code) {
  case compile (initEnv (), code) of
    [env, code] ->
       var asmFile = getBaseName (args) ++ ".s",
           runtime = case getEnv ("LAMA_RUNTIME") of
                       #val  -> "../runtime64/"
                     | path  -> path
                     esac ++ "/runtime.o";
       
       fwrite (asmFile,
               stringcat (map (insnString, 
                    getBuffer $
                      singletonBuffer (Meta ("\t.global\tmain\n")) <+>
                      dataSection (listBuffer $ map (dataDef, getGlobals (env))) <+>
                      codeSection (
                        singletonBuffer (Meta ("main:\n")) <+>
                        prologue (getStackSize (env)) <+>
                        code <+>
                        epilogue ()
                      )
                    )));
                    
       system (stringcat ({"gcc -g -o ", getBaseName (args), " ", runtime, " ", asmFile}))
  esac
}